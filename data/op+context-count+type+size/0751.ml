
let rec clone x n =
  let accum = [] in
  let rec helper accum n =
    if n < 1 then accum else helper (x :: accum) (n - 1) in
  helper accum n;;

let padZero l1 l2 =
  let (a,b) = ((List.length l1), (List.length l2)) in
  if a < b
  then ((List.append (clone 0 (b - a)) l1), l2)
  else if b < a then (l1, (List.append (clone 0 (a - b)) l2)) else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (h::t,b) = a in
      if (x / h) > 0
      then
        let asd = x / h in
        let asd2 = (x + h) - (asd * 10) in
        let asd3 = asd :: t in (asd3, (padZero (asd3, asd2)))
      else (t, ((x + h) :: b)) in
    let base = ((List.rev l1), []) in
    let args = List.rev l2 in let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n =
  let accum = [] in
  let rec helper accum n =
    if n < 1 then accum else helper (x :: accum) (n - 1) in
  helper accum n;;

let padZero l1 l2 =
  let (a,b) = ((List.length l1), (List.length l2)) in
  if a < b
  then ((List.append (clone 0 (b - a)) l1), l2)
  else if b < a then (l1, (List.append (clone 0 (a - b)) l2)) else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (h::t,b) = a in
      if (x / h) > 0
      then
        let asd = x / h in
        let asd2 = (x + h) - (asd * 10) in
        let asd3 = asd :: t in
        let (_,asd4) = padZero asd3 (asd2 :: b) in (asd3, asd4)
      else (t, ((x + h) :: b)) in
    let base = ((List.rev l1), []) in
    let args = List.rev l2 in let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(25,33)-(25,37)
(25,33)-(25,59)
(25,40)-(25,47)
(25,40)-(25,59)
(25,49)-(25,59)
(25,55)-(25,59)
(26,13)-(26,14)
(26,13)-(26,29)
*)

(* type error slice
(2,4)-(6,19)
(2,15)-(6,17)
(2,17)-(6,17)
(3,3)-(6,17)
(3,3)-(6,17)
(3,15)-(3,17)
(4,3)-(6,17)
(4,3)-(6,17)
(4,18)-(5,56)
(4,24)-(5,56)
(5,5)-(5,56)
(5,5)-(5,56)
(5,8)-(5,9)
(5,8)-(5,13)
(5,8)-(5,13)
(5,8)-(5,13)
(5,12)-(5,13)
(5,19)-(5,24)
(5,30)-(5,36)
(5,30)-(5,56)
(5,30)-(5,56)
(5,30)-(5,56)
(5,38)-(5,39)
(5,38)-(5,48)
(5,43)-(5,48)
(5,51)-(5,52)
(5,51)-(5,56)
(5,55)-(5,56)
(6,3)-(6,9)
(6,3)-(6,17)
(6,3)-(6,17)
(6,10)-(6,15)
(6,16)-(6,17)
(8,4)-(12,78)
(8,13)-(12,75)
(8,16)-(12,75)
(9,3)-(12,75)
(9,3)-(12,75)
(9,17)-(9,28)
(9,17)-(9,31)
(9,17)-(9,31)
(9,17)-(9,49)
(9,29)-(9,31)
(9,35)-(9,46)
(9,35)-(9,49)
(9,35)-(9,49)
(9,47)-(9,49)
(10,3)-(12,75)
(10,3)-(12,75)
(10,6)-(10,7)
(10,6)-(10,11)
(10,6)-(10,11)
(10,10)-(10,11)
(11,10)-(11,21)
(11,10)-(11,42)
(11,10)-(11,42)
(11,10)-(11,42)
(11,10)-(11,47)
(11,23)-(11,28)
(11,23)-(11,37)
(11,23)-(11,37)
(11,23)-(11,37)
(11,29)-(11,30)
(11,32)-(11,33)
(11,32)-(11,37)
(11,36)-(11,37)
(11,40)-(11,42)
(11,45)-(11,47)
(12,8)-(12,75)
(12,8)-(12,75)
(12,11)-(12,12)
(12,11)-(12,16)
(12,11)-(12,16)
(12,15)-(12,16)
(12,23)-(12,25)
(12,23)-(12,60)
(12,28)-(12,39)
(12,28)-(12,60)
(12,28)-(12,60)
(12,28)-(12,60)
(12,41)-(12,46)
(12,41)-(12,55)
(12,47)-(12,48)
(12,50)-(12,51)
(12,50)-(12,55)
(12,54)-(12,55)
(12,58)-(12,60)
(12,69)-(12,71)
(12,69)-(12,75)
(12,73)-(12,75)
(14,4)-(15,72)
(14,20)-(15,70)
(15,3)-(15,70)
(15,3)-(15,70)
(15,3)-(15,70)
(15,3)-(15,70)
(15,3)-(15,70)
(15,3)-(15,70)
(15,3)-(15,70)
(15,9)-(15,10)
(15,24)-(15,26)
(15,37)-(15,70)
(15,37)-(15,70)
(15,40)-(15,41)
(15,40)-(15,45)
(15,40)-(15,45)
(15,40)-(15,45)
(15,44)-(15,45)
(15,51)-(15,61)
(15,51)-(15,63)
(15,51)-(15,63)
(15,62)-(15,63)
(15,69)-(15,70)
(17,4)-(29,37)
(17,12)-(29,33)
(17,15)-(29,33)
(18,3)-(29,33)
(18,12)-(28,78)
(19,5)-(28,78)
(19,5)-(28,78)
(19,11)-(26,29)
(19,13)-(26,29)
(20,7)-(26,29)
(20,7)-(26,29)
(20,7)-(26,29)
(20,7)-(26,29)
(20,22)-(20,23)
(21,7)-(26,29)
(21,7)-(26,29)
(21,11)-(21,12)
(21,11)-(21,16)
(21,11)-(21,16)
(21,11)-(21,16)
(21,11)-(21,21)
(21,11)-(21,21)
(21,15)-(21,16)
(21,20)-(21,21)
(23,9)-(25,59)
(23,9)-(25,59)
(23,19)-(23,20)
(23,19)-(23,24)
(23,23)-(23,24)
(24,9)-(25,59)
(24,9)-(25,59)
(24,21)-(24,22)
(24,21)-(24,26)
(24,21)-(24,39)
(24,25)-(24,26)
(24,31)-(24,34)
(24,31)-(24,39)
(24,37)-(24,39)
(25,9)-(25,59)
(25,9)-(25,59)
(25,20)-(25,23)
(25,20)-(25,28)
(25,27)-(25,28)
(25,33)-(25,37)
(25,33)-(25,59)
(25,40)-(25,47)
(25,40)-(25,59)
(25,40)-(25,59)
(25,49)-(25,53)
(25,49)-(25,59)
(25,55)-(25,59)
(26,13)-(26,14)
(26,13)-(26,29)
(26,18)-(26,19)
(26,18)-(26,23)
(26,18)-(26,29)
(26,22)-(26,23)
(26,28)-(26,29)
(27,5)-(28,78)
(27,5)-(28,78)
(27,18)-(27,26)
(27,18)-(27,29)
(27,18)-(27,29)
(27,18)-(27,34)
(27,27)-(27,29)
(27,32)-(27,34)
(28,5)-(28,78)
(28,5)-(28,78)
(28,16)-(28,24)
(28,16)-(28,27)
(28,16)-(28,27)
(28,25)-(28,27)
(28,31)-(28,78)
(28,31)-(28,78)
(28,45)-(28,59)
(28,45)-(28,71)
(28,45)-(28,71)
(28,45)-(28,71)
(28,45)-(28,71)
(28,60)-(28,61)
(28,62)-(28,66)
(28,67)-(28,71)
(28,75)-(28,78)
(29,3)-(29,13)
(29,15)-(29,18)
(29,15)-(29,33)
(29,15)-(29,33)
(29,20)-(29,27)
(29,20)-(29,33)
(29,20)-(29,33)
(29,20)-(29,33)
(29,28)-(29,30)
(29,31)-(29,33)
*)

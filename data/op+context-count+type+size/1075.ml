
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | FiboPlus of expr* expr
  | TheThing of expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildFiboPlus (e1,e2) = FiboPlus (e1, e2);;

let buildSine e = Sine e;;

let buildTheThing (e1,e2,e3) = TheThing (e1, e2, e3);;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth > 0
  then
    match rand (0, 8) with
    | 0 -> buildX ()
    | 1 -> buildY ()
    | 2 -> buildSine (build (rand, (depth - 1)))
    | 3 -> buildCosine (build (rand, (depth - 1)))
    | 4 ->
        buildAverage
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 5 ->
        buildTimes ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 6 ->
        buildThresh
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
            (build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 7 ->
        buildFiboPlus
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
            (build (rand, (depth - 1))), (build (rand, (depth - 1))),
            (build (rand, (depth - 1))))
    | 8 ->
        buildTheThing
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
            (build (rand, (depth - 1))))
  else (match rand (0, 1) with | 0 -> buildX () | 1 -> buildY ());;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | FiboPlus of expr* expr
  | TheThing of expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildFiboPlus (e1,e2) = FiboPlus (e1, e2);;

let buildSine e = Sine e;;

let buildTheThing (e1,e2,e3) = TheThing (e1, e2, e3);;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth > 0
  then
    match rand (0, 8) with
    | 0 -> buildX ()
    | 1 -> buildY ()
    | 2 -> buildSine (build (rand, (depth - 1)))
    | 3 -> buildCosine (build (rand, (depth - 1)))
    | 4 ->
        buildAverage
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 5 ->
        buildTimes ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 6 ->
        buildThresh
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
            (build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 7 ->
        buildFiboPlus
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 8 ->
        buildTheThing
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
            (build (rand, (depth - 1))))
  else (match rand (0, 1) with | 0 -> buildX () | 1 -> buildY ());;

*)

(* changed spans
(41,13)-(41,36)
(41,42)-(41,65)
(43,22)-(43,45)
(43,51)-(43,74)
(50,13)-(50,18)
(50,13)-(50,36)
(50,13)-(52,37)
(50,20)-(50,24)
(50,27)-(50,32)
(50,27)-(50,36)
(50,35)-(50,36)
(51,43)-(51,48)
(54,9)-(54,22)
(55,13)-(55,36)
(55,13)-(56,37)
(55,42)-(55,47)
(55,42)-(55,65)
(55,49)-(55,65)
(55,56)-(55,61)
(55,56)-(55,65)
(55,64)-(55,65)
(57,9)-(57,65)
*)

(* type error slice
(13,4)-(13,46)
(13,19)-(13,43)
(13,28)-(13,43)
(13,37)-(13,39)
(13,41)-(13,43)
(15,4)-(15,31)
(15,17)-(15,29)
(15,21)-(15,29)
(15,28)-(15,29)
(17,4)-(17,48)
(17,20)-(17,45)
(17,29)-(17,45)
(17,39)-(17,41)
(17,43)-(17,45)
(19,4)-(19,27)
(19,15)-(19,25)
(19,19)-(19,25)
(19,24)-(19,25)
(21,4)-(21,55)
(21,20)-(21,52)
(21,32)-(21,52)
(21,42)-(21,44)
(21,46)-(21,48)
(21,50)-(21,52)
(23,4)-(23,70)
(23,18)-(23,67)
(23,39)-(23,67)
(23,47)-(23,48)
(23,50)-(23,51)
(23,53)-(23,59)
(23,61)-(23,67)
(25,4)-(25,42)
(25,17)-(25,39)
(25,26)-(25,39)
(25,33)-(25,35)
(25,37)-(25,39)
(27,4)-(27,23)
(27,12)-(27,21)
(27,12)-(27,21)
(27,17)-(27,21)
(29,4)-(29,23)
(29,12)-(29,21)
(29,12)-(29,21)
(29,17)-(29,21)
(31,16)-(57,65)
(32,3)-(57,65)
(32,3)-(57,65)
(32,6)-(32,11)
(32,6)-(32,15)
(32,6)-(32,15)
(32,6)-(32,15)
(32,14)-(32,15)
(34,5)-(56,37)
(34,5)-(56,37)
(34,5)-(56,37)
(34,5)-(56,37)
(34,5)-(56,37)
(34,5)-(56,37)
(34,5)-(56,37)
(34,5)-(56,37)
(34,5)-(56,37)
(34,5)-(56,37)
(34,5)-(56,37)
(34,5)-(56,37)
(34,5)-(56,37)
(34,5)-(56,37)
(34,5)-(56,37)
(34,5)-(56,37)
(34,5)-(56,37)
(34,5)-(56,37)
(34,5)-(56,37)
(34,11)-(34,15)
(34,11)-(34,21)
(34,11)-(34,21)
(34,17)-(34,18)
(34,17)-(34,21)
(34,20)-(34,21)
(35,12)-(35,18)
(35,12)-(35,21)
(35,19)-(35,21)
(36,12)-(36,18)
(36,12)-(36,21)
(36,19)-(36,21)
(37,12)-(37,21)
(37,12)-(37,46)
(37,12)-(37,46)
(37,23)-(37,28)
(37,23)-(37,46)
(37,23)-(37,46)
(37,30)-(37,34)
(37,30)-(37,46)
(37,37)-(37,42)
(37,37)-(37,46)
(37,45)-(37,46)
(38,12)-(38,23)
(38,12)-(38,48)
(38,25)-(38,30)
(38,25)-(38,48)
(38,25)-(38,48)
(38,32)-(38,36)
(38,32)-(38,48)
(38,39)-(38,44)
(38,39)-(38,48)
(38,47)-(38,48)
(40,9)-(40,21)
(40,9)-(41,65)
(41,13)-(41,18)
(41,13)-(41,36)
(41,13)-(41,36)
(41,13)-(41,65)
(41,20)-(41,24)
(41,20)-(41,36)
(41,27)-(41,32)
(41,27)-(41,36)
(41,35)-(41,36)
(41,42)-(41,47)
(41,42)-(41,65)
(41,42)-(41,65)
(41,49)-(41,53)
(41,49)-(41,65)
(41,56)-(41,61)
(41,56)-(41,65)
(41,64)-(41,65)
(43,9)-(43,19)
(43,9)-(43,74)
(43,22)-(43,27)
(43,22)-(43,45)
(43,22)-(43,45)
(43,22)-(43,74)
(43,29)-(43,33)
(43,29)-(43,45)
(43,36)-(43,41)
(43,36)-(43,45)
(43,44)-(43,45)
(43,51)-(43,56)
(43,51)-(43,74)
(43,51)-(43,74)
(43,58)-(43,62)
(43,58)-(43,74)
(43,65)-(43,70)
(43,65)-(43,74)
(43,73)-(43,74)
(45,9)-(45,20)
(45,9)-(47,66)
(46,13)-(46,18)
(46,13)-(46,36)
(46,13)-(46,36)
(46,13)-(47,66)
(46,20)-(46,24)
(46,20)-(46,36)
(46,27)-(46,32)
(46,27)-(46,36)
(46,35)-(46,36)
(46,42)-(46,47)
(46,42)-(46,65)
(46,42)-(46,65)
(46,49)-(46,53)
(46,49)-(46,65)
(46,56)-(46,61)
(46,56)-(46,65)
(46,64)-(46,65)
(47,14)-(47,19)
(47,14)-(47,37)
(47,14)-(47,37)
(47,21)-(47,25)
(47,21)-(47,37)
(47,28)-(47,33)
(47,28)-(47,37)
(47,36)-(47,37)
(47,43)-(47,48)
(47,43)-(47,66)
(47,43)-(47,66)
(47,50)-(47,54)
(47,50)-(47,66)
(47,57)-(47,62)
(47,57)-(47,66)
(47,65)-(47,66)
(49,9)-(49,22)
(49,9)-(52,37)
(49,9)-(52,37)
(50,13)-(50,18)
(50,13)-(50,36)
(50,13)-(50,36)
(50,13)-(52,37)
(50,20)-(50,24)
(50,20)-(50,36)
(50,27)-(50,32)
(50,27)-(50,36)
(50,35)-(50,36)
(50,42)-(50,47)
(50,42)-(50,65)
(50,42)-(50,65)
(50,49)-(50,53)
(50,49)-(50,65)
(50,56)-(50,61)
(50,56)-(50,65)
(50,64)-(50,65)
(51,14)-(51,19)
(51,14)-(51,37)
(51,14)-(51,37)
(51,21)-(51,25)
(51,21)-(51,37)
(51,28)-(51,33)
(51,28)-(51,37)
(51,36)-(51,37)
(51,43)-(51,48)
(51,43)-(51,66)
(51,43)-(51,66)
(51,50)-(51,54)
(51,50)-(51,66)
(51,57)-(51,62)
(51,57)-(51,66)
(51,65)-(51,66)
(52,14)-(52,19)
(52,14)-(52,37)
(52,14)-(52,37)
(52,21)-(52,25)
(52,21)-(52,37)
(52,28)-(52,33)
(52,28)-(52,37)
(52,36)-(52,37)
(54,9)-(54,22)
(54,9)-(56,37)
(55,13)-(55,18)
(55,13)-(55,36)
(55,13)-(55,36)
(55,13)-(56,37)
(55,20)-(55,24)
(55,20)-(55,36)
(55,27)-(55,32)
(55,27)-(55,36)
(55,35)-(55,36)
(55,42)-(55,47)
(55,42)-(55,65)
(55,42)-(55,65)
(55,49)-(55,53)
(55,49)-(55,65)
(55,56)-(55,61)
(55,56)-(55,65)
(55,64)-(55,65)
(56,14)-(56,19)
(56,14)-(56,37)
(56,14)-(56,37)
(56,21)-(56,25)
(56,21)-(56,37)
(56,28)-(56,33)
(56,28)-(56,37)
(56,36)-(56,37)
(57,9)-(57,65)
(57,9)-(57,65)
(57,9)-(57,65)
(57,9)-(57,65)
(57,15)-(57,19)
(57,15)-(57,25)
(57,21)-(57,22)
(57,21)-(57,25)
(57,24)-(57,25)
(57,39)-(57,45)
(57,39)-(57,48)
(57,46)-(57,48)
(57,56)-(57,62)
(57,56)-(57,65)
(57,63)-(57,65)
*)

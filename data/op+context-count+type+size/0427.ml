
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Tan of expr
  | Average of expr* expr
  | Times of expr* expr
  | TimesMod of expr* expr* expr
  | Thresh of expr* expr* expr* expr;;

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | SineSq of expr
  | Average of expr* expr
  | Times of expr* expr
  | TimesModOne of expr* expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildTimesMod (e1,e2,e3) = TimesMod (e1, e2, e3);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth > 0
  then
    match rand (0, 6) with
    | 0 ->
        buildTimesMod
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
            (build (rand, (depth - 1))))
    | 2 -> buildSine (build (rand, (depth - 1)))
    | 3 -> buildCosine (build (rand, (depth - 1)))
    | 4 ->
        buildAverage
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 5 ->
        buildTimes ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 6 ->
        buildThresh
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
            (build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | _ -> buildY ()
  else
    (match rand (0, 1) with
     | 0 -> buildX ()
     | 1 -> buildY ()
     | _ -> buildX ());;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | SineSq of expr
  | Average of expr* expr
  | Times of expr* expr
  | TimesModOne of expr* expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildSineSq e = SineSq e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth > 0
  then
    match rand (0, 6) with
    | 1 -> buildSineSq (build (rand, (depth - 1)))
    | 2 -> buildSine (build (rand, (depth - 1)))
    | 3 -> buildCosine (build (rand, (depth - 1)))
    | 4 ->
        buildAverage
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 5 ->
        buildTimes ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 6 ->
        buildThresh
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
            (build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | _ -> buildY ()
  else
    (match rand (0, 1) with
     | 0 -> buildX ()
     | 1 -> buildY ()
     | _ -> buildX ());;

*)

(* changed spans
(30,18)-(30,67)
(34,20)-(34,52)
(34,32)-(34,52)
(34,42)-(34,44)
(34,46)-(34,48)
(34,50)-(34,52)
(43,5)-(59,21)
(45,9)-(45,22)
(46,13)-(46,18)
(46,13)-(46,36)
(46,13)-(47,37)
(46,20)-(46,24)
(46,20)-(46,36)
(46,27)-(46,32)
(46,27)-(46,36)
(46,35)-(46,36)
(46,42)-(46,47)
(46,42)-(46,65)
(46,49)-(46,53)
(46,49)-(46,65)
(46,56)-(46,61)
(46,56)-(46,65)
(46,64)-(46,65)
(52,13)-(52,36)
(52,42)-(52,65)
(54,22)-(54,45)
(54,51)-(54,74)
*)

(* type error slice
(24,4)-(24,46)
(24,19)-(24,43)
(24,28)-(24,43)
(24,37)-(24,39)
(24,41)-(24,43)
(26,4)-(26,31)
(26,17)-(26,29)
(26,21)-(26,29)
(26,28)-(26,29)
(28,4)-(28,27)
(28,15)-(28,25)
(28,19)-(28,25)
(28,24)-(28,25)
(30,4)-(30,70)
(30,18)-(30,67)
(30,39)-(30,67)
(30,47)-(30,48)
(30,50)-(30,51)
(30,53)-(30,59)
(30,61)-(30,67)
(32,4)-(32,42)
(32,17)-(32,39)
(32,26)-(32,39)
(32,33)-(32,35)
(32,37)-(32,39)
(34,4)-(34,55)
(34,20)-(34,52)
(34,32)-(34,52)
(34,42)-(34,44)
(34,46)-(34,48)
(34,50)-(34,52)
(36,4)-(36,23)
(36,12)-(36,21)
(36,12)-(36,21)
(36,17)-(36,21)
(38,4)-(38,23)
(38,12)-(38,21)
(38,12)-(38,21)
(38,17)-(38,21)
(40,16)-(64,22)
(41,3)-(64,22)
(41,3)-(64,22)
(41,6)-(41,11)
(41,6)-(41,15)
(41,6)-(41,15)
(41,6)-(41,15)
(41,14)-(41,15)
(43,5)-(59,21)
(43,5)-(59,21)
(43,5)-(59,21)
(43,5)-(59,21)
(43,5)-(59,21)
(43,5)-(59,21)
(43,5)-(59,21)
(43,5)-(59,21)
(43,5)-(59,21)
(43,5)-(59,21)
(43,5)-(59,21)
(43,5)-(59,21)
(43,5)-(59,21)
(43,5)-(59,21)
(43,5)-(59,21)
(43,11)-(43,15)
(43,11)-(43,21)
(43,11)-(43,21)
(43,17)-(43,18)
(43,17)-(43,21)
(43,20)-(43,21)
(45,9)-(45,22)
(45,9)-(47,37)
(45,9)-(47,37)
(46,13)-(46,18)
(46,13)-(46,36)
(46,13)-(46,36)
(46,13)-(47,37)
(46,20)-(46,24)
(46,20)-(46,36)
(46,27)-(46,32)
(46,27)-(46,36)
(46,35)-(46,36)
(46,42)-(46,47)
(46,42)-(46,65)
(46,42)-(46,65)
(46,49)-(46,53)
(46,49)-(46,65)
(46,56)-(46,61)
(46,56)-(46,65)
(46,64)-(46,65)
(47,14)-(47,19)
(47,14)-(47,37)
(47,14)-(47,37)
(47,21)-(47,25)
(47,21)-(47,37)
(47,28)-(47,33)
(47,28)-(47,37)
(47,36)-(47,37)
(48,12)-(48,21)
(48,12)-(48,46)
(48,23)-(48,28)
(48,23)-(48,46)
(48,23)-(48,46)
(48,30)-(48,34)
(48,30)-(48,46)
(48,37)-(48,42)
(48,37)-(48,46)
(48,45)-(48,46)
(49,12)-(49,23)
(49,12)-(49,48)
(49,25)-(49,30)
(49,25)-(49,48)
(49,25)-(49,48)
(49,32)-(49,36)
(49,32)-(49,48)
(49,39)-(49,44)
(49,39)-(49,48)
(49,47)-(49,48)
(51,9)-(51,21)
(51,9)-(52,65)
(52,13)-(52,18)
(52,13)-(52,36)
(52,13)-(52,36)
(52,13)-(52,65)
(52,20)-(52,24)
(52,20)-(52,36)
(52,27)-(52,32)
(52,27)-(52,36)
(52,35)-(52,36)
(52,42)-(52,47)
(52,42)-(52,65)
(52,42)-(52,65)
(52,49)-(52,53)
(52,49)-(52,65)
(52,56)-(52,61)
(52,56)-(52,65)
(52,64)-(52,65)
(54,9)-(54,19)
(54,9)-(54,74)
(54,22)-(54,27)
(54,22)-(54,45)
(54,22)-(54,45)
(54,22)-(54,74)
(54,29)-(54,33)
(54,29)-(54,45)
(54,36)-(54,41)
(54,36)-(54,45)
(54,44)-(54,45)
(54,51)-(54,56)
(54,51)-(54,74)
(54,51)-(54,74)
(54,58)-(54,62)
(54,58)-(54,74)
(54,65)-(54,70)
(54,65)-(54,74)
(54,73)-(54,74)
(56,9)-(56,20)
(56,9)-(58,66)
(57,13)-(57,18)
(57,13)-(57,36)
(57,13)-(57,36)
(57,13)-(58,66)
(57,20)-(57,24)
(57,20)-(57,36)
(57,27)-(57,32)
(57,27)-(57,36)
(57,35)-(57,36)
(57,42)-(57,47)
(57,42)-(57,65)
(57,42)-(57,65)
(57,49)-(57,53)
(57,49)-(57,65)
(57,56)-(57,61)
(57,56)-(57,65)
(57,64)-(57,65)
(58,14)-(58,19)
(58,14)-(58,37)
(58,14)-(58,37)
(58,21)-(58,25)
(58,21)-(58,37)
(58,28)-(58,33)
(58,28)-(58,37)
(58,36)-(58,37)
(58,43)-(58,48)
(58,43)-(58,66)
(58,43)-(58,66)
(58,50)-(58,54)
(58,50)-(58,66)
(58,57)-(58,62)
(58,57)-(58,66)
(58,65)-(58,66)
(59,12)-(59,18)
(59,12)-(59,21)
(59,19)-(59,21)
(61,6)-(64,22)
(61,6)-(64,22)
(61,6)-(64,22)
(61,6)-(64,22)
(61,6)-(64,22)
(61,6)-(64,22)
(61,12)-(61,16)
(61,12)-(61,22)
(61,18)-(61,19)
(61,18)-(61,22)
(61,21)-(61,22)
(62,13)-(62,19)
(62,13)-(62,22)
(62,20)-(62,22)
(63,13)-(63,19)
(63,13)-(63,22)
(63,20)-(63,22)
(64,13)-(64,19)
(64,13)-(64,22)
(64,20)-(64,22)
*)

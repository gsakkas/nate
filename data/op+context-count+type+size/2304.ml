
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let leng1 = List.length l1 in
  let leng2 = List.length l2 in
  (((clone 0 (leng2 - leng1)) @ l1), ((clone 0 (leng1 - leng2)) @ l2));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match x with
      | [] -> a
      | h::t -> ((((fst h) + (snd h)) / 10), (((fst h) + (snd h)) mod 10)) ::
          t in
    let base = (0, []) in
    let args = [((List.combine l1), l2)] in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let leng1 = List.length l1 in
  let leng2 = List.length l2 in
  (((clone 0 (leng2 - leng1)) @ l1), ((clone 0 (leng1 - leng2)) @ l2));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = a in
    let base = (0, []) in
    let args = List.combine l1 l2 in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(15,7)-(18,12)
(15,13)-(15,14)
(17,21)-(17,24)
(17,21)-(17,26)
(17,21)-(17,36)
(17,21)-(17,43)
(17,21)-(17,73)
(17,21)-(18,12)
(17,25)-(17,26)
(17,31)-(17,34)
(17,31)-(17,36)
(17,35)-(17,36)
(17,41)-(17,43)
(17,49)-(17,52)
(17,49)-(17,54)
(17,49)-(17,64)
(17,49)-(17,73)
(17,53)-(17,54)
(17,59)-(17,62)
(17,59)-(17,64)
(17,63)-(17,64)
(17,71)-(17,73)
(18,11)-(18,12)
(20,5)-(21,52)
(22,3)-(22,33)
*)

(* type error slice
(2,4)-(2,68)
(2,15)-(2,64)
(2,17)-(2,64)
(2,21)-(2,64)
(2,21)-(2,64)
(2,24)-(2,25)
(2,24)-(2,30)
(2,24)-(2,30)
(2,24)-(2,30)
(2,29)-(2,30)
(2,36)-(2,38)
(2,44)-(2,45)
(2,44)-(2,64)
(2,50)-(2,55)
(2,50)-(2,64)
(2,50)-(2,64)
(2,50)-(2,64)
(2,56)-(2,57)
(2,59)-(2,60)
(2,59)-(2,64)
(2,63)-(2,64)
(4,4)-(7,73)
(4,13)-(7,69)
(4,16)-(7,69)
(5,15)-(5,26)
(5,15)-(5,29)
(5,15)-(5,29)
(5,27)-(5,29)
(6,15)-(6,26)
(6,15)-(6,29)
(6,15)-(6,29)
(6,27)-(6,29)
(7,6)-(7,11)
(7,6)-(7,28)
(7,6)-(7,35)
(7,31)-(7,32)
(7,33)-(7,35)
(7,40)-(7,69)
(7,65)-(7,66)
(7,67)-(7,69)
(9,20)-(10,70)
(10,3)-(10,70)
(10,3)-(10,70)
(10,3)-(10,70)
(10,3)-(10,70)
(10,3)-(10,70)
(10,9)-(10,10)
(10,24)-(10,26)
(10,37)-(10,70)
(10,37)-(10,70)
(10,40)-(10,41)
(10,40)-(10,45)
(10,51)-(10,61)
(10,51)-(10,63)
(10,69)-(10,70)
(12,4)-(22,37)
(12,12)-(22,33)
(12,15)-(22,33)
(13,3)-(22,33)
(13,12)-(21,52)
(14,5)-(21,52)
(14,5)-(21,52)
(14,11)-(18,12)
(14,13)-(18,12)
(15,7)-(18,12)
(15,7)-(18,12)
(15,7)-(18,12)
(15,7)-(18,12)
(15,7)-(18,12)
(15,7)-(18,12)
(15,7)-(18,12)
(15,13)-(15,14)
(16,15)-(16,16)
(17,21)-(17,24)
(17,21)-(17,26)
(17,21)-(17,26)
(17,21)-(17,36)
(17,21)-(17,36)
(17,21)-(17,36)
(17,21)-(17,43)
(17,21)-(17,73)
(17,21)-(18,12)
(17,25)-(17,26)
(17,31)-(17,34)
(17,31)-(17,36)
(17,31)-(17,36)
(17,35)-(17,36)
(17,41)-(17,43)
(17,49)-(17,52)
(17,49)-(17,54)
(17,49)-(17,54)
(17,49)-(17,64)
(17,49)-(17,73)
(17,53)-(17,54)
(17,59)-(17,62)
(17,59)-(17,64)
(17,59)-(17,64)
(17,63)-(17,64)
(17,71)-(17,73)
(18,11)-(18,12)
(19,5)-(21,52)
(19,5)-(21,52)
(19,17)-(19,18)
(19,17)-(19,22)
(19,20)-(19,22)
(20,5)-(21,52)
(20,5)-(21,52)
(20,16)-(20,41)
(20,16)-(20,41)
(20,19)-(20,31)
(20,19)-(20,34)
(20,19)-(20,34)
(20,19)-(20,39)
(20,32)-(20,34)
(20,37)-(20,39)
(21,5)-(21,52)
(21,5)-(21,52)
(21,19)-(21,33)
(21,19)-(21,45)
(21,19)-(21,45)
(21,19)-(21,45)
(21,19)-(21,45)
(21,34)-(21,35)
(21,36)-(21,40)
(21,41)-(21,45)
(21,49)-(21,52)
(22,15)-(22,18)
(22,15)-(22,33)
(22,15)-(22,33)
(22,20)-(22,27)
(22,20)-(22,33)
(22,20)-(22,33)
(22,28)-(22,30)
(22,31)-(22,33)
*)


let rec removeZero l =
  match l with | x::xs -> if x = 0 then removeZero xs else l | _ -> l;;

let rec mulByDigit i l =
  let lre = List.rev l in
  let rec helper carry accum lrev =
    match lrev with
    | [] -> removeZero accum
    | x::xs ->
        if carry = 1
        then
          (match accum with
           | x1'::xs' ->
               let num = (x * i) + x1' in
               if num < 10
               then helper 0 (num :: xs') xs
               else (helper 1 ((num / 10) mod 10)) :: (num mod 10) ::
                 (xs' xs))
        else
          (let num = x * i in
           if num < 10
           then (helper 0 num) :: (accum xs)
           else (helper 1 ((num / 10) mod 10)) :: (num mod 10) :: (accum xs)) in
  helper 0 [] lre;;


(* fix

let rec removeZero l =
  match l with | x::xs -> if x = 0 then removeZero xs else l | _ -> l;;

let rec mulByDigit i l =
  let lre = List.rev l in
  let rec helper carry accum lrev =
    match lrev with
    | [] -> removeZero accum
    | x::xs ->
        if carry = 1
        then
          (match accum with
           | x1'::xs' ->
               let num = (x * i) + x1' in
               if num < 10
               then helper 0 (num :: xs') xs
               else helper 1 (((num / 10) mod 10) :: (num mod 10) :: xs') xs)
        else
          (let num = x * i in
           if num < 10
           then helper 0 (num :: accum) xs
           else helper 1 (((num / 10) mod 10) :: (num mod 10) :: accum) xs) in
  helper 0 [] lre;;

*)

(* changed spans
(18,22)-(18,49)
(18,22)-(19,25)
(18,33)-(18,49)
(19,19)-(19,25)
(23,18)-(23,30)
(23,18)-(23,44)
(23,27)-(23,30)
(23,36)-(23,44)
(24,18)-(24,45)
(24,18)-(24,76)
(24,29)-(24,45)
(24,68)-(24,76)
*)

(* type error slice
(2,4)-(3,72)
(2,20)-(3,70)
(3,3)-(3,70)
(3,3)-(3,70)
(3,3)-(3,70)
(3,3)-(3,70)
(3,3)-(3,70)
(3,9)-(3,10)
(3,27)-(3,61)
(3,27)-(3,61)
(3,30)-(3,31)
(3,30)-(3,35)
(3,30)-(3,35)
(3,30)-(3,35)
(3,34)-(3,35)
(3,41)-(3,51)
(3,41)-(3,54)
(3,41)-(3,54)
(3,52)-(3,54)
(3,60)-(3,61)
(3,69)-(3,70)
(5,4)-(25,20)
(5,20)-(25,18)
(5,22)-(25,18)
(6,3)-(25,18)
(6,13)-(6,21)
(6,13)-(6,23)
(6,13)-(6,23)
(6,22)-(6,23)
(7,18)-(24,76)
(7,24)-(24,76)
(7,30)-(24,76)
(8,5)-(24,76)
(8,5)-(24,76)
(8,5)-(24,76)
(8,5)-(24,76)
(8,11)-(8,15)
(9,13)-(9,23)
(9,13)-(9,29)
(9,13)-(9,29)
(9,24)-(9,29)
(11,9)-(24,76)
(11,9)-(24,76)
(11,12)-(11,17)
(11,12)-(11,21)
(11,12)-(11,21)
(11,12)-(11,21)
(11,20)-(11,21)
(13,12)-(19,25)
(13,12)-(19,25)
(13,12)-(19,25)
(13,18)-(13,23)
(15,16)-(19,25)
(15,16)-(19,25)
(15,27)-(15,28)
(15,27)-(15,32)
(15,27)-(15,32)
(15,27)-(15,32)
(15,27)-(15,39)
(15,27)-(15,39)
(15,31)-(15,32)
(15,36)-(15,39)
(16,16)-(19,25)
(16,16)-(19,25)
(16,19)-(16,22)
(16,19)-(16,27)
(16,19)-(16,27)
(16,25)-(16,27)
(17,21)-(17,27)
(17,21)-(17,45)
(17,21)-(17,45)
(17,21)-(17,45)
(17,21)-(17,45)
(17,28)-(17,29)
(17,31)-(17,34)
(17,31)-(17,41)
(17,38)-(17,41)
(17,43)-(17,45)
(18,22)-(18,28)
(18,22)-(18,49)
(18,22)-(18,49)
(18,22)-(19,25)
(18,29)-(18,30)
(18,33)-(18,36)
(18,33)-(18,41)
(18,33)-(18,49)
(18,39)-(18,41)
(18,47)-(18,49)
(18,56)-(18,59)
(18,56)-(18,66)
(18,56)-(19,25)
(18,64)-(18,66)
(19,19)-(19,22)
(19,19)-(19,25)
(19,19)-(19,25)
(19,23)-(19,25)
(21,12)-(24,76)
(21,12)-(24,76)
(21,22)-(21,23)
(21,22)-(21,27)
(21,26)-(21,27)
(22,12)-(24,76)
(22,12)-(24,76)
(22,15)-(22,18)
(22,15)-(22,23)
(22,15)-(22,23)
(22,21)-(22,23)
(23,18)-(23,24)
(23,18)-(23,30)
(23,18)-(23,30)
(23,18)-(23,44)
(23,25)-(23,26)
(23,27)-(23,30)
(23,36)-(23,41)
(23,36)-(23,44)
(23,36)-(23,44)
(23,42)-(23,44)
(24,18)-(24,24)
(24,18)-(24,45)
(24,18)-(24,45)
(24,18)-(24,76)
(24,25)-(24,26)
(24,29)-(24,32)
(24,29)-(24,37)
(24,29)-(24,45)
(24,35)-(24,37)
(24,43)-(24,45)
(24,52)-(24,55)
(24,52)-(24,62)
(24,52)-(24,76)
(24,60)-(24,62)
(24,68)-(24,73)
(24,68)-(24,76)
(24,68)-(24,76)
(24,74)-(24,76)
(25,12)-(25,14)
(25,15)-(25,18)
*)


let rec clone x n =
  match n > 0 with | true  -> x :: (clone x (n - 1)) | false  -> [];;

let padZero l1 l2 =
  let length1 = List.length l1 in
  let length2 = List.length l2 in
  match length1 >= length2 with
  | true  ->
      let n = length1 - length2 in
      let zeroes = clone 0 n in (l1, (List.append zeroes l2))
  | false  ->
      let n = length2 - length1 in
      let zeroes = clone 0 n in ((List.append zeroes l1), l2);;

let rec removeZero l =
  match l with
  | [] -> []
  | h::t -> (match h with | 0 -> removeZero t | _ -> t);;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | (h1::t1,[]) ->
          let h2::t2 = (List.rev h1) :: t1 in
          ((List.rev t2), [(h2 + x) / 10; (h2 + x) mod 10])
      | (h1::t1,rh::rt) ->
          let h2::t2 = (List.rev h1) :: t1 in
          ((List.rev t2), ((((h2 + x) + rh) / 10) :: (((h2 + x) + rh) mod 10)
            :: rt)) in
    let base = (l1, []) in
    let args = l2 in let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n =
  match n > 0 with | true  -> x :: (clone x (n - 1)) | false  -> [];;

let padZero l1 l2 =
  let length1 = List.length l1 in
  let length2 = List.length l2 in
  match length1 >= length2 with
  | true  ->
      let n = length1 - length2 in
      let zeroes = clone 0 n in (l1, (List.append zeroes l2))
  | false  ->
      let n = length2 - length1 in
      let zeroes = clone 0 n in ((List.append zeroes l1), l2);;

let rec removeZero l =
  match l with
  | [] -> []
  | h::t -> (match h with | 0 -> removeZero t | _ -> t);;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | (h1::t1,[]) ->
          let h2::t2 = List.rev (h1 :: t1) in
          ((List.rev t2), [(h2 + x) / 10; (h2 + x) mod 10])
      | (h1::t1,rh::rt) ->
          let h2::t2 = List.rev (h1 :: t1) in
          ((List.rev t2), ((((h2 + x) + rh) / 10) :: (((h2 + x) + rh) mod 10)
            :: rt)) in
    let base = (l1, []) in
    let args = l2 in let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(26,25)-(26,43)
(26,34)-(26,36)
(29,25)-(29,43)
(29,34)-(29,36)
*)

(* type error slice
(2,4)-(3,70)
(2,15)-(3,68)
(2,17)-(3,68)
(3,3)-(3,68)
(3,3)-(3,68)
(3,3)-(3,68)
(3,3)-(3,68)
(3,9)-(3,10)
(3,9)-(3,14)
(3,9)-(3,14)
(3,9)-(3,14)
(3,13)-(3,14)
(3,31)-(3,32)
(3,31)-(3,51)
(3,37)-(3,42)
(3,37)-(3,51)
(3,37)-(3,51)
(3,37)-(3,51)
(3,43)-(3,44)
(3,46)-(3,47)
(3,46)-(3,51)
(3,50)-(3,51)
(3,66)-(3,68)
(5,4)-(14,64)
(5,13)-(14,61)
(5,16)-(14,61)
(6,17)-(6,28)
(6,17)-(6,31)
(6,17)-(6,31)
(6,29)-(6,31)
(7,17)-(7,28)
(7,17)-(7,31)
(7,17)-(7,31)
(7,29)-(7,31)
(10,7)-(11,60)
(11,7)-(11,60)
(11,20)-(11,25)
(11,20)-(11,29)
(11,34)-(11,36)
(11,34)-(11,60)
(11,39)-(11,50)
(11,39)-(11,60)
(11,58)-(11,60)
(14,35)-(14,46)
(14,35)-(14,56)
(14,54)-(14,56)
(16,20)-(19,55)
(17,3)-(19,55)
(17,3)-(19,55)
(17,3)-(19,55)
(17,3)-(19,55)
(17,3)-(19,55)
(17,9)-(17,10)
(18,11)-(18,13)
(19,14)-(19,55)
(19,20)-(19,21)
(19,34)-(19,44)
(19,34)-(19,46)
(19,34)-(19,46)
(19,45)-(19,46)
(19,54)-(19,55)
(21,4)-(34,37)
(21,12)-(34,33)
(21,15)-(34,33)
(22,3)-(34,33)
(22,12)-(33,69)
(23,5)-(33,69)
(23,11)-(31,18)
(23,13)-(31,18)
(24,7)-(31,18)
(24,7)-(31,18)
(24,7)-(31,18)
(24,7)-(31,18)
(24,7)-(31,18)
(24,7)-(31,18)
(24,7)-(31,18)
(24,7)-(31,18)
(24,7)-(31,18)
(24,13)-(24,14)
(26,11)-(27,59)
(26,11)-(27,59)
(26,11)-(27,59)
(26,25)-(26,33)
(26,25)-(26,36)
(26,25)-(26,36)
(26,25)-(26,43)
(26,34)-(26,36)
(26,41)-(26,43)
(27,13)-(27,21)
(27,13)-(27,24)
(27,13)-(27,24)
(27,22)-(27,24)
(27,29)-(27,31)
(27,34)-(27,35)
(29,11)-(31,18)
(29,11)-(31,18)
(29,11)-(31,18)
(29,25)-(29,33)
(29,25)-(29,36)
(29,25)-(29,36)
(29,25)-(29,43)
(29,34)-(29,36)
(29,41)-(29,43)
(30,13)-(30,21)
(30,13)-(30,24)
(30,13)-(30,24)
(30,22)-(30,24)
(30,31)-(30,33)
(30,41)-(30,43)
(32,5)-(33,69)
(32,17)-(32,19)
(32,17)-(32,23)
(32,21)-(32,23)
(33,5)-(33,69)
(33,16)-(33,18)
(33,22)-(33,69)
(33,36)-(33,50)
(33,36)-(33,62)
(33,36)-(33,62)
(33,36)-(33,62)
(33,36)-(33,62)
(33,51)-(33,52)
(33,53)-(33,57)
(33,58)-(33,62)
(34,15)-(34,18)
(34,15)-(34,33)
(34,15)-(34,33)
(34,20)-(34,27)
(34,20)-(34,33)
(34,20)-(34,33)
(34,28)-(34,30)
(34,31)-(34,33)
*)

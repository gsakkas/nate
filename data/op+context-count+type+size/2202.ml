
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let rec build (rand,depth) =
  if depth <= 0
  then buildX ()
  else
    (match rand with
     | 0 -> buildSine (build ((rand (0, 5)), (depth - 1)))
     | 1 -> buildCosine (build ((rand (0, 5)), (depth - 1)))
     | 2 ->
         buildAverage
           ((build ((rand (0, 5)), (depth - 2))),
             (build ((rand (0, 5)), (depth - 2))))
     | 3 ->
         buildTimes
           ((build ((rand (0, 5)), (depth - 2))),
             (build ((rand (0, 5)), (depth - 2))))
     | 4 ->
         buildThresh
           ((build ((rand (0, 5)), (depth - 4))),
             (build ((rand (0, 5)), (depth - 4))),
             (build ((rand (0, 5)), (depth - 4))),
             (build ((rand (0, 5)), (depth - 4)))));;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth <= 0
  then buildX ()
  else
    (match rand (0, 4) with
     | 0 -> buildSine (build (rand, (depth - 1)))
     | 1 -> buildCosine (build (rand, (depth - 1)))
     | 2 ->
         buildAverage
           ((build (rand, (depth - 2))), (build (rand, (depth - 2))))
     | 3 ->
         buildTimes
           ((build (rand, (depth - 2))), (build (rand, (depth - 2))))
     | 4 ->
         buildThresh
           ((build (rand, (depth - 4))), (build (rand, (depth - 4))),
             (build (rand, (depth - 4))), (build (rand, (depth - 4))))
     | _ -> buildY ());;

*)

(* changed spans
(23,16)-(43,47)
(27,6)-(43,47)
(27,12)-(27,16)
(28,13)-(28,56)
(28,32)-(28,42)
(28,38)-(28,39)
(28,38)-(28,42)
(28,41)-(28,42)
(29,34)-(29,44)
(29,40)-(29,41)
(29,40)-(29,44)
(29,43)-(29,44)
(32,22)-(32,32)
(32,28)-(32,29)
(32,28)-(32,32)
(32,31)-(32,32)
(33,23)-(33,33)
(33,29)-(33,30)
(33,29)-(33,33)
(33,32)-(33,33)
(36,22)-(36,32)
(36,28)-(36,29)
(36,28)-(36,32)
(36,31)-(36,32)
(37,23)-(37,33)
(37,29)-(37,30)
(37,29)-(37,33)
(37,32)-(37,33)
(40,22)-(40,32)
(40,28)-(40,29)
(40,28)-(40,32)
(40,31)-(40,32)
(42,15)-(42,47)
(43,15)-(43,47)
*)

(* type error slice
(11,4)-(11,46)
(11,19)-(11,43)
(11,28)-(11,43)
(11,37)-(11,39)
(11,41)-(11,43)
(13,4)-(13,31)
(13,17)-(13,29)
(13,21)-(13,29)
(13,28)-(13,29)
(15,4)-(15,27)
(15,15)-(15,25)
(15,19)-(15,25)
(15,24)-(15,25)
(17,4)-(17,70)
(17,18)-(17,67)
(17,39)-(17,67)
(17,47)-(17,48)
(17,50)-(17,51)
(17,53)-(17,59)
(17,61)-(17,67)
(19,4)-(19,42)
(19,17)-(19,39)
(19,26)-(19,39)
(19,33)-(19,35)
(19,37)-(19,39)
(21,4)-(21,23)
(21,12)-(21,21)
(21,12)-(21,21)
(21,17)-(21,21)
(23,4)-(43,54)
(23,16)-(43,47)
(24,3)-(43,47)
(24,3)-(43,47)
(24,6)-(24,11)
(24,6)-(24,16)
(24,6)-(24,16)
(24,6)-(24,16)
(24,15)-(24,16)
(25,8)-(25,14)
(25,8)-(25,17)
(25,15)-(25,17)
(27,6)-(43,47)
(27,6)-(43,47)
(27,6)-(43,47)
(27,6)-(43,47)
(27,6)-(43,47)
(27,6)-(43,47)
(27,6)-(43,47)
(27,6)-(43,47)
(27,6)-(43,47)
(27,6)-(43,47)
(27,6)-(43,47)
(27,6)-(43,47)
(27,6)-(43,47)
(27,6)-(43,47)
(27,6)-(43,47)
(27,12)-(27,16)
(28,13)-(28,22)
(28,13)-(28,56)
(28,13)-(28,56)
(28,24)-(28,29)
(28,24)-(28,56)
(28,24)-(28,56)
(28,32)-(28,36)
(28,32)-(28,42)
(28,32)-(28,42)
(28,32)-(28,56)
(28,38)-(28,39)
(28,38)-(28,42)
(28,41)-(28,42)
(28,47)-(28,52)
(28,47)-(28,56)
(28,55)-(28,56)
(29,13)-(29,24)
(29,13)-(29,58)
(29,26)-(29,31)
(29,26)-(29,58)
(29,26)-(29,58)
(29,34)-(29,38)
(29,34)-(29,44)
(29,34)-(29,58)
(29,40)-(29,41)
(29,40)-(29,44)
(29,43)-(29,44)
(29,49)-(29,54)
(29,49)-(29,58)
(29,57)-(29,58)
(31,10)-(31,22)
(31,10)-(33,47)
(32,14)-(32,19)
(32,14)-(32,46)
(32,14)-(32,46)
(32,14)-(33,47)
(32,22)-(32,26)
(32,22)-(32,32)
(32,22)-(32,46)
(32,28)-(32,29)
(32,28)-(32,32)
(32,31)-(32,32)
(32,37)-(32,42)
(32,37)-(32,46)
(32,45)-(32,46)
(33,15)-(33,20)
(33,15)-(33,47)
(33,15)-(33,47)
(33,23)-(33,27)
(33,23)-(33,33)
(33,23)-(33,47)
(33,29)-(33,30)
(33,29)-(33,33)
(33,32)-(33,33)
(33,38)-(33,43)
(33,38)-(33,47)
(33,46)-(33,47)
(35,10)-(35,20)
(35,10)-(37,47)
(36,14)-(36,19)
(36,14)-(36,46)
(36,14)-(36,46)
(36,14)-(37,47)
(36,22)-(36,26)
(36,22)-(36,32)
(36,22)-(36,46)
(36,28)-(36,29)
(36,28)-(36,32)
(36,31)-(36,32)
(36,37)-(36,42)
(36,37)-(36,46)
(36,45)-(36,46)
(37,15)-(37,20)
(37,15)-(37,47)
(37,15)-(37,47)
(37,23)-(37,27)
(37,23)-(37,33)
(37,23)-(37,47)
(37,29)-(37,30)
(37,29)-(37,33)
(37,32)-(37,33)
(37,38)-(37,43)
(37,38)-(37,47)
(37,46)-(37,47)
(39,10)-(39,21)
(39,10)-(43,47)
(40,14)-(40,19)
(40,14)-(40,46)
(40,14)-(40,46)
(40,14)-(43,47)
(40,22)-(40,26)
(40,22)-(40,32)
(40,22)-(40,46)
(40,28)-(40,29)
(40,28)-(40,32)
(40,31)-(40,32)
(40,37)-(40,42)
(40,37)-(40,46)
(40,45)-(40,46)
(41,15)-(41,20)
(41,15)-(41,47)
(41,15)-(41,47)
(41,23)-(41,27)
(41,23)-(41,33)
(41,23)-(41,47)
(41,29)-(41,30)
(41,29)-(41,33)
(41,32)-(41,33)
(41,38)-(41,43)
(41,38)-(41,47)
(41,46)-(41,47)
(42,15)-(42,20)
(42,15)-(42,47)
(42,15)-(42,47)
(42,23)-(42,27)
(42,23)-(42,33)
(42,23)-(42,47)
(42,29)-(42,30)
(42,29)-(42,33)
(42,32)-(42,33)
(42,38)-(42,43)
(42,38)-(42,47)
(42,46)-(42,47)
(43,15)-(43,20)
(43,15)-(43,47)
(43,15)-(43,47)
(43,23)-(43,27)
(43,23)-(43,33)
(43,23)-(43,47)
(43,29)-(43,30)
(43,29)-(43,33)
(43,32)-(43,33)
(43,38)-(43,43)
(43,38)-(43,47)
(43,46)-(43,47)
*)

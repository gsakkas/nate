
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let l = (List.length l1) - (List.length l2) in
  if l < 0
  then (((clone 0 ((-1) * l)) @ l1), l2)
  else (l1, ((clone 0 l) @ l2));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | (carry,rest) ->
          (match x with
           | (add1,add2) ->
               if
                 ((List.length x) = (List.length l1)) or
                   ((List.length x) = (List.length l2))
               then carry :: rest
               else
                 ((((add1 + add2) + carry) / 10),
                   ((((add1 + add2) + carry) mod 10) :: rest))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let l = (List.length l1) - (List.length l2) in
  if l < 0
  then (((clone 0 ((-1) * l)) @ l1), l2)
  else (l1, ((clone 0 l) @ l2));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | (carry,rest) ->
          (match x with
           | (add1,add2) ->
               if
                 ((List.length rest) = (List.length l1)) or
                   ((List.length rest) = (List.length l2))
               then (0, (carry :: rest))
               else
                 ((((add1 + add2) + carry) / 10),
                   ((((add1 + add2) + carry) mod 10) :: rest))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(21,32)-(21,33)
(22,34)-(22,35)
(23,21)-(23,34)
*)

(* type error slice
(2,4)-(2,68)
(2,15)-(2,64)
(2,17)-(2,64)
(2,21)-(2,64)
(2,21)-(2,64)
(2,24)-(2,25)
(2,24)-(2,30)
(2,24)-(2,30)
(2,24)-(2,30)
(2,29)-(2,30)
(2,36)-(2,38)
(2,44)-(2,45)
(2,44)-(2,64)
(2,50)-(2,55)
(2,50)-(2,64)
(2,50)-(2,64)
(2,50)-(2,64)
(2,56)-(2,57)
(2,59)-(2,60)
(2,59)-(2,64)
(2,63)-(2,64)
(4,4)-(8,34)
(4,13)-(8,30)
(4,16)-(8,30)
(5,12)-(5,23)
(5,12)-(5,26)
(5,12)-(5,26)
(5,24)-(5,26)
(5,31)-(5,42)
(5,31)-(5,45)
(5,31)-(5,45)
(5,43)-(5,45)
(7,11)-(7,16)
(7,11)-(7,28)
(7,11)-(7,35)
(7,11)-(7,40)
(7,31)-(7,32)
(7,33)-(7,35)
(7,38)-(7,40)
(8,15)-(8,30)
(8,26)-(8,27)
(8,28)-(8,30)
(10,20)-(11,75)
(11,3)-(11,75)
(11,3)-(11,75)
(11,3)-(11,75)
(11,3)-(11,75)
(11,3)-(11,75)
(11,9)-(11,10)
(11,24)-(11,26)
(11,37)-(11,75)
(11,40)-(11,41)
(11,40)-(11,45)
(11,51)-(11,61)
(11,51)-(11,63)
(13,4)-(30,37)
(13,12)-(30,33)
(13,15)-(30,33)
(14,3)-(30,33)
(14,12)-(29,52)
(15,5)-(29,52)
(15,11)-(26,61)
(15,13)-(26,61)
(16,13)-(16,14)
(18,12)-(26,61)
(18,18)-(18,19)
(20,16)-(26,61)
(20,16)-(26,61)
(21,20)-(21,31)
(21,20)-(21,33)
(21,20)-(21,33)
(21,20)-(21,52)
(21,20)-(21,52)
(21,20)-(22,54)
(21,32)-(21,33)
(21,38)-(21,49)
(21,38)-(21,52)
(21,38)-(21,52)
(21,50)-(21,52)
(22,22)-(22,33)
(22,22)-(22,35)
(22,22)-(22,35)
(22,22)-(22,54)
(22,22)-(22,54)
(22,34)-(22,35)
(22,40)-(22,51)
(22,40)-(22,54)
(22,40)-(22,54)
(22,52)-(22,54)
(23,21)-(23,26)
(23,21)-(23,34)
(23,30)-(23,34)
(25,22)-(25,26)
(25,22)-(25,33)
(25,22)-(25,33)
(25,22)-(25,33)
(25,22)-(25,42)
(25,22)-(25,42)
(25,22)-(25,48)
(25,22)-(26,61)
(25,29)-(25,33)
(25,37)-(25,42)
(25,46)-(25,48)
(26,24)-(26,28)
(26,24)-(26,35)
(26,24)-(26,44)
(26,24)-(26,52)
(26,24)-(26,61)
(26,31)-(26,35)
(26,39)-(26,44)
(26,50)-(26,52)
(26,57)-(26,61)
(27,5)-(29,52)
(27,17)-(27,22)
(27,20)-(27,22)
(28,5)-(29,52)
(28,16)-(28,24)
(28,16)-(28,44)
(28,16)-(28,44)
(28,26)-(28,38)
(28,26)-(28,44)
(28,26)-(28,44)
(28,26)-(28,44)
(28,39)-(28,41)
(28,42)-(28,44)
(29,19)-(29,33)
(29,19)-(29,45)
(29,19)-(29,45)
(29,19)-(29,45)
(29,34)-(29,35)
(29,36)-(29,40)
(29,41)-(29,45)
(30,15)-(30,18)
(30,15)-(30,33)
(30,15)-(30,33)
(30,20)-(30,27)
(30,20)-(30,33)
(30,20)-(30,33)
(30,28)-(30,30)
(30,31)-(30,33)
*)

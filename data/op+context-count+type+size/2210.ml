
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let first = List.length l1 in
  let sec = List.length l2 in
  if first < sec
  then (clone 0 (sec - first)) :: l1
  else
    if first > sec then (l1, ((clone 0 (first - sec)) :: l2)) else (l1, l2);;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let first = List.length l1 in
  let sec = List.length l2 in
  if first < sec
  then ((List.append (clone 0 (sec - first)) l1), l2)
  else
    if first > sec
    then (l1, (List.append (clone 0 (first - sec)) l2))
    else (l1, l2);;

*)

(* changed spans
(8,9)-(8,14)
(8,9)-(8,37)
(10,5)-(10,75)
(10,32)-(10,37)
(10,32)-(10,60)
(10,69)-(10,71)
(10,73)-(10,75)
*)

(* type error slice
(2,4)-(2,68)
(2,15)-(2,64)
(2,17)-(2,64)
(2,21)-(2,64)
(2,21)-(2,64)
(2,24)-(2,25)
(2,24)-(2,30)
(2,24)-(2,30)
(2,24)-(2,30)
(2,29)-(2,30)
(2,36)-(2,38)
(2,44)-(2,45)
(2,44)-(2,64)
(2,50)-(2,55)
(2,50)-(2,64)
(2,50)-(2,64)
(2,50)-(2,64)
(2,56)-(2,57)
(2,59)-(2,60)
(2,59)-(2,64)
(2,63)-(2,64)
(4,4)-(10,78)
(4,13)-(10,75)
(4,16)-(10,75)
(5,3)-(10,75)
(5,15)-(5,26)
(5,15)-(5,29)
(5,15)-(5,29)
(5,27)-(5,29)
(6,3)-(10,75)
(6,13)-(6,24)
(6,13)-(6,27)
(6,13)-(6,27)
(6,25)-(6,27)
(7,3)-(10,75)
(7,3)-(10,75)
(7,6)-(7,11)
(7,6)-(7,17)
(7,6)-(7,17)
(7,14)-(7,17)
(8,9)-(8,14)
(8,9)-(8,29)
(8,9)-(8,29)
(8,9)-(8,37)
(8,15)-(8,16)
(8,18)-(8,21)
(8,18)-(8,29)
(8,24)-(8,29)
(8,35)-(8,37)
(10,5)-(10,75)
(10,8)-(10,13)
(10,8)-(10,19)
(10,8)-(10,19)
(10,16)-(10,19)
(10,26)-(10,28)
(10,26)-(10,60)
(10,32)-(10,37)
(10,32)-(10,52)
(10,32)-(10,60)
(10,38)-(10,39)
(10,41)-(10,46)
(10,41)-(10,52)
(10,49)-(10,52)
(10,58)-(10,60)
(10,69)-(10,71)
(10,69)-(10,75)
(10,73)-(10,75)
*)

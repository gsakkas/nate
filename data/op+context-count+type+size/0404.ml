
let rec append first second =
  match first with | [] -> second | h::t -> h :: (append t second);;

let rec digitsOfInt n =
  if n < 0
  then []
  else if n = 0 then [] else append ((digitsOfInt (n / 10)) [n mod 10]);;


(* fix

let rec append first second =
  match first with | [] -> second | h::t -> h :: (append t second);;

let rec digitsOfInt n =
  if n < 0
  then []
  else if n = 0 then [] else append (digitsOfInt (n / 10)) [n mod 10];;

*)

(* changed spans
(8,30)-(8,71)
(8,39)-(8,58)
*)

(* type error slice
(2,4)-(3,69)
(2,16)-(3,66)
(2,22)-(3,66)
(3,3)-(3,66)
(3,3)-(3,66)
(3,3)-(3,66)
(3,3)-(3,66)
(3,3)-(3,66)
(3,3)-(3,66)
(3,3)-(3,66)
(3,9)-(3,14)
(3,28)-(3,34)
(3,45)-(3,46)
(3,45)-(3,66)
(3,51)-(3,57)
(3,51)-(3,66)
(3,51)-(3,66)
(3,51)-(3,66)
(3,58)-(3,59)
(3,60)-(3,66)
(5,4)-(8,74)
(5,21)-(8,71)
(6,3)-(8,71)
(6,3)-(8,71)
(6,6)-(6,7)
(6,6)-(6,11)
(6,6)-(6,11)
(6,6)-(6,11)
(6,10)-(6,11)
(7,8)-(7,10)
(8,8)-(8,71)
(8,8)-(8,71)
(8,11)-(8,12)
(8,11)-(8,16)
(8,11)-(8,16)
(8,15)-(8,16)
(8,22)-(8,24)
(8,30)-(8,36)
(8,30)-(8,71)
(8,30)-(8,71)
(8,39)-(8,50)
(8,39)-(8,58)
(8,39)-(8,58)
(8,39)-(8,71)
(8,39)-(8,71)
(8,52)-(8,53)
(8,52)-(8,58)
(8,56)-(8,58)
(8,61)-(8,71)
(8,61)-(8,71)
(8,62)-(8,63)
(8,62)-(8,70)
(8,68)-(8,70)
*)

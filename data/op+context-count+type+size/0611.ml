
let rec clone x n =
  let rec clonehelper tx tn =
    match tn = 0 with
    | true  -> []
    | false  -> tx :: (clonehelper tx (tn - 1)) in
  clonehelper x (abs n);;

let padZero l1 l2 =
  match (List.length l1) > (List.length l2) with
  | true  -> (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  | false  -> (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2);;

let rec removeZero l =
  let rec removeZH templ =
    match templ with
    | [] -> []
    | hd::tl -> if hd = 0 then removeZH tl else hd :: tl in
  removeZH l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match x with
      | (addend_a,addend_b) ->
          let prevcarry = match a with | (x,y) -> x in
          let new_carry = ((prevcarry + addend_a) + addend_b) / 10 in
          let digit = ((prevcarry + addend_a) + addend_b) mod 10 in
          (match a with
           | (x,[]) -> (new_carry, (new_carry :: digit))
           | (x,c::d::y) -> (new_carry, (new_carry :: digit :: d :: y))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n =
  let rec clonehelper tx tn =
    match tn = 0 with
    | true  -> []
    | false  -> tx :: (clonehelper tx (tn - 1)) in
  clonehelper x (abs n);;

let padZero l1 l2 =
  match (List.length l1) > (List.length l2) with
  | true  -> (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  | false  -> (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2);;

let rec removeZero l =
  let rec removeZH templ =
    match templ with
    | [] -> []
    | hd::tl -> if hd = 0 then removeZH tl else hd :: tl in
  removeZH l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match x with
      | (addend_a,addend_b) ->
          let prevcarry = match a with | (x,y) -> x in
          let new_carry = ((prevcarry + addend_a) + addend_b) / 10 in
          let digit = ((prevcarry + addend_a) + addend_b) mod 10 in
          (match a with
           | (x,[]) -> (new_carry, [new_carry; digit])
           | (x,c::d::y) -> (new_carry, (new_carry :: digit :: d :: y))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(30,37)-(30,55)
*)

(* type error slice
(2,4)-(7,26)
(2,15)-(7,23)
(2,17)-(7,23)
(3,3)-(7,23)
(3,3)-(7,23)
(3,23)-(6,46)
(3,26)-(6,46)
(4,5)-(6,46)
(4,5)-(6,46)
(4,5)-(6,46)
(4,5)-(6,46)
(4,11)-(4,13)
(4,11)-(4,17)
(4,11)-(4,17)
(4,11)-(4,17)
(4,16)-(4,17)
(5,16)-(5,18)
(6,17)-(6,19)
(6,17)-(6,46)
(6,24)-(6,35)
(6,24)-(6,46)
(6,24)-(6,46)
(6,24)-(6,46)
(6,36)-(6,38)
(6,40)-(6,42)
(6,40)-(6,46)
(6,45)-(6,46)
(7,3)-(7,14)
(7,3)-(7,23)
(7,3)-(7,23)
(7,15)-(7,16)
(7,22)-(7,23)
(9,4)-(12,77)
(9,13)-(12,74)
(9,16)-(12,74)
(10,3)-(12,74)
(10,3)-(12,74)
(10,3)-(12,74)
(10,3)-(12,74)
(10,10)-(10,21)
(10,10)-(10,24)
(10,10)-(10,24)
(10,10)-(10,43)
(10,10)-(10,43)
(10,22)-(10,24)
(10,29)-(10,40)
(10,29)-(10,43)
(10,29)-(10,43)
(10,41)-(10,43)
(11,15)-(11,17)
(11,15)-(11,72)
(11,21)-(11,26)
(11,21)-(11,64)
(11,21)-(11,64)
(11,21)-(11,64)
(11,21)-(11,72)
(11,21)-(11,72)
(11,21)-(11,72)
(11,27)-(11,28)
(11,31)-(11,42)
(11,31)-(11,45)
(11,31)-(11,45)
(11,31)-(11,64)
(11,43)-(11,45)
(11,50)-(11,61)
(11,50)-(11,64)
(11,50)-(11,64)
(11,62)-(11,64)
(11,68)-(11,69)
(11,70)-(11,72)
(12,18)-(12,23)
(12,18)-(12,61)
(12,18)-(12,69)
(12,18)-(12,69)
(12,18)-(12,69)
(12,18)-(12,74)
(12,24)-(12,25)
(12,28)-(12,39)
(12,28)-(12,42)
(12,28)-(12,42)
(12,28)-(12,61)
(12,40)-(12,42)
(12,47)-(12,58)
(12,47)-(12,61)
(12,47)-(12,61)
(12,59)-(12,61)
(12,65)-(12,66)
(12,67)-(12,69)
(12,72)-(12,74)
(14,4)-(19,15)
(14,20)-(19,13)
(15,20)-(18,57)
(16,5)-(18,57)
(16,5)-(18,57)
(16,5)-(18,57)
(16,5)-(18,57)
(16,5)-(18,57)
(16,11)-(16,16)
(17,13)-(17,15)
(18,17)-(18,57)
(18,20)-(18,22)
(18,20)-(18,26)
(18,32)-(18,40)
(18,32)-(18,43)
(19,12)-(19,13)
(21,4)-(35,37)
(21,12)-(35,33)
(21,15)-(35,33)
(22,3)-(35,33)
(22,3)-(35,33)
(22,12)-(34,52)
(23,5)-(34,52)
(23,5)-(34,52)
(23,11)-(31,70)
(23,13)-(31,70)
(24,13)-(24,14)
(26,11)-(31,70)
(26,27)-(26,52)
(26,27)-(26,52)
(26,33)-(26,34)
(26,51)-(26,52)
(27,11)-(31,70)
(27,29)-(27,38)
(27,29)-(27,49)
(27,29)-(27,49)
(27,29)-(27,49)
(27,29)-(27,61)
(27,29)-(27,61)
(27,29)-(27,67)
(27,41)-(27,49)
(27,53)-(27,61)
(27,65)-(27,67)
(28,11)-(31,70)
(28,25)-(28,34)
(28,25)-(28,45)
(28,25)-(28,57)
(28,25)-(28,65)
(28,37)-(28,45)
(28,49)-(28,57)
(28,63)-(28,65)
(29,12)-(31,70)
(29,12)-(31,70)
(29,12)-(31,70)
(29,12)-(31,70)
(29,12)-(31,70)
(29,12)-(31,70)
(29,12)-(31,70)
(29,12)-(31,70)
(29,18)-(29,19)
(30,25)-(30,34)
(30,25)-(30,55)
(30,37)-(30,46)
(30,37)-(30,55)
(30,50)-(30,55)
(31,30)-(31,39)
(31,42)-(31,51)
(31,55)-(31,60)
(31,64)-(31,65)
(31,64)-(31,70)
(31,69)-(31,70)
(32,5)-(34,52)
(32,5)-(34,52)
(32,17)-(32,22)
(32,20)-(32,22)
(33,5)-(34,52)
(33,5)-(34,52)
(33,16)-(33,24)
(33,16)-(33,44)
(33,16)-(33,44)
(33,26)-(33,38)
(33,26)-(33,44)
(33,26)-(33,44)
(33,26)-(33,44)
(33,39)-(33,41)
(33,42)-(33,44)
(34,5)-(34,52)
(34,5)-(34,52)
(34,19)-(34,33)
(34,19)-(34,45)
(34,19)-(34,45)
(34,19)-(34,45)
(34,19)-(34,45)
(34,34)-(34,35)
(34,36)-(34,40)
(34,41)-(34,45)
(34,49)-(34,52)
(35,3)-(35,13)
(35,3)-(35,33)
(35,15)-(35,18)
(35,15)-(35,33)
(35,15)-(35,33)
(35,20)-(35,27)
(35,20)-(35,33)
(35,20)-(35,33)
(35,20)-(35,33)
(35,28)-(35,30)
(35,31)-(35,33)
*)


let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let diff = (List.length l1) - (List.length l2) in
  if diff >= 0
  then (l1, ((clone 0 diff) @ l2))
  else (((clone 0 (abs diff)) @ l1), l2);;

let rec removeZero l =
  match l with
  | [] -> []
  | h::t -> (match h with | 0 -> removeZero t | _ -> h :: t);;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (arg1,arg2) = x in
      match a with
      | (0,_) ->
          if (arg1 + arg2) > 9
          then (1, [(arg1 + arg2) mod 10])
          else (0, [arg1 + arg2])
      | (_,_) ->
          if ((arg1 + arg2) + 1) > 9
          then (1, ([((arg1 + arg2) + 1) mod 10] @ a))
          else (0, (((arg1 + arg2) + 1) :: a)) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let diff = (List.length l1) - (List.length l2) in
  if diff >= 0
  then (l1, ((clone 0 diff) @ l2))
  else (((clone 0 (abs diff)) @ l1), l2);;

let rec removeZero l =
  match l with
  | [] -> []
  | h::t -> (match h with | 0 -> removeZero t | _ -> h :: t);;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (arg1,arg2) = x in
      match a with
      | (0,acc) ->
          if (arg1 + arg2) > 9
          then (1, (((arg1 + arg2) mod 10) :: acc))
          else (0, ((arg1 + arg2) :: acc))
      | (0,[]) ->
          if (arg1 + arg2) > 9
          then (1, [(arg1 + arg2) mod 10])
          else (0, [arg1 + arg2])
      | (_,acc) ->
          if ((arg1 + arg2) + 1) > 9
          then (1, ((((arg1 + arg2) + 1) mod 10) :: acc))
          else (0, (((arg1 + arg2) + 1) :: acc)) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(19,7)-(27,45)
(22,20)-(22,42)
(26,21)-(26,49)
(26,21)-(26,53)
(26,50)-(26,51)
(26,52)-(26,53)
(27,44)-(27,45)
(29,26)-(29,38)
(29,39)-(29,41)
(29,42)-(29,44)
(30,19)-(30,33)
(30,19)-(30,45)
(30,34)-(30,35)
(30,36)-(30,40)
(30,41)-(30,45)
(30,49)-(30,52)
(31,3)-(31,13)
(31,15)-(31,18)
(31,15)-(31,33)
(31,20)-(31,27)
(31,20)-(31,33)
(31,28)-(31,30)
(31,31)-(31,33)
*)

(* type error slice
(2,4)-(2,68)
(2,15)-(2,64)
(2,17)-(2,64)
(2,21)-(2,64)
(2,21)-(2,64)
(2,24)-(2,25)
(2,24)-(2,30)
(2,24)-(2,30)
(2,24)-(2,30)
(2,29)-(2,30)
(2,36)-(2,38)
(2,44)-(2,45)
(2,44)-(2,64)
(2,50)-(2,55)
(2,50)-(2,64)
(2,50)-(2,64)
(2,50)-(2,64)
(2,56)-(2,57)
(2,59)-(2,60)
(2,59)-(2,64)
(2,63)-(2,64)
(4,4)-(8,43)
(4,13)-(8,40)
(4,16)-(8,40)
(5,15)-(5,26)
(5,15)-(5,29)
(5,15)-(5,29)
(5,27)-(5,29)
(5,34)-(5,45)
(5,34)-(5,48)
(5,34)-(5,48)
(5,46)-(5,48)
(7,9)-(7,11)
(7,9)-(7,33)
(7,15)-(7,20)
(7,15)-(7,27)
(7,15)-(7,33)
(7,29)-(7,30)
(7,31)-(7,33)
(8,11)-(8,35)
(8,31)-(8,32)
(8,33)-(8,35)
(10,4)-(13,63)
(10,20)-(13,60)
(11,3)-(13,60)
(11,3)-(13,60)
(11,3)-(13,60)
(11,3)-(13,60)
(11,3)-(13,60)
(11,3)-(13,60)
(11,9)-(11,10)
(12,11)-(12,13)
(13,14)-(13,60)
(13,14)-(13,60)
(13,14)-(13,60)
(13,20)-(13,21)
(13,34)-(13,44)
(13,34)-(13,46)
(13,34)-(13,46)
(13,45)-(13,46)
(13,54)-(13,55)
(13,54)-(13,60)
(13,59)-(13,60)
(15,4)-(31,37)
(15,12)-(31,33)
(15,15)-(31,33)
(16,3)-(31,33)
(16,3)-(31,33)
(16,12)-(30,52)
(17,5)-(30,52)
(17,5)-(30,52)
(17,11)-(27,45)
(17,13)-(27,45)
(18,7)-(27,45)
(18,7)-(27,45)
(18,25)-(18,26)
(19,7)-(27,45)
(19,7)-(27,45)
(19,7)-(27,45)
(19,7)-(27,45)
(19,13)-(19,14)
(21,11)-(23,33)
(21,15)-(21,19)
(21,15)-(21,26)
(21,15)-(21,26)
(21,15)-(21,26)
(21,15)-(21,31)
(21,15)-(21,31)
(21,22)-(21,26)
(21,30)-(21,31)
(22,17)-(22,18)
(22,17)-(22,42)
(22,20)-(22,42)
(22,20)-(22,42)
(22,22)-(22,26)
(22,22)-(22,33)
(22,22)-(22,41)
(22,29)-(22,33)
(22,39)-(22,41)
(23,17)-(23,18)
(23,17)-(23,33)
(23,20)-(23,33)
(23,20)-(23,33)
(23,21)-(23,25)
(23,21)-(23,32)
(23,28)-(23,32)
(25,11)-(27,45)
(25,16)-(25,20)
(25,16)-(25,27)
(25,16)-(25,32)
(25,16)-(25,37)
(25,16)-(25,37)
(25,23)-(25,27)
(25,31)-(25,32)
(25,36)-(25,37)
(26,17)-(26,18)
(26,17)-(26,53)
(26,21)-(26,49)
(26,21)-(26,49)
(26,21)-(26,53)
(26,21)-(26,53)
(26,21)-(26,53)
(26,24)-(26,28)
(26,24)-(26,35)
(26,24)-(26,40)
(26,24)-(26,48)
(26,31)-(26,35)
(26,39)-(26,40)
(26,46)-(26,48)
(26,50)-(26,51)
(26,52)-(26,53)
(27,17)-(27,18)
(27,17)-(27,45)
(27,23)-(27,27)
(27,23)-(27,34)
(27,23)-(27,39)
(27,23)-(27,45)
(27,30)-(27,34)
(27,38)-(27,39)
(27,44)-(27,45)
(28,5)-(30,52)
(28,5)-(30,52)
(28,17)-(28,18)
(28,17)-(28,22)
(28,20)-(28,22)
(29,5)-(30,52)
(29,5)-(30,52)
(29,16)-(29,24)
(29,16)-(29,44)
(29,16)-(29,44)
(29,26)-(29,38)
(29,26)-(29,44)
(29,26)-(29,44)
(29,26)-(29,44)
(29,39)-(29,41)
(29,42)-(29,44)
(30,5)-(30,52)
(30,5)-(30,52)
(30,19)-(30,33)
(30,19)-(30,45)
(30,19)-(30,45)
(30,19)-(30,45)
(30,19)-(30,45)
(30,34)-(30,35)
(30,36)-(30,40)
(30,41)-(30,45)
(30,49)-(30,52)
(31,3)-(31,13)
(31,3)-(31,33)
(31,15)-(31,18)
(31,15)-(31,33)
(31,15)-(31,33)
(31,20)-(31,27)
(31,20)-(31,33)
(31,20)-(31,33)
(31,28)-(31,30)
(31,31)-(31,33)
*)


let rec clone x n = if n < 1 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then
    let x = (List.length l1) - (List.length l2) in
    let list_p = clone 0 x in (l1, (list_p @ l2))
  else
    if (List.length l1) < (List.length l2)
    then
      (let x = (List.length l2) - (List.length l1) in
       let list_p = clone 0 x in ((list_p @ l1), l2))
    else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h == 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (carry,listy) = a in
      let (num1,num2) = x in
      let initsum = (num1 + num2) + carry in
      if initsum > 9
      then (1, (listy @ [initsum mod 10]))
      else (0, (listy @ initsum)) in
    let base = (0, []) in
    let args = (List.rev (List.combine l1 l2)) @ [(0, 0)] in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n < 1 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then
    let x = (List.length l1) - (List.length l2) in
    let list_p = clone 0 x in (l1, (list_p @ l2))
  else
    if (List.length l1) < (List.length l2)
    then
      (let x = (List.length l2) - (List.length l1) in
       let list_p = clone 0 x in ((list_p @ l1), l2))
    else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h == 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (carry,listy) = a in
      let (num1,num2) = x in
      let initsum = (num1 + num2) + carry in
      if initsum > 9
      then (1, (listy @ [initsum mod 10]))
      else (0, (listy @ [initsum])) in
    let base = (0, []) in
    let args = (List.rev (List.combine l1 l2)) @ [(0, 0)] in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(27,25)-(27,32)
(29,52)-(29,53)
(29,55)-(29,56)
*)

(* type error slice
(2,4)-(2,67)
(2,15)-(2,63)
(2,17)-(2,63)
(2,21)-(2,63)
(2,21)-(2,63)
(2,24)-(2,25)
(2,24)-(2,29)
(2,24)-(2,29)
(2,24)-(2,29)
(2,28)-(2,29)
(2,35)-(2,37)
(2,43)-(2,44)
(2,43)-(2,63)
(2,49)-(2,54)
(2,49)-(2,63)
(2,49)-(2,63)
(2,49)-(2,63)
(2,55)-(2,56)
(2,58)-(2,59)
(2,58)-(2,63)
(2,62)-(2,63)
(4,4)-(14,20)
(4,13)-(14,17)
(4,16)-(14,17)
(5,7)-(5,18)
(5,7)-(5,21)
(5,7)-(5,21)
(5,19)-(5,21)
(5,26)-(5,37)
(5,26)-(5,40)
(5,26)-(5,40)
(5,38)-(5,40)
(7,5)-(8,48)
(7,14)-(7,25)
(7,14)-(7,28)
(7,14)-(7,28)
(7,26)-(7,28)
(7,33)-(7,44)
(7,33)-(7,47)
(7,33)-(7,47)
(7,45)-(7,47)
(8,5)-(8,48)
(8,18)-(8,23)
(8,18)-(8,27)
(8,32)-(8,34)
(8,32)-(8,48)
(8,37)-(8,48)
(8,44)-(8,45)
(8,46)-(8,48)
(10,9)-(10,20)
(10,9)-(10,23)
(10,9)-(10,23)
(10,21)-(10,23)
(10,28)-(10,39)
(10,28)-(10,42)
(12,17)-(12,28)
(12,17)-(12,31)
(12,36)-(12,47)
(12,36)-(12,50)
(12,36)-(12,50)
(12,48)-(12,50)
(13,36)-(13,47)
(13,43)-(13,44)
(13,45)-(13,47)
(16,20)-(17,71)
(17,3)-(17,71)
(17,3)-(17,71)
(17,3)-(17,71)
(17,3)-(17,71)
(17,3)-(17,71)
(17,9)-(17,10)
(17,24)-(17,26)
(17,37)-(17,71)
(17,37)-(17,71)
(17,40)-(17,41)
(17,40)-(17,46)
(17,52)-(17,62)
(17,52)-(17,64)
(17,70)-(17,71)
(19,4)-(31,37)
(19,12)-(31,33)
(19,15)-(31,33)
(20,3)-(31,33)
(20,12)-(30,52)
(21,5)-(30,52)
(21,11)-(27,32)
(21,13)-(27,32)
(22,7)-(27,32)
(22,27)-(22,28)
(23,7)-(27,32)
(23,25)-(23,26)
(24,7)-(27,32)
(24,22)-(24,26)
(24,22)-(24,42)
(24,29)-(24,33)
(24,37)-(24,42)
(25,10)-(25,17)
(25,10)-(25,21)
(25,10)-(25,21)
(25,20)-(25,21)
(26,13)-(26,14)
(26,13)-(26,41)
(26,17)-(26,22)
(26,17)-(26,41)
(26,17)-(26,41)
(26,17)-(26,41)
(26,23)-(26,24)
(26,25)-(26,41)
(26,25)-(26,41)
(26,26)-(26,33)
(26,26)-(26,40)
(26,38)-(26,40)
(27,13)-(27,14)
(27,17)-(27,22)
(27,17)-(27,32)
(27,17)-(27,32)
(27,17)-(27,32)
(27,23)-(27,24)
(27,25)-(27,32)
(28,5)-(30,52)
(28,17)-(28,22)
(28,20)-(28,22)
(29,17)-(29,25)
(29,17)-(29,45)
(29,17)-(29,45)
(29,17)-(29,58)
(29,17)-(29,58)
(29,27)-(29,39)
(29,27)-(29,45)
(29,27)-(29,45)
(29,27)-(29,45)
(29,40)-(29,42)
(29,43)-(29,45)
(29,48)-(29,49)
(30,19)-(30,33)
(30,19)-(30,45)
(30,19)-(30,45)
(30,34)-(30,35)
(30,36)-(30,40)
(31,15)-(31,18)
(31,15)-(31,33)
(31,20)-(31,27)
(31,20)-(31,33)
(31,20)-(31,33)
(31,28)-(31,30)
(31,31)-(31,33)
*)

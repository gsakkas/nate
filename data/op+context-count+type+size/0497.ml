
let rec clone x n =
  match n with | 0 -> [] | _ -> if n > 0 then x :: (clone x (n - 1)) else [];;

let padZero l1 l2 =
  let ll1 = List.length l1 in
  let ll2 = List.length l2 in
  (((clone 0 (ll2 - ll1)) @ l1), ((clone 0 (ll1 - ll2)) @ l2));;

let rec removeZero l =
  match l with | h::t -> if h == 0 then removeZero t else h :: t | [] -> [];;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f (c,ds) (x1,x2) =
      ((((c + x1) + x2) / 10), ((((c + x1) + x2) mod 10) :: ds)) in
    let base = (0, 1) in
    let args = List.combine l1 l2 in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n =
  match n with | 0 -> [] | _ -> if n > 0 then x :: (clone x (n - 1)) else [];;

let padZero l1 l2 =
  let ll1 = List.length l1 in
  let ll2 = List.length l2 in
  (((clone 0 (ll2 - ll1)) @ l1), ((clone 0 (ll1 - ll2)) @ l2));;

let rec removeZero l =
  match l with | h::t -> if h == 0 then removeZero t else h :: t | [] -> [];;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f (c,ds) (x1,x2) =
      ((((c + x1) + x2) / 10), ((((c + x1) + x2) mod 10) :: ds)) in
    let base = (0, []) in
    let args = List.combine l1 l2 in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(17,20)-(17,21)
*)

(* type error slice
(2,4)-(3,79)
(2,15)-(3,77)
(2,17)-(3,77)
(3,3)-(3,77)
(3,3)-(3,77)
(3,3)-(3,77)
(3,3)-(3,77)
(3,9)-(3,10)
(3,23)-(3,25)
(3,33)-(3,77)
(3,33)-(3,77)
(3,36)-(3,37)
(3,36)-(3,41)
(3,36)-(3,41)
(3,36)-(3,41)
(3,40)-(3,41)
(3,47)-(3,48)
(3,47)-(3,67)
(3,53)-(3,58)
(3,53)-(3,67)
(3,53)-(3,67)
(3,53)-(3,67)
(3,59)-(3,60)
(3,62)-(3,63)
(3,62)-(3,67)
(3,66)-(3,67)
(3,75)-(3,77)
(5,4)-(8,65)
(5,13)-(8,61)
(5,16)-(8,61)
(6,13)-(6,24)
(6,13)-(6,27)
(6,13)-(6,27)
(6,25)-(6,27)
(7,13)-(7,24)
(7,13)-(7,27)
(7,13)-(7,27)
(7,25)-(7,27)
(8,6)-(8,11)
(8,6)-(8,24)
(8,6)-(8,31)
(8,27)-(8,28)
(8,29)-(8,31)
(8,36)-(8,61)
(8,57)-(8,58)
(8,59)-(8,61)
(10,20)-(11,76)
(11,3)-(11,76)
(11,3)-(11,76)
(11,3)-(11,76)
(11,9)-(11,10)
(11,26)-(11,65)
(11,29)-(11,30)
(11,29)-(11,35)
(11,41)-(11,51)
(11,41)-(11,53)
(11,74)-(11,76)
(13,4)-(20,37)
(13,12)-(20,33)
(13,15)-(20,33)
(14,3)-(20,33)
(14,12)-(19,52)
(15,5)-(19,52)
(15,12)-(16,63)
(15,19)-(16,63)
(16,11)-(16,12)
(16,11)-(16,17)
(16,11)-(16,17)
(16,11)-(16,17)
(16,11)-(16,23)
(16,11)-(16,23)
(16,11)-(16,29)
(16,11)-(16,63)
(16,15)-(16,17)
(16,21)-(16,23)
(16,27)-(16,29)
(16,36)-(16,37)
(16,36)-(16,42)
(16,36)-(16,48)
(16,36)-(16,56)
(16,36)-(16,63)
(16,40)-(16,42)
(16,46)-(16,48)
(16,54)-(16,56)
(16,61)-(16,63)
(17,5)-(19,52)
(17,17)-(17,18)
(17,17)-(17,21)
(17,20)-(17,21)
(18,5)-(19,52)
(18,16)-(18,28)
(18,16)-(18,34)
(18,16)-(18,34)
(18,16)-(18,34)
(18,29)-(18,31)
(18,32)-(18,34)
(19,19)-(19,33)
(19,19)-(19,45)
(19,19)-(19,45)
(19,19)-(19,45)
(19,19)-(19,45)
(19,34)-(19,35)
(19,36)-(19,40)
(19,41)-(19,45)
(20,15)-(20,18)
(20,15)-(20,33)
(20,15)-(20,33)
(20,20)-(20,27)
(20,20)-(20,33)
(20,20)-(20,33)
(20,28)-(20,30)
(20,31)-(20,33)
*)


let rec clone x n =
  let rec helper a x n =
    if n <= 0 then a else (let a' = x :: a in helper a' x (n - 1)) in
  helper [] x n;;

let padZero l1 l2 =
  let length1 = List.length l1 in
  let length2 = List.length l2 in
  if length1 > length2
  then (l1, (List.append (clone 0 (length1 - length2)) l2))
  else
    if length2 > length1
    then ((List.append (clone 0 (length2 - length1)) l1), l2)
    else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match x with
      | (x1,x2) ->
          (match a with
           | (o,z) ->
               if ((o + x1) + x2) > 9
               then (1, ((((o + x1) + x2) mod 10) :: z))
               else (0, (((o + x1) + x2) :: z))) in
    let base = (0, []) in
    let args =
      let rec pair list1 list2 =
        match (list1, list2) with
        | (h1::t1,h2::t2) -> (h1, h2) :: (pair t1 t2)
        | (_,_) -> (0, 0) in
      pair (List.rev l1) (List.rev l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n =
  let rec helper a x n =
    if n <= 0 then a else (let a' = x :: a in helper a' x (n - 1)) in
  helper [] x n;;

let padZero l1 l2 =
  let length1 = List.length l1 in
  let length2 = List.length l2 in
  if length1 > length2
  then (l1, (List.append (clone 0 (length1 - length2)) l2))
  else
    if length2 > length1
    then ((List.append (clone 0 (length2 - length1)) l1), l2)
    else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match x with
      | (x1,x2) ->
          (match a with
           | (o,z) ->
               if ((o + x1) + x2) > 9
               then (1, ((((o + x1) + x2) mod 10) :: z))
               else (0, (((o + x1) + x2) :: z))) in
    let base = (0, []) in
    let args =
      let rec pair list1 list2 =
        match (list1, list2) with
        | (h1::t1,h2::t2) -> (h1, h2) :: (pair t1 t2)
        | (_,_) -> [(0, 0)] in
      pair (List.rev l1) (List.rev l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(35,21)-(35,22)
(35,21)-(35,25)
*)

(* type error slice
(2,4)-(5,18)
(2,15)-(5,16)
(2,17)-(5,16)
(3,3)-(5,16)
(3,3)-(5,16)
(3,18)-(4,65)
(3,20)-(4,65)
(3,22)-(4,65)
(4,5)-(4,65)
(4,5)-(4,65)
(4,8)-(4,9)
(4,8)-(4,14)
(4,8)-(4,14)
(4,8)-(4,14)
(4,13)-(4,14)
(4,20)-(4,21)
(4,28)-(4,65)
(4,28)-(4,65)
(4,37)-(4,38)
(4,37)-(4,43)
(4,42)-(4,43)
(4,47)-(4,53)
(4,47)-(4,65)
(4,47)-(4,65)
(4,47)-(4,65)
(4,47)-(4,65)
(4,54)-(4,56)
(4,57)-(4,58)
(4,60)-(4,61)
(4,60)-(4,65)
(4,64)-(4,65)
(5,3)-(5,9)
(5,3)-(5,16)
(5,3)-(5,16)
(5,3)-(5,16)
(5,10)-(5,12)
(5,13)-(5,14)
(5,15)-(5,16)
(7,4)-(15,20)
(7,13)-(15,17)
(7,16)-(15,17)
(8,3)-(15,17)
(8,3)-(15,17)
(8,17)-(8,28)
(8,17)-(8,31)
(8,17)-(8,31)
(8,29)-(8,31)
(9,3)-(15,17)
(9,3)-(15,17)
(9,17)-(9,28)
(9,17)-(9,31)
(9,17)-(9,31)
(9,29)-(9,31)
(10,3)-(15,17)
(10,3)-(15,17)
(10,6)-(10,13)
(10,6)-(10,23)
(10,6)-(10,23)
(10,16)-(10,23)
(11,9)-(11,11)
(11,9)-(11,58)
(11,14)-(11,25)
(11,14)-(11,58)
(11,14)-(11,58)
(11,14)-(11,58)
(11,27)-(11,32)
(11,27)-(11,53)
(11,27)-(11,53)
(11,27)-(11,53)
(11,33)-(11,34)
(11,36)-(11,43)
(11,36)-(11,53)
(11,46)-(11,53)
(11,56)-(11,58)
(13,5)-(15,17)
(13,5)-(15,17)
(13,8)-(13,15)
(13,8)-(13,25)
(13,8)-(13,25)
(13,18)-(13,25)
(14,12)-(14,23)
(14,12)-(14,56)
(14,12)-(14,56)
(14,12)-(14,56)
(14,12)-(14,61)
(14,25)-(14,30)
(14,25)-(14,51)
(14,31)-(14,32)
(14,34)-(14,41)
(14,34)-(14,51)
(14,44)-(14,51)
(14,54)-(14,56)
(14,59)-(14,61)
(15,11)-(15,13)
(15,11)-(15,17)
(15,15)-(15,17)
(17,20)-(18,70)
(18,3)-(18,70)
(18,3)-(18,70)
(18,3)-(18,70)
(18,3)-(18,70)
(18,3)-(18,70)
(18,9)-(18,10)
(18,24)-(18,26)
(18,37)-(18,70)
(18,37)-(18,70)
(18,40)-(18,41)
(18,40)-(18,45)
(18,51)-(18,61)
(18,51)-(18,63)
(18,69)-(18,70)
(20,4)-(38,37)
(20,12)-(38,33)
(20,15)-(38,33)
(21,3)-(38,33)
(21,12)-(37,52)
(22,5)-(37,52)
(22,11)-(29,46)
(22,13)-(29,46)
(23,13)-(23,14)
(25,18)-(25,19)
(27,21)-(27,22)
(27,25)-(27,27)
(27,31)-(27,33)
(28,54)-(28,55)
(30,5)-(37,52)
(30,17)-(30,22)
(30,20)-(30,22)
(31,5)-(37,52)
(32,7)-(36,38)
(32,7)-(36,38)
(32,20)-(35,25)
(32,26)-(35,25)
(33,9)-(35,25)
(33,9)-(35,25)
(33,9)-(35,25)
(33,9)-(35,25)
(33,9)-(35,25)
(33,9)-(35,25)
(33,9)-(35,25)
(33,9)-(35,25)
(33,16)-(33,21)
(33,16)-(33,28)
(33,23)-(33,28)
(34,31)-(34,33)
(34,31)-(34,37)
(34,31)-(34,53)
(34,35)-(34,37)
(34,43)-(34,47)
(34,43)-(34,53)
(34,43)-(34,53)
(34,43)-(34,53)
(34,48)-(34,50)
(34,51)-(34,53)
(35,21)-(35,22)
(35,21)-(35,25)
(35,24)-(35,25)
(36,7)-(36,11)
(36,7)-(36,38)
(36,7)-(36,38)
(36,7)-(36,38)
(36,13)-(36,21)
(36,13)-(36,24)
(36,13)-(36,24)
(36,22)-(36,24)
(36,27)-(36,35)
(36,27)-(36,38)
(36,27)-(36,38)
(36,36)-(36,38)
(37,19)-(37,33)
(37,19)-(37,45)
(37,19)-(37,45)
(37,19)-(37,45)
(37,34)-(37,35)
(37,36)-(37,40)
(37,41)-(37,45)
(38,15)-(38,18)
(38,15)-(38,33)
(38,15)-(38,33)
(38,20)-(38,27)
(38,20)-(38,33)
(38,20)-(38,33)
(38,20)-(38,33)
(38,28)-(38,30)
(38,31)-(38,33)
*)

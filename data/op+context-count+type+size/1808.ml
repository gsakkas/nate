
let rec mulByDigit i l =
  match List.rev l with
  | [] -> []
  | h::t ->
      let prod = h * i in
      if prod > 10 then (prod mod 10) :: (prod / 10) else prod :: t;;


(* fix

let rec mulByDigit i l =
  match List.rev l with
  | [] -> []
  | h::t ->
      let prod = h * i in
      if prod > 10
      then (prod mod 10) :: (prod / 10) :: (mulByDigit i t)
      else prod :: t;;

*)

(* changed spans
(7,43)-(7,52)
(7,59)-(7,63)
(7,59)-(7,68)
(7,67)-(7,68)
*)

(* type error slice
(2,4)-(7,70)
(2,20)-(7,68)
(2,22)-(7,68)
(3,3)-(7,68)
(3,3)-(7,68)
(3,3)-(7,68)
(3,3)-(7,68)
(3,3)-(7,68)
(3,9)-(3,17)
(3,9)-(3,19)
(3,9)-(3,19)
(3,18)-(3,19)
(4,11)-(4,13)
(6,7)-(7,68)
(6,18)-(6,19)
(6,18)-(6,23)
(6,22)-(6,23)
(7,7)-(7,68)
(7,10)-(7,14)
(7,10)-(7,19)
(7,10)-(7,19)
(7,17)-(7,19)
(7,26)-(7,30)
(7,26)-(7,37)
(7,26)-(7,52)
(7,35)-(7,37)
(7,43)-(7,47)
(7,43)-(7,52)
(7,50)-(7,52)
*)

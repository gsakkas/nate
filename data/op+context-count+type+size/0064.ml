
let rec mulByDigit i l =
  match List.rev l with
  | [] -> 0
  | h::t ->
      let rec helper acc v =
        if v = 0 then 0 :: acc else helper ((v mod 10) :: acc) (v / 10) in
      (helper ((mulByDigit i (List.rev t)) * 10)) + (h * i);;


(* fix

let rec mulByDigit i l =
  match l with
  | [] -> []
  | h::t ->
      let rec helper acc v =
        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in
      helper [] h;;

*)

(* changed spans
(3,9)-(3,17)
(3,9)-(3,19)
(4,11)-(4,12)
(7,23)-(7,24)
(7,23)-(7,31)
(8,8)-(8,59)
*)

(* type error slice
(2,20)-(8,59)
(2,22)-(8,59)
(3,3)-(8,59)
(3,3)-(8,59)
(3,3)-(8,59)
(3,3)-(8,59)
(3,9)-(3,17)
(3,9)-(3,19)
(3,9)-(3,19)
(3,18)-(3,19)
(6,7)-(8,59)
(6,22)-(7,71)
(6,26)-(7,71)
(7,9)-(7,71)
(7,9)-(7,71)
(7,12)-(7,13)
(7,12)-(7,17)
(7,12)-(7,17)
(7,12)-(7,17)
(7,16)-(7,17)
(7,23)-(7,24)
(7,23)-(7,31)
(7,28)-(7,31)
(7,37)-(7,43)
(7,37)-(7,71)
(7,37)-(7,71)
(7,37)-(7,71)
(7,46)-(7,47)
(7,46)-(7,54)
(7,46)-(7,62)
(7,52)-(7,54)
(7,59)-(7,62)
(7,65)-(7,66)
(7,65)-(7,71)
(7,69)-(7,71)
(8,8)-(8,14)
(8,8)-(8,48)
(8,8)-(8,48)
(8,8)-(8,59)
(8,17)-(8,27)
(8,17)-(8,41)
(8,17)-(8,41)
(8,17)-(8,41)
(8,17)-(8,48)
(8,17)-(8,48)
(8,28)-(8,29)
(8,31)-(8,39)
(8,31)-(8,41)
(8,31)-(8,41)
(8,40)-(8,41)
(8,46)-(8,48)
(8,54)-(8,55)
(8,54)-(8,59)
(8,54)-(8,59)
(8,54)-(8,59)
(8,58)-(8,59)
*)

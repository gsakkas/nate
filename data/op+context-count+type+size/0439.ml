
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let dl = (List.length l1) - (List.length l2) in
  match dl with
  | 0 -> (l1, l2)
  | _ ->
      if dl > 0
      then (l1, ((clone 0 dl) @ l2))
      else (((clone 0 (dl / (-1))) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h == 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let z = (fst x) + (snd x) in
      match a with
      | (w,y)::t -> ((((w + z) + y) / 10), ((((w + y) + z) mod 10) :: t))
      | [] -> (0, 0) in
    let base = (0, 0) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let dl = (List.length l1) - (List.length l2) in
  match dl with
  | 0 -> (l1, l2)
  | _ ->
      if dl > 0
      then (l1, ((clone 0 dl) @ l2))
      else (((clone 0 (dl / (-1))) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h == 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let z = (fst x) + (snd x) in
      match a with | (w,y) -> (((w + z) / 10), (((w + z) mod 10) :: y)) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(20,7)-(22,20)
(21,25)-(21,30)
(21,34)-(21,35)
(21,48)-(21,53)
(21,52)-(21,53)
(21,71)-(21,72)
(22,16)-(22,17)
(22,16)-(22,20)
(22,19)-(22,20)
(23,20)-(23,21)
*)

(* type error slice
(2,4)-(2,68)
(2,15)-(2,64)
(2,17)-(2,64)
(2,21)-(2,64)
(2,21)-(2,64)
(2,24)-(2,25)
(2,24)-(2,30)
(2,24)-(2,30)
(2,24)-(2,30)
(2,29)-(2,30)
(2,36)-(2,38)
(2,44)-(2,45)
(2,44)-(2,64)
(2,50)-(2,55)
(2,50)-(2,64)
(2,50)-(2,64)
(2,50)-(2,64)
(2,56)-(2,57)
(2,59)-(2,60)
(2,59)-(2,64)
(2,63)-(2,64)
(4,4)-(11,48)
(4,13)-(11,45)
(4,16)-(11,45)
(5,13)-(5,24)
(5,13)-(5,27)
(5,13)-(5,27)
(5,25)-(5,27)
(5,32)-(5,43)
(5,32)-(5,46)
(5,32)-(5,46)
(5,44)-(5,46)
(7,11)-(7,13)
(7,11)-(7,17)
(7,15)-(7,17)
(10,13)-(10,15)
(10,13)-(10,35)
(10,19)-(10,24)
(10,19)-(10,29)
(10,19)-(10,35)
(10,31)-(10,32)
(10,33)-(10,35)
(11,15)-(11,40)
(11,36)-(11,37)
(11,38)-(11,40)
(13,20)-(14,76)
(14,3)-(14,76)
(14,3)-(14,76)
(14,3)-(14,76)
(14,3)-(14,76)
(14,3)-(14,76)
(14,9)-(14,10)
(14,24)-(14,26)
(14,37)-(14,76)
(14,40)-(14,41)
(14,40)-(14,46)
(14,52)-(14,62)
(14,52)-(14,64)
(16,4)-(26,37)
(16,12)-(26,33)
(16,15)-(26,33)
(17,3)-(26,33)
(17,12)-(25,52)
(18,5)-(25,52)
(18,5)-(25,52)
(18,11)-(22,20)
(18,13)-(22,20)
(19,7)-(22,20)
(19,7)-(22,20)
(19,16)-(19,19)
(19,16)-(19,21)
(19,16)-(19,21)
(19,16)-(19,31)
(19,16)-(19,31)
(19,16)-(19,31)
(19,20)-(19,21)
(19,26)-(19,29)
(19,26)-(19,31)
(19,26)-(19,31)
(19,30)-(19,31)
(20,7)-(22,20)
(20,7)-(22,20)
(20,7)-(22,20)
(20,7)-(22,20)
(20,7)-(22,20)
(20,7)-(22,20)
(20,7)-(22,20)
(20,13)-(20,14)
(21,25)-(21,26)
(21,25)-(21,30)
(21,25)-(21,30)
(21,25)-(21,35)
(21,25)-(21,35)
(21,25)-(21,41)
(21,25)-(21,72)
(21,29)-(21,30)
(21,34)-(21,35)
(21,39)-(21,41)
(21,48)-(21,49)
(21,48)-(21,53)
(21,48)-(21,58)
(21,48)-(21,66)
(21,48)-(21,72)
(21,52)-(21,53)
(21,57)-(21,58)
(21,64)-(21,66)
(21,71)-(21,72)
(22,16)-(22,17)
(22,16)-(22,20)
(22,19)-(22,20)
(23,5)-(25,52)
(23,5)-(25,52)
(23,17)-(23,18)
(23,17)-(23,21)
(23,20)-(23,21)
(24,5)-(25,52)
(24,5)-(25,52)
(24,16)-(24,24)
(24,16)-(24,44)
(24,16)-(24,44)
(24,26)-(24,38)
(24,26)-(24,44)
(24,26)-(24,44)
(24,26)-(24,44)
(24,39)-(24,41)
(24,42)-(24,44)
(25,5)-(25,52)
(25,5)-(25,52)
(25,19)-(25,33)
(25,19)-(25,45)
(25,19)-(25,45)
(25,19)-(25,45)
(25,19)-(25,45)
(25,34)-(25,35)
(25,36)-(25,40)
(25,41)-(25,45)
(25,49)-(25,52)
(26,15)-(26,18)
(26,15)-(26,33)
(26,15)-(26,33)
(26,20)-(26,27)
(26,20)-(26,33)
(26,20)-(26,33)
(26,28)-(26,30)
(26,31)-(26,33)
*)


type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Percent of expr
  | Negate of expr
  | SumSquared of expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildNegate e = Negate e;;

let buildPercent e = Percent e;;

let buildSine e = Sine e;;

let buildSumSquared (e1,e2,e3) = SumSquared (e1, e2, e3);;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth = 0
  then let num = rand (1, 10) in (if num > 4 then buildX () else buildY ())
  else
    (let num = rand (1, 10) in
     match num with
     | 1|2 -> buildSine (build (rand, (depth - 1)))
     | 3|4 -> buildCosine (build (rand, (depth - 1)))
     | 5|6 ->
         buildAverage
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 7|8 ->
         buildTimes
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 9 ->
         buildThresh
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
             (build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | _ ->
         if (num mod 2) = 0
         then buildPercent (rand, (depth - 1))
         else
           if (num mod 3) = 0
           then buildNegate (rand, (depth - 1))
           else
             buildSumSquared
               ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
                 (build (rand, (depth - 1)))));;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Percent of expr
  | Negate of expr
  | SumSquared of expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildNegate e = Negate e;;

let buildPercent e = Percent e;;

let buildSine e = Sine e;;

let buildSumSquared (e1,e2,e3) = SumSquared (e1, e2, e3);;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth = 0
  then let num = rand (1, 10) in (if num > 4 then buildX () else buildY ())
  else
    (let num = rand (1, 10) in
     match num with
     | 1|2 -> buildSine (build (rand, (depth - 1)))
     | 3|4 -> buildCosine (build (rand, (depth - 1)))
     | 5|6 ->
         buildAverage
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 7|8 ->
         buildTimes
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 9 ->
         buildThresh
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
             (build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | _ ->
         if (num mod 2) = 0
         then buildPercent (build (rand, (depth - 1)))
         else
           if (num mod 3) = 0
           then buildNegate (build (rand, (depth - 1)))
           else
             buildSumSquared
               ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
                 (build (rand, (depth - 1)))));;

*)

(* changed spans
(44,14)-(44,37)
(44,43)-(44,66)
(47,14)-(47,37)
(47,43)-(47,66)
(54,29)-(54,45)
(57,30)-(57,46)
(61,33)-(61,38)
(61,41)-(61,42)
*)

(* type error slice
(14,4)-(14,46)
(14,19)-(14,43)
(14,28)-(14,43)
(14,37)-(14,39)
(14,41)-(14,43)
(16,4)-(16,31)
(16,17)-(16,29)
(16,21)-(16,29)
(16,28)-(16,29)
(18,4)-(18,31)
(18,17)-(18,29)
(18,21)-(18,29)
(18,28)-(18,29)
(20,4)-(20,33)
(20,18)-(20,31)
(20,22)-(20,31)
(20,30)-(20,31)
(22,4)-(22,27)
(22,15)-(22,25)
(22,19)-(22,25)
(22,24)-(22,25)
(24,4)-(24,59)
(24,22)-(24,56)
(24,34)-(24,56)
(24,46)-(24,48)
(24,50)-(24,52)
(24,54)-(24,56)
(26,4)-(26,70)
(26,18)-(26,67)
(26,39)-(26,67)
(26,47)-(26,48)
(26,50)-(26,51)
(26,53)-(26,59)
(26,61)-(26,67)
(28,4)-(28,42)
(28,17)-(28,39)
(28,26)-(28,39)
(28,33)-(28,35)
(28,37)-(28,39)
(30,4)-(30,23)
(30,12)-(30,21)
(30,12)-(30,21)
(30,17)-(30,21)
(32,4)-(32,23)
(32,12)-(32,21)
(32,12)-(32,21)
(32,17)-(32,21)
(34,16)-(61,42)
(35,3)-(61,42)
(35,3)-(61,42)
(35,6)-(35,11)
(35,6)-(35,15)
(35,6)-(35,15)
(35,6)-(35,15)
(35,14)-(35,15)
(36,8)-(36,75)
(36,8)-(36,75)
(36,18)-(36,22)
(36,18)-(36,29)
(36,18)-(36,29)
(36,24)-(36,25)
(36,24)-(36,29)
(36,27)-(36,29)
(36,35)-(36,75)
(36,35)-(36,75)
(36,38)-(36,41)
(36,38)-(36,45)
(36,38)-(36,45)
(36,38)-(36,45)
(36,44)-(36,45)
(36,51)-(36,57)
(36,51)-(36,60)
(36,58)-(36,60)
(36,66)-(36,72)
(36,66)-(36,75)
(36,73)-(36,75)
(38,6)-(61,42)
(38,6)-(61,42)
(38,16)-(38,20)
(38,16)-(38,27)
(38,22)-(38,23)
(38,22)-(38,27)
(38,25)-(38,27)
(39,6)-(61,42)
(39,6)-(61,42)
(39,6)-(61,42)
(39,6)-(61,42)
(39,6)-(61,42)
(39,6)-(61,42)
(39,6)-(61,42)
(39,6)-(61,42)
(39,6)-(61,42)
(39,6)-(61,42)
(39,6)-(61,42)
(39,6)-(61,42)
(39,6)-(61,42)
(39,6)-(61,42)
(39,6)-(61,42)
(39,12)-(39,15)
(40,15)-(40,24)
(40,15)-(40,49)
(40,15)-(40,49)
(40,26)-(40,31)
(40,26)-(40,49)
(40,26)-(40,49)
(40,33)-(40,37)
(40,33)-(40,49)
(40,40)-(40,45)
(40,40)-(40,49)
(40,48)-(40,49)
(41,15)-(41,26)
(41,15)-(41,51)
(41,28)-(41,33)
(41,28)-(41,51)
(41,35)-(41,39)
(41,35)-(41,51)
(41,42)-(41,47)
(41,42)-(41,51)
(41,50)-(41,51)
(43,10)-(43,22)
(43,10)-(44,66)
(44,14)-(44,19)
(44,14)-(44,37)
(44,14)-(44,66)
(44,21)-(44,25)
(44,21)-(44,37)
(44,28)-(44,33)
(44,28)-(44,37)
(44,36)-(44,37)
(44,43)-(44,48)
(44,43)-(44,66)
(44,50)-(44,54)
(44,50)-(44,66)
(44,57)-(44,62)
(44,57)-(44,66)
(44,65)-(44,66)
(46,10)-(46,20)
(46,10)-(47,66)
(47,14)-(47,19)
(47,14)-(47,37)
(47,14)-(47,66)
(47,21)-(47,25)
(47,21)-(47,37)
(47,28)-(47,33)
(47,28)-(47,37)
(47,36)-(47,37)
(47,43)-(47,48)
(47,43)-(47,66)
(47,50)-(47,54)
(47,50)-(47,66)
(47,57)-(47,62)
(47,57)-(47,66)
(47,65)-(47,66)
(49,10)-(49,21)
(49,10)-(51,67)
(50,14)-(50,19)
(50,14)-(50,37)
(50,14)-(51,67)
(50,21)-(50,25)
(50,21)-(50,37)
(50,28)-(50,33)
(50,28)-(50,37)
(50,36)-(50,37)
(50,43)-(50,48)
(50,43)-(50,66)
(50,50)-(50,54)
(50,50)-(50,66)
(50,57)-(50,62)
(50,57)-(50,66)
(50,65)-(50,66)
(51,15)-(51,20)
(51,15)-(51,38)
(51,22)-(51,26)
(51,22)-(51,38)
(51,29)-(51,34)
(51,29)-(51,38)
(51,37)-(51,38)
(51,44)-(51,49)
(51,44)-(51,67)
(51,51)-(51,55)
(51,51)-(51,67)
(51,58)-(51,63)
(51,58)-(51,67)
(51,66)-(51,67)
(53,10)-(61,42)
(53,10)-(61,42)
(53,14)-(53,17)
(53,14)-(53,23)
(53,14)-(53,28)
(53,14)-(53,28)
(53,22)-(53,23)
(53,27)-(53,28)
(54,15)-(54,27)
(54,15)-(54,45)
(54,15)-(54,45)
(54,29)-(54,33)
(54,29)-(54,45)
(54,36)-(54,41)
(54,36)-(54,45)
(54,44)-(54,45)
(56,12)-(61,42)
(56,12)-(61,42)
(56,16)-(56,19)
(56,16)-(56,25)
(56,16)-(56,30)
(56,16)-(56,30)
(56,24)-(56,25)
(56,29)-(56,30)
(57,17)-(57,28)
(57,17)-(57,46)
(57,17)-(57,46)
(57,30)-(57,34)
(57,30)-(57,46)
(57,37)-(57,42)
(57,37)-(57,46)
(57,45)-(57,46)
(59,14)-(59,29)
(59,14)-(61,42)
*)

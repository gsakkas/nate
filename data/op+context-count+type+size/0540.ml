
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  let rec buildhelper num depth expr =
    match num with
    | 0 -> if (rand (0, 1)) = 0 then buildX () else buildY ()
    | 1 ->
        if (rand (0, 1)) = 0
        then buildSine (buildhelper 0 0 expr)
        else buildCosine (buildhelper 0 0 expr)
    | 2 ->
        if (rand (0, 1)) = 0
        then
          buildAverage
            ((buildhelper (depth - 1) (depth - 1) expr),
              (buildhelper (depth - 1) (depth - 1) expr))
        else
          buildTimes
            ((buildhelper (depth - 1) (depth - 1) expr),
              (buildhelper (depth - 1) (depth - 1) expr))
    | 3 ->
        if (rand (0, 1)) = 0
        then
          buildAverage
            ((buildhelper (depth - 1) (depth - 1) expr),
              (buildhelper (depth - 1) (depth - 1) expr))
        else
          buildTimes
            ((buildhelper (depth - 1) (depth - 1) expr),
              (buildhelper (depth - 1) (depth - 1) expr))
    | 4 ->
        buildTimes
          ((buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr))
    | _ ->
        buildTimes
          ((buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr)) in
  buildhelper (rand (1, 4)) depth "";;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  let rec buildhelper num depth expr =
    match num with
    | 0 -> if (rand (0, 1)) = 0 then buildX () else buildY ()
    | 1 ->
        if (rand (0, 1)) = 0
        then buildSine (buildhelper 0 0 expr)
        else buildCosine (buildhelper 0 0 expr)
    | 2 ->
        if (rand (0, 1)) = 0
        then
          buildAverage
            ((buildhelper (depth - 1) (depth - 1) expr),
              (buildhelper (depth - 1) (depth - 1) expr))
        else
          buildTimes
            ((buildhelper (depth - 1) (depth - 1) expr),
              (buildhelper (depth - 1) (depth - 1) expr))
    | 3 ->
        if (rand (0, 1)) = 0
        then
          buildAverage
            ((buildhelper (depth - 1) (depth - 1) expr),
              (buildhelper (depth - 1) (depth - 1) expr))
        else
          buildTimes
            ((buildhelper (depth - 1) (depth - 1) expr),
              (buildhelper (depth - 1) (depth - 1) expr))
    | 4 ->
        buildThresh
          ((buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr))
    | _ ->
        buildThresh
          ((buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr)) in
  buildhelper (rand (1, 4)) depth "";;

*)

(* changed spans
(17,17)-(17,39)
(35,15)-(35,55)
(36,16)-(36,56)
(39,15)-(39,55)
(40,16)-(40,56)
(45,15)-(45,55)
(46,16)-(46,56)
(49,15)-(49,55)
(50,16)-(50,56)
(52,9)-(52,19)
(58,9)-(58,19)
(63,22)-(63,23)
(63,25)-(63,26)
*)

(* type error slice
(11,4)-(11,46)
(11,19)-(11,43)
(11,28)-(11,43)
(11,37)-(11,39)
(11,41)-(11,43)
(13,4)-(13,31)
(13,17)-(13,29)
(13,21)-(13,29)
(13,28)-(13,29)
(15,4)-(15,27)
(15,15)-(15,25)
(15,19)-(15,25)
(15,24)-(15,25)
(17,4)-(17,42)
(17,17)-(17,39)
(17,26)-(17,39)
(17,33)-(17,35)
(17,37)-(17,39)
(19,4)-(19,23)
(19,12)-(19,21)
(19,12)-(19,21)
(19,17)-(19,21)
(21,4)-(21,23)
(21,12)-(21,21)
(21,12)-(21,21)
(21,17)-(21,21)
(23,4)-(63,39)
(23,16)-(63,37)
(24,3)-(63,37)
(24,23)-(62,54)
(24,27)-(62,54)
(24,33)-(62,54)
(25,5)-(62,54)
(25,5)-(62,54)
(25,5)-(62,54)
(25,5)-(62,54)
(25,5)-(62,54)
(25,5)-(62,54)
(25,5)-(62,54)
(25,5)-(62,54)
(25,5)-(62,54)
(25,5)-(62,54)
(25,5)-(62,54)
(25,5)-(62,54)
(25,5)-(62,54)
(25,11)-(25,14)
(26,12)-(26,62)
(26,12)-(26,62)
(26,16)-(26,20)
(26,16)-(26,26)
(26,16)-(26,26)
(26,16)-(26,32)
(26,16)-(26,32)
(26,16)-(26,32)
(26,22)-(26,23)
(26,22)-(26,26)
(26,25)-(26,26)
(26,31)-(26,32)
(26,38)-(26,44)
(26,38)-(26,47)
(26,45)-(26,47)
(26,53)-(26,59)
(26,53)-(26,62)
(26,60)-(26,62)
(28,9)-(30,47)
(28,9)-(30,47)
(28,13)-(28,17)
(28,13)-(28,23)
(28,13)-(28,29)
(28,13)-(28,29)
(28,19)-(28,20)
(28,19)-(28,23)
(28,22)-(28,23)
(28,28)-(28,29)
(29,14)-(29,23)
(29,14)-(29,45)
(29,14)-(29,45)
(29,25)-(29,36)
(29,25)-(29,45)
(29,25)-(29,45)
(29,25)-(29,45)
(29,25)-(29,45)
(29,37)-(29,38)
(29,39)-(29,40)
(29,41)-(29,45)
(30,14)-(30,25)
(30,14)-(30,47)
(30,27)-(30,38)
(30,27)-(30,47)
(30,27)-(30,47)
(30,39)-(30,40)
(30,41)-(30,42)
(30,43)-(30,47)
(32,9)-(40,56)
(32,9)-(40,56)
(32,13)-(32,17)
(32,13)-(32,23)
(32,13)-(32,29)
(32,13)-(32,29)
(32,19)-(32,20)
(32,19)-(32,23)
(32,22)-(32,23)
(32,28)-(32,29)
(34,11)-(34,23)
(34,11)-(36,56)
(35,15)-(35,26)
(35,15)-(35,55)
(35,15)-(35,55)
(35,15)-(36,56)
(35,28)-(35,33)
(35,28)-(35,37)
(35,28)-(35,37)
(35,36)-(35,37)
(35,40)-(35,45)
(35,40)-(35,49)
(35,48)-(35,49)
(35,51)-(35,55)
(36,16)-(36,27)
(36,16)-(36,56)
(36,16)-(36,56)
(36,29)-(36,34)
(36,29)-(36,38)
(36,37)-(36,38)
(36,41)-(36,46)
(36,41)-(36,50)
(36,49)-(36,50)
(36,52)-(36,56)
(38,11)-(38,21)
(38,11)-(40,56)
(39,15)-(39,26)
(39,15)-(39,55)
(39,15)-(39,55)
(39,15)-(40,56)
(39,28)-(39,33)
(39,28)-(39,37)
(39,36)-(39,37)
(39,40)-(39,45)
(39,40)-(39,49)
(39,48)-(39,49)
(39,51)-(39,55)
(40,16)-(40,27)
(40,16)-(40,56)
(40,16)-(40,56)
(40,29)-(40,34)
(40,29)-(40,38)
(40,37)-(40,38)
(40,41)-(40,46)
(40,41)-(40,50)
(40,49)-(40,50)
(40,52)-(40,56)
(42,9)-(50,56)
(42,9)-(50,56)
(42,13)-(42,17)
(42,13)-(42,23)
(42,13)-(42,29)
(42,13)-(42,29)
(42,19)-(42,20)
(42,19)-(42,23)
(42,22)-(42,23)
(42,28)-(42,29)
(44,11)-(44,23)
(44,11)-(46,56)
(45,15)-(45,26)
(45,15)-(45,55)
(45,15)-(45,55)
(45,15)-(46,56)
(45,28)-(45,33)
(45,28)-(45,37)
(45,36)-(45,37)
(45,40)-(45,45)
(45,40)-(45,49)
(45,48)-(45,49)
(45,51)-(45,55)
(46,16)-(46,27)
(46,16)-(46,56)
(46,16)-(46,56)
(46,29)-(46,34)
(46,29)-(46,38)
(46,37)-(46,38)
(46,41)-(46,46)
(46,41)-(46,50)
(46,49)-(46,50)
(46,52)-(46,56)
(48,11)-(48,21)
(48,11)-(50,56)
(49,15)-(49,26)
(49,15)-(49,55)
(49,15)-(49,55)
(49,15)-(50,56)
(49,28)-(49,33)
(49,28)-(49,37)
(49,36)-(49,37)
(49,40)-(49,45)
(49,40)-(49,49)
(49,48)-(49,49)
(49,51)-(49,55)
(50,16)-(50,27)
(50,16)-(50,56)
(50,16)-(50,56)
(50,29)-(50,34)
(50,29)-(50,38)
(50,37)-(50,38)
(50,41)-(50,46)
(50,41)-(50,50)
(50,49)-(50,50)
(50,52)-(50,56)
(52,9)-(52,19)
(52,9)-(56,54)
(52,9)-(56,54)
(53,13)-(53,24)
(53,13)-(53,53)
(53,13)-(53,53)
(53,13)-(56,54)
(53,26)-(53,31)
(53,26)-(53,35)
(53,34)-(53,35)
(53,38)-(53,43)
(53,38)-(53,47)
(53,46)-(53,47)
(53,49)-(53,53)
(54,14)-(54,25)
(54,14)-(54,54)
(54,14)-(54,54)
(54,27)-(54,32)
(54,27)-(54,36)
(54,35)-(54,36)
(54,39)-(54,44)
(54,39)-(54,48)
(54,47)-(54,48)
(54,50)-(54,54)
(55,14)-(55,25)
(55,14)-(55,54)
(55,14)-(55,54)
(55,27)-(55,32)
(55,27)-(55,36)
(55,35)-(55,36)
(55,39)-(55,44)
(55,39)-(55,48)
(55,47)-(55,48)
(55,50)-(55,54)
(56,14)-(56,25)
(56,14)-(56,54)
(56,14)-(56,54)
(56,27)-(56,32)
(56,27)-(56,36)
(56,35)-(56,36)
(56,39)-(56,44)
(56,39)-(56,48)
(56,47)-(56,48)
(56,50)-(56,54)
(58,9)-(58,19)
(58,9)-(62,54)
(58,9)-(62,54)
(59,13)-(59,24)
(59,13)-(59,53)
(59,13)-(59,53)
(59,13)-(62,54)
(59,26)-(59,31)
(59,26)-(59,35)
(59,34)-(59,35)
(59,38)-(59,43)
(59,38)-(59,47)
(59,46)-(59,47)
(59,49)-(59,53)
(60,14)-(60,25)
(60,14)-(60,54)
(60,14)-(60,54)
(60,27)-(60,32)
(60,27)-(60,36)
(60,35)-(60,36)
(60,39)-(60,44)
(60,39)-(60,48)
(60,47)-(60,48)
(60,50)-(60,54)
(61,14)-(61,25)
(61,14)-(61,54)
(61,14)-(61,54)
(61,27)-(61,32)
(61,27)-(61,36)
(61,35)-(61,36)
(61,39)-(61,44)
(61,39)-(61,48)
(61,47)-(61,48)
(61,50)-(61,54)
(62,14)-(62,25)
(62,14)-(62,54)
(62,14)-(62,54)
(62,27)-(62,32)
(62,27)-(62,36)
(62,35)-(62,36)
(62,39)-(62,44)
(62,39)-(62,48)
(62,47)-(62,48)
(62,50)-(62,54)
(63,3)-(63,14)
(63,3)-(63,37)
(63,29)-(63,34)
*)

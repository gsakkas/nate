
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let lenl1 = List.length l1 in
  let lenl2 = List.length l2 in
  if lenl1 > lenl2
  then (l1, ((clone 0 (lenl1 - lenl2)) @ l2))
  else (((clone 0 (lenl2 - lenl1)) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let y x = x + 1;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (rem,_) = a in
      let (el1,el2) = x in
      let new_sum = (rem + el1) + el2 in
      let new_rem = if new_sum > 9 then 1 else 0 in
      let norm_sum = if new_sum > 9 then new_sum - 10 else new_sum in
      (new_rem, (norm_sum :: y)) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let lenl1 = List.length l1 in
  let lenl2 = List.length l2 in
  if lenl1 > lenl2
  then (l1, ((clone 0 (lenl1 - lenl2)) @ l2))
  else (((clone 0 (lenl2 - lenl1)) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (rem,acc) = a in
      let (el1,el2) = x in
      let new_sum = (rem + el1) + el2 in
      let new_rem = if new_sum > 9 then 1 else 0 in
      let norm_sum = if new_sum > 9 then new_sum - 10 else new_sum in
      (new_rem, (norm_sum :: acc)) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(14,7)-(14,16)
(14,11)-(14,12)
(14,11)-(14,16)
(14,15)-(14,16)
(24,30)-(24,31)
*)

(* type error slice
(2,4)-(2,68)
(2,15)-(2,64)
(2,17)-(2,64)
(2,21)-(2,64)
(2,21)-(2,64)
(2,24)-(2,25)
(2,24)-(2,30)
(2,24)-(2,30)
(2,24)-(2,30)
(2,29)-(2,30)
(2,36)-(2,38)
(2,44)-(2,45)
(2,44)-(2,64)
(2,50)-(2,55)
(2,50)-(2,64)
(2,50)-(2,64)
(2,50)-(2,64)
(2,56)-(2,57)
(2,59)-(2,60)
(2,59)-(2,64)
(2,63)-(2,64)
(4,4)-(9,48)
(4,13)-(9,45)
(4,16)-(9,45)
(5,15)-(5,26)
(5,15)-(5,29)
(5,15)-(5,29)
(5,27)-(5,29)
(6,15)-(6,26)
(6,15)-(6,29)
(6,15)-(6,29)
(6,27)-(6,29)
(8,9)-(8,11)
(8,9)-(8,44)
(8,15)-(8,20)
(8,15)-(8,37)
(8,15)-(8,44)
(8,40)-(8,41)
(8,42)-(8,44)
(9,11)-(9,40)
(9,36)-(9,37)
(9,38)-(9,40)
(11,20)-(12,75)
(12,3)-(12,75)
(12,3)-(12,75)
(12,3)-(12,75)
(12,3)-(12,75)
(12,3)-(12,75)
(12,9)-(12,10)
(12,24)-(12,26)
(12,37)-(12,75)
(12,40)-(12,41)
(12,40)-(12,45)
(12,51)-(12,61)
(12,51)-(12,63)
(14,4)-(14,18)
(14,7)-(14,16)
(14,11)-(14,12)
(14,11)-(14,16)
(14,11)-(14,16)
(14,15)-(14,16)
(16,4)-(28,37)
(16,12)-(28,33)
(16,15)-(28,33)
(17,3)-(28,33)
(17,12)-(27,52)
(18,5)-(27,52)
(18,5)-(27,52)
(18,11)-(24,31)
(18,13)-(24,31)
(19,7)-(24,31)
(19,7)-(24,31)
(19,21)-(19,22)
(20,7)-(24,31)
(20,7)-(24,31)
(20,23)-(20,24)
(21,7)-(24,31)
(21,7)-(24,31)
(21,22)-(21,25)
(21,22)-(21,31)
(21,22)-(21,31)
(21,22)-(21,31)
(21,22)-(21,38)
(21,22)-(21,38)
(21,28)-(21,31)
(21,35)-(21,38)
(22,7)-(24,31)
(22,7)-(24,31)
(22,21)-(22,49)
(22,24)-(22,31)
(22,24)-(22,35)
(22,24)-(22,35)
(22,34)-(22,35)
(22,41)-(22,42)
(22,48)-(22,49)
(23,7)-(24,31)
(23,7)-(24,31)
(23,22)-(23,67)
(23,25)-(23,32)
(23,25)-(23,36)
(23,25)-(23,36)
(23,35)-(23,36)
(23,42)-(23,49)
(23,42)-(23,54)
(23,52)-(23,54)
(23,60)-(23,67)
(24,8)-(24,15)
(24,8)-(24,31)
(24,18)-(24,26)
(24,18)-(24,31)
(24,30)-(24,31)
(25,5)-(27,52)
(25,5)-(27,52)
(25,17)-(25,22)
(25,20)-(25,22)
(26,5)-(27,52)
(26,5)-(27,52)
(26,16)-(26,24)
(26,16)-(26,44)
(26,16)-(26,44)
(26,26)-(26,38)
(26,26)-(26,44)
(26,26)-(26,44)
(26,26)-(26,44)
(26,39)-(26,41)
(26,42)-(26,44)
(27,5)-(27,52)
(27,5)-(27,52)
(27,19)-(27,33)
(27,19)-(27,45)
(27,19)-(27,45)
(27,19)-(27,45)
(27,19)-(27,45)
(27,34)-(27,35)
(27,36)-(27,40)
(27,41)-(27,45)
(27,49)-(27,52)
(28,15)-(28,18)
(28,15)-(28,33)
(28,15)-(28,33)
(28,20)-(28,27)
(28,20)-(28,33)
(28,20)-(28,33)
(28,28)-(28,30)
(28,31)-(28,33)
*)

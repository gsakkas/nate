
let rec digitsOfInt n =
  if n <= 0
  then []
  else List.rev ((n mod 10) :: (List.rev (digitsOfInt (n / 10))));;

let rec sumList xs =
  match xs with | [] -> 0 | h::t -> h + (sumList t) | _ -> (-1);;

let x = [0];;

let rec additivePersistence n =
  if (sumList (digitsOfInt n)) < 9
  then (1 :: x; additivePersistence (sumList (digitsOfInt n)))
  else 1 :: x;
  sumList x;;


(* fix

let rec digitsOfInt n =
  if n <= 0
  then []
  else List.rev ((n mod 10) :: (List.rev (digitsOfInt (n / 10))));;

let rec sumList xs =
  match xs with | [] -> 0 | h::t -> h + (sumList t) | _ -> (-1);;

let x = [0];;

let rec additivePersistence n =
  if (sumList (digitsOfInt n)) < 9
  then (1 :: x; additivePersistence (sumList (digitsOfInt n)))
  else sumList x;;

*)

(* changed spans
(13,3)-(16,12)
(15,8)-(15,9)
(15,8)-(15,14)
(15,13)-(15,14)
*)

(* type error slice
(2,4)-(5,68)
(2,21)-(5,62)
(3,3)-(5,62)
(3,3)-(5,62)
(3,6)-(3,7)
(3,6)-(3,12)
(3,6)-(3,12)
(3,6)-(3,12)
(3,11)-(3,12)
(4,8)-(4,10)
(5,8)-(5,16)
(5,8)-(5,62)
(5,8)-(5,62)
(5,19)-(5,20)
(5,19)-(5,27)
(5,19)-(5,62)
(5,25)-(5,27)
(5,33)-(5,41)
(5,33)-(5,62)
(5,33)-(5,62)
(5,43)-(5,54)
(5,43)-(5,62)
(5,43)-(5,62)
(5,56)-(5,57)
(5,56)-(5,62)
(5,60)-(5,62)
(7,4)-(8,66)
(7,17)-(8,63)
(8,3)-(8,63)
(8,3)-(8,63)
(8,3)-(8,63)
(8,3)-(8,63)
(8,3)-(8,63)
(8,3)-(8,63)
(8,3)-(8,63)
(8,9)-(8,11)
(8,25)-(8,26)
(8,37)-(8,38)
(8,37)-(8,51)
(8,37)-(8,51)
(8,37)-(8,51)
(8,42)-(8,49)
(8,42)-(8,51)
(8,42)-(8,51)
(8,50)-(8,51)
(8,61)-(8,63)
(10,4)-(10,14)
(10,9)-(10,12)
(10,9)-(10,12)
(10,10)-(10,11)
(12,29)-(16,12)
(13,3)-(15,14)
(13,3)-(15,14)
(13,3)-(16,12)
(13,7)-(13,14)
(13,7)-(13,29)
(13,7)-(13,35)
(13,7)-(13,35)
(13,16)-(13,27)
(13,16)-(13,29)
(13,16)-(13,29)
(13,28)-(13,29)
(13,34)-(13,35)
(14,9)-(14,10)
(14,9)-(14,15)
(14,9)-(14,60)
(14,9)-(14,60)
(14,14)-(14,15)
(14,17)-(14,36)
(14,17)-(14,60)
(14,17)-(14,60)
(14,38)-(14,45)
(14,38)-(14,60)
(14,47)-(14,58)
(14,47)-(14,60)
(14,59)-(14,60)
(15,8)-(15,9)
(15,8)-(15,14)
(15,13)-(15,14)
*)

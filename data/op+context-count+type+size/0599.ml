
let rec clone x n =
  let rec clonehelper tx tn =
    match tn = 0 with
    | true  -> []
    | false  -> tx :: (clonehelper tx (tn - 1)) in
  clonehelper x (abs n);;

let padZero l1 l2 =
  match (List.length l1) > (List.length l2) with
  | true  ->
      (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2))
  | false  ->
      ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2);;

let rec removeZero l =
  let rec removeZH templ =
    match templ with
    | [] -> []
    | hd::tl -> if hd = 0 then removeZH tl else hd :: tl in
  removeZH l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match x with
      | (addend_a,addend_b) ->
          let prevcarry = match a with | (x,y) -> x in
          let new_carry = ((prevcarry + addend_a) + addend_b) / 10 in
          let digit = ((prevcarry + addend_a) + addend_b) mod 10 in
          (match a with
           | (x,c::d::y) -> (new_carry, (new_carry :: digit :: d :: y))
           | _ -> (new_carry, [new_carry; digit])) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l =
  let comb a b = match b with | [] -> [a] | hd::tl -> List.append [a + hd] tl in
  let rec mBDhelper i x =
    match x with
    | [] -> []
    | hd::tl ->
        if (hd * i) > 9
        then ((hd * i) / 10) :: (comb ((hd * i) mod 10) (mBDhelper i tl))
        else (hd * i) :: (mBDhelper i tl) in
  mBDhelper i l;;

let bigMul l1 l2 =
  let f a x =
    match x with
    | (templ1,l2digit) ->
        let multres = mulByDigit l2digit templ1 in bigAdd (a @ [0]) multres in
  let base = (0, []) in
  let args =
    let rec argmaker x y =
      match y with
      | [] -> []
      | hd::tl -> if tl = [] then [(x, hd)] else (x, hd) :: (argmaker x tl) in
    argmaker l1 l2 in
  let (_,res) = List.fold_left f base args in res;;


(* fix

let rec clone x n =
  let rec clonehelper tx tn =
    match tn = 0 with
    | true  -> []
    | false  -> tx :: (clonehelper tx (tn - 1)) in
  clonehelper x (abs n);;

let padZero l1 l2 =
  match (List.length l1) > (List.length l2) with
  | true  ->
      (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2))
  | false  ->
      ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2);;

let rec removeZero l =
  let rec removeZH templ =
    match templ with
    | [] -> []
    | hd::tl -> if hd = 0 then removeZH tl else hd :: tl in
  removeZH l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match x with
      | (addend_a,addend_b) ->
          let prevcarry = match a with | (x,y) -> x in
          let new_carry = ((prevcarry + addend_a) + addend_b) / 10 in
          let digit = ((prevcarry + addend_a) + addend_b) mod 10 in
          (match a with
           | (x,c::d::y) -> (new_carry, (new_carry :: digit :: d :: y))
           | _ -> (new_carry, [new_carry; digit])) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l =
  let comb a b = match b with | [] -> [a] | hd::tl -> List.append [a + hd] tl in
  let rec mBDhelper i x =
    match x with
    | [] -> []
    | hd::tl ->
        if (hd * i) > 9
        then ((hd * i) / 10) :: (comb ((hd * i) mod 10) (mBDhelper i tl))
        else (hd * i) :: (mBDhelper i tl) in
  mBDhelper i l;;

let bigMul l1 l2 =
  let f a x =
    match x with
    | (l2digit,templ1) ->
        let (l2digit2,templ12) = a in
        let multres = mulByDigit l2digit templ1 in
        (0, (bigAdd (templ12 @ [0]) multres)) in
  let base = (0, []) in
  let args =
    let rec argmaker x y =
      match y with
      | [] -> []
      | hd::tl -> if tl = [] then [(hd, x)] else (hd, x) :: (argmaker x tl) in
    argmaker l1 l2 in
  let (_,res) = List.fold_left f base args in res;;

*)

(* changed spans
(52,5)-(54,76)
(54,23)-(54,48)
(54,52)-(54,76)
(54,60)-(54,61)
(60,37)-(60,38)
(60,40)-(60,42)
(60,51)-(60,56)
(60,51)-(60,75)
(60,54)-(60,56)
(60,62)-(60,75)
*)

(* type error slice
(2,4)-(7,26)
(2,15)-(7,23)
(2,17)-(7,23)
(3,3)-(7,23)
(3,3)-(7,23)
(3,23)-(6,46)
(3,26)-(6,46)
(4,5)-(6,46)
(4,5)-(6,46)
(4,5)-(6,46)
(4,5)-(6,46)
(4,11)-(4,13)
(4,11)-(4,17)
(4,11)-(4,17)
(4,11)-(4,17)
(4,16)-(4,17)
(5,16)-(5,18)
(6,17)-(6,19)
(6,17)-(6,46)
(6,24)-(6,35)
(6,24)-(6,46)
(6,24)-(6,46)
(6,24)-(6,46)
(6,36)-(6,38)
(6,40)-(6,42)
(6,40)-(6,46)
(6,45)-(6,46)
(7,3)-(7,14)
(7,3)-(7,23)
(7,3)-(7,23)
(7,15)-(7,16)
(7,22)-(7,23)
(9,4)-(14,79)
(9,13)-(14,76)
(9,16)-(14,76)
(10,3)-(14,76)
(10,3)-(14,76)
(10,3)-(14,76)
(10,3)-(14,76)
(10,10)-(10,21)
(10,10)-(10,24)
(10,10)-(10,24)
(10,10)-(10,43)
(10,10)-(10,43)
(10,22)-(10,24)
(10,29)-(10,40)
(10,29)-(10,43)
(10,29)-(10,43)
(10,41)-(10,43)
(12,8)-(12,10)
(12,8)-(12,75)
(12,13)-(12,24)
(12,13)-(12,75)
(12,13)-(12,75)
(12,13)-(12,75)
(12,26)-(12,31)
(12,26)-(12,69)
(12,26)-(12,69)
(12,26)-(12,69)
(12,32)-(12,33)
(12,36)-(12,47)
(12,36)-(12,50)
(12,36)-(12,50)
(12,36)-(12,69)
(12,48)-(12,50)
(12,55)-(12,66)
(12,55)-(12,69)
(12,55)-(12,69)
(12,67)-(12,69)
(12,73)-(12,75)
(14,9)-(14,20)
(14,9)-(14,71)
(14,9)-(14,71)
(14,9)-(14,71)
(14,9)-(14,76)
(14,22)-(14,27)
(14,22)-(14,65)
(14,28)-(14,29)
(14,32)-(14,43)
(14,32)-(14,46)
(14,32)-(14,46)
(14,32)-(14,65)
(14,44)-(14,46)
(14,51)-(14,62)
(14,51)-(14,65)
(14,51)-(14,65)
(14,63)-(14,65)
(14,69)-(14,71)
(14,74)-(14,76)
(16,4)-(21,15)
(16,20)-(21,13)
(17,3)-(21,13)
(17,3)-(21,13)
(17,20)-(20,57)
(18,5)-(20,57)
(18,5)-(20,57)
(18,5)-(20,57)
(18,5)-(20,57)
(18,5)-(20,57)
(18,5)-(20,57)
(18,5)-(20,57)
(18,11)-(18,16)
(19,13)-(19,15)
(20,17)-(20,57)
(20,17)-(20,57)
(20,20)-(20,22)
(20,20)-(20,26)
(20,20)-(20,26)
(20,20)-(20,26)
(20,25)-(20,26)
(20,32)-(20,40)
(20,32)-(20,43)
(20,32)-(20,43)
(20,41)-(20,43)
(20,49)-(20,51)
(20,49)-(20,57)
(20,55)-(20,57)
(21,3)-(21,11)
(21,3)-(21,13)
(21,3)-(21,13)
(21,12)-(21,13)
(23,4)-(37,37)
(23,12)-(37,33)
(23,15)-(37,33)
(24,3)-(37,33)
(24,3)-(37,33)
(24,12)-(36,52)
(25,5)-(36,52)
(25,5)-(36,52)
(25,11)-(33,49)
(25,13)-(33,49)
(26,7)-(33,49)
(26,7)-(33,49)
(26,13)-(26,14)
(28,11)-(33,49)
(28,11)-(33,49)
(28,27)-(28,52)
(28,27)-(28,52)
(28,33)-(28,34)
(28,51)-(28,52)
(29,11)-(33,49)
(29,11)-(33,49)
(29,29)-(29,38)
(29,29)-(29,49)
(29,29)-(29,49)
(29,29)-(29,49)
(29,29)-(29,61)
(29,29)-(29,61)
(29,29)-(29,67)
(29,41)-(29,49)
(29,53)-(29,61)
(29,65)-(29,67)
(30,11)-(33,49)
(30,11)-(33,49)
(30,25)-(30,34)
(30,25)-(30,45)
(30,25)-(30,57)
(30,25)-(30,65)
(30,37)-(30,45)
(30,49)-(30,57)
(30,63)-(30,65)
(31,12)-(33,49)
(31,12)-(33,49)
(31,12)-(33,49)
(31,12)-(33,49)
(31,12)-(33,49)
(31,12)-(33,49)
(31,12)-(33,49)
(31,18)-(31,19)
(32,30)-(32,39)
(32,30)-(32,70)
(32,42)-(32,51)
(32,42)-(32,70)
(32,55)-(32,60)
(32,55)-(32,70)
(32,64)-(32,65)
(32,64)-(32,70)
(32,69)-(32,70)
(33,20)-(33,29)
(33,20)-(33,49)
(33,31)-(33,49)
(33,31)-(33,49)
(33,32)-(33,41)
(33,43)-(33,48)
(34,5)-(36,52)
(34,5)-(36,52)
(34,17)-(34,18)
(34,17)-(34,22)
(34,20)-(34,22)
(35,5)-(36,52)
(35,5)-(36,52)
(35,16)-(35,24)
(35,16)-(35,44)
(35,16)-(35,44)
(35,26)-(35,38)
(35,26)-(35,44)
(35,26)-(35,44)
(35,26)-(35,44)
(35,39)-(35,41)
(35,42)-(35,44)
(36,5)-(36,52)
(36,5)-(36,52)
(36,19)-(36,33)
(36,19)-(36,45)
(36,19)-(36,45)
(36,19)-(36,45)
(36,19)-(36,45)
(36,34)-(36,35)
(36,36)-(36,40)
(36,41)-(36,45)
(36,49)-(36,52)
(37,3)-(37,13)
(37,3)-(37,33)
(37,3)-(37,33)
(37,15)-(37,18)
(37,15)-(37,33)
(37,15)-(37,33)
(37,20)-(37,27)
(37,20)-(37,33)
(37,20)-(37,33)
(37,20)-(37,33)
(37,28)-(37,30)
(37,31)-(37,33)
(39,4)-(48,18)
(39,20)-(48,16)
(39,22)-(48,16)
(40,3)-(48,16)
(40,3)-(48,16)
(40,12)-(40,78)
(40,14)-(40,78)
(40,18)-(40,78)
(40,18)-(40,78)
(40,18)-(40,78)
(40,18)-(40,78)
(40,18)-(40,78)
(40,18)-(40,78)
(40,24)-(40,25)
(40,39)-(40,42)
(40,39)-(40,42)
(40,40)-(40,41)
(40,55)-(40,66)
(40,55)-(40,78)
(40,55)-(40,78)
(40,67)-(40,75)
(40,67)-(40,75)
(40,68)-(40,69)
(40,68)-(40,74)
(40,68)-(40,74)
(40,68)-(40,74)
(40,72)-(40,74)
(40,76)-(40,78)
(41,3)-(48,16)
(41,3)-(48,16)
(41,21)-(47,41)
(41,23)-(47,41)
(42,5)-(47,41)
(42,5)-(47,41)
(42,5)-(47,41)
(42,5)-(47,41)
(42,5)-(47,41)
(42,5)-(47,41)
(42,5)-(47,41)
(42,11)-(42,12)
(43,13)-(43,15)
(45,9)-(47,41)
(45,13)-(45,15)
(45,13)-(45,19)
(45,13)-(45,19)
(45,13)-(45,19)
(45,13)-(45,24)
(45,13)-(45,24)
(45,18)-(45,19)
(45,23)-(45,24)
(46,16)-(46,18)
(46,16)-(46,22)
(46,16)-(46,28)
(46,16)-(46,72)
(46,21)-(46,22)
(46,26)-(46,28)
(46,34)-(46,38)
(46,34)-(46,72)
(46,34)-(46,72)
(46,41)-(46,43)
(46,41)-(46,47)
(46,41)-(46,55)
(46,46)-(46,47)
(46,53)-(46,55)
(46,58)-(46,67)
(46,58)-(46,72)
(46,58)-(46,72)
(46,58)-(46,72)
(46,68)-(46,69)
(46,70)-(46,72)
(47,15)-(47,17)
(47,15)-(47,21)
(47,15)-(47,41)
(47,20)-(47,21)
(47,27)-(47,36)
(47,27)-(47,41)
(47,37)-(47,38)
(47,39)-(47,41)
(48,3)-(48,12)
(48,3)-(48,16)
(48,3)-(48,16)
(48,3)-(48,16)
(48,13)-(48,14)
(48,15)-(48,16)
(50,4)-(62,52)
(50,12)-(62,50)
(50,15)-(62,50)
(51,3)-(62,50)
(51,3)-(62,50)
(51,9)-(54,76)
(51,11)-(54,76)
(52,5)-(54,76)
(52,5)-(54,76)
(52,11)-(52,12)
(54,9)-(54,76)
(54,9)-(54,76)
(54,23)-(54,33)
(54,23)-(54,48)
(54,23)-(54,48)
(54,23)-(54,48)
(54,34)-(54,41)
(54,42)-(54,48)
(54,52)-(54,58)
(54,52)-(54,76)
(54,52)-(54,76)
(54,52)-(54,76)
(54,60)-(54,61)
(54,60)-(54,67)
(54,60)-(54,67)
(54,60)-(54,67)
(54,62)-(54,63)
(54,64)-(54,67)
(54,64)-(54,67)
(54,65)-(54,66)
(54,69)-(54,76)
(55,3)-(62,50)
(55,3)-(62,50)
(55,15)-(55,16)
(55,15)-(55,20)
(55,18)-(55,20)
(56,3)-(62,50)
(56,3)-(62,50)
(57,5)-(61,19)
(57,5)-(61,19)
(57,22)-(60,75)
(57,24)-(60,75)
(58,7)-(60,75)
(58,7)-(60,75)
(58,7)-(60,75)
(58,7)-(60,75)
(58,7)-(60,75)
(58,7)-(60,75)
(58,7)-(60,75)
(58,13)-(58,14)
(59,15)-(59,17)
(60,19)-(60,75)
(60,19)-(60,75)
(60,22)-(60,24)
(60,22)-(60,29)
(60,22)-(60,29)
(60,22)-(60,29)
(60,27)-(60,29)
(60,35)-(60,44)
(60,35)-(60,44)
(60,37)-(60,38)
(60,37)-(60,42)
(60,40)-(60,42)
(60,51)-(60,52)
(60,51)-(60,56)
(60,51)-(60,75)
(60,54)-(60,56)
(60,62)-(60,70)
(60,62)-(60,75)
(60,62)-(60,75)
(60,62)-(60,75)
(60,71)-(60,72)
(60,73)-(60,75)
(61,5)-(61,13)
(61,5)-(61,19)
(61,5)-(61,19)
(61,5)-(61,19)
(61,14)-(61,16)
(61,17)-(61,19)
(62,3)-(62,50)
(62,3)-(62,50)
(62,17)-(62,31)
(62,17)-(62,43)
(62,17)-(62,43)
(62,17)-(62,43)
(62,17)-(62,43)
(62,32)-(62,33)
(62,34)-(62,38)
(62,39)-(62,43)
(62,47)-(62,50)
*)

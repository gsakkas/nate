
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | MyExpr1 of expr* expr* expr
  | MyExpr2 of expr;;

let rec exprToString ex =
  match ex with
  | VarX  -> "x"
  | VarY  -> "y"
  | Sine e -> "sin(pi*" ^ ((exprToString e) ^ ")")
  | Cosine e -> "cos(pi*" ^ ((exprToString e) ^ ")")
  | Average (e1,e2) ->
      "((" ^ ((exprToString e1) ^ (" + " ^ ((exprToString e2) ^ ")/2)")))
  | Times (e1,e2) -> (exprToString e1) ^ ("*" ^ (exprToString e2))
  | Thresh (e1,e2,e3,e4) ->
      "(" ^
        ((exprToString e1) ^
           ("<" ^
              ((exprToString e2) ^
                 ("?" ^
                    ((exprToString e3) ^ (":" ^ ((exprToString e4) ^ ")")))))))
  | MyExpr1 (e1,e2,e3) ->
      "(sqrt(" ^
        ((exprToString e1) ^
           (")*sqrt(" ^ ((exprToString e2) ^ ((")*" exprToString e3) ^ ")"))));;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | MyExpr1 of expr* expr* expr
  | MyExpr2 of expr;;

let rec exprToString ex =
  match ex with
  | VarX  -> "x"
  | VarY  -> "y"
  | Sine e -> "sin(pi*" ^ ((exprToString e) ^ ")")
  | Cosine e -> "cos(pi*" ^ ((exprToString e) ^ ")")
  | Average (e1,e2) ->
      "((" ^ ((exprToString e1) ^ (" + " ^ ((exprToString e2) ^ ")/2)")))
  | Times (e1,e2) -> (exprToString e1) ^ ("*" ^ (exprToString e2))
  | Thresh (e1,e2,e3,e4) ->
      "(" ^
        ((exprToString e1) ^
           ("<" ^
              ((exprToString e2) ^
                 ("?" ^
                    ((exprToString e3) ^ (":" ^ ((exprToString e4) ^ ")")))))))
  | MyExpr1 (e1,e2,e3) ->
      "(sqrt(" ^
        ((exprToString e1) ^
           (")*sqrt(" ^
              ((exprToString e2) ^ (")*" ^ ((exprToString e3) ^ ")")))));;

*)

(* changed spans
(32,48)-(32,68)
(32,53)-(32,65)
*)

(* type error slice
(13,22)-(32,75)
(14,3)-(32,75)
(14,3)-(32,75)
(14,3)-(32,75)
(14,3)-(32,75)
(14,3)-(32,75)
(14,3)-(32,75)
(14,3)-(32,75)
(14,3)-(32,75)
(14,3)-(32,75)
(14,3)-(32,75)
(14,3)-(32,75)
(14,3)-(32,75)
(14,3)-(32,75)
(14,3)-(32,75)
(14,3)-(32,75)
(14,3)-(32,75)
(14,3)-(32,75)
(14,3)-(32,75)
(14,9)-(14,11)
(17,15)-(17,24)
(17,15)-(17,50)
(17,25)-(17,26)
(17,29)-(17,41)
(17,29)-(17,43)
(17,29)-(17,43)
(17,29)-(17,50)
(17,29)-(17,50)
(17,42)-(17,43)
(17,45)-(17,46)
(17,47)-(17,50)
(18,17)-(18,26)
(18,17)-(18,52)
(18,27)-(18,28)
(18,31)-(18,43)
(18,31)-(18,45)
(18,31)-(18,52)
(18,44)-(18,45)
(18,47)-(18,48)
(18,49)-(18,52)
(20,7)-(20,11)
(20,7)-(20,71)
(20,12)-(20,13)
(20,16)-(20,28)
(20,16)-(20,31)
(20,16)-(20,71)
(20,29)-(20,31)
(20,33)-(20,34)
(20,36)-(20,41)
(20,36)-(20,71)
(20,42)-(20,43)
(20,46)-(20,58)
(20,46)-(20,61)
(20,46)-(20,71)
(20,59)-(20,61)
(20,63)-(20,64)
(20,65)-(20,71)
(21,23)-(21,35)
(21,23)-(21,38)
(21,23)-(21,65)
(21,36)-(21,38)
(21,40)-(21,41)
(21,43)-(21,46)
(21,43)-(21,65)
(21,47)-(21,48)
(21,50)-(21,62)
(21,50)-(21,65)
(21,63)-(21,65)
(23,7)-(23,10)
(23,7)-(28,73)
(23,11)-(23,12)
(24,11)-(24,23)
(24,11)-(24,26)
(24,11)-(28,73)
(24,24)-(24,26)
(24,28)-(24,29)
(25,13)-(25,16)
(25,13)-(28,73)
(25,17)-(25,18)
(26,17)-(26,29)
(26,17)-(26,32)
(26,17)-(28,73)
(26,30)-(26,32)
(26,34)-(26,35)
(27,19)-(27,22)
(27,19)-(28,73)
(27,23)-(27,24)
(28,23)-(28,35)
(28,23)-(28,38)
(28,23)-(28,73)
(28,36)-(28,38)
(28,40)-(28,41)
(28,43)-(28,46)
(28,43)-(28,73)
(28,47)-(28,48)
(28,51)-(28,63)
(28,51)-(28,66)
(28,51)-(28,73)
(28,64)-(28,66)
(28,68)-(28,69)
(28,70)-(28,73)
(30,7)-(30,15)
(30,16)-(30,17)
(31,11)-(31,23)
(31,11)-(31,26)
(31,24)-(31,26)
(31,28)-(31,29)
(32,13)-(32,22)
(32,23)-(32,24)
(32,27)-(32,39)
(32,27)-(32,42)
(32,40)-(32,42)
(32,44)-(32,45)
(32,48)-(32,52)
(32,48)-(32,68)
(32,53)-(32,65)
(32,66)-(32,68)
(32,70)-(32,71)
*)

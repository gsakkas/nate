
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  match depth with
  | 0 -> let num = rand (1, 10) in if num > 3 then buildX () else buildY ()
  | 1 ->
      let num = rand (1, 10) in
      if (num mod 2) = 0
      then buildSine (build (rand, (depth - 1)))
      else buildCosine (build (rand, (depth - 1)))
  | 2 ->
      let num = rand (1, 30) in
      if (num mod 2) == 0
      then
        buildTimes
          ((buildSine (build (rand, (depth - 1)))),
            (build (rand, (depth - 1))))
      else
        buildTimes
          ((buildCosine (build (rand, (depth - 1)))),
            (build (rand, (depth - 1))))
  | 3 ->
      let num = rand (1, 50) in
      if (num mod 2) = 0
      then
        buildTimes
          ((buildAverage
              ((build (rand, (depth - 1))), (build (rand, (depth - 1))))),
            (buildCosine (build (rand, (depth - 1)))))
      else
        buildTimes
          ((buildAverage
              ((build (rand, (depth - 1))), (build (rand, (depth - 1))))),
            (buildSine (build (rand, (depth - 1)))))
  | 4 ->
      buildTimes ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
  | 5 ->
      let num = rand (1, 10) in
      if num = 1
      then buildSine (buildSine (buildSine (build (rand, (depth - 1)))))
      else
        if num = 2
        then
          buildCosine (buildCosine (buildCosine (build (rand, (depth - 1)))))
        else
          if num = 3
          then buildSine (buildCosine (build (rand, (depth - 1))))
          else buildCosine (buildSine (build (rand, (depth - 1))))
  | 6 ->
      buildAverage ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
  | 7 ->
      buildTimes ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
  | 8 ->
      buildTimes
        (buildAverage
           ((build (rand, (depth - 1))), (build (rand, (depth - 1)))))
  | _ -> build (rand, (depth - 1));;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  match depth with
  | 0 -> let num = rand (1, 10) in if num > 3 then buildX () else buildY ()
  | 1 ->
      let num = rand (1, 10) in
      if (num mod 2) = 0
      then buildSine (build (rand, (depth - 1)))
      else buildCosine (build (rand, (depth - 1)))
  | 2 ->
      let num = rand (1, 30) in
      if (num mod 2) == 0
      then
        buildTimes
          ((buildSine (build (rand, (depth - 1)))),
            (build (rand, (depth - 1))))
      else
        buildTimes
          ((buildCosine (build (rand, (depth - 1)))),
            (build (rand, (depth - 1))))
  | 3 ->
      let num = rand (1, 50) in
      if (num mod 2) = 0
      then
        buildTimes
          ((buildAverage
              ((build (rand, (depth - 1))), (build (rand, (depth - 1))))),
            (buildCosine (build (rand, (depth - 1)))))
      else
        buildTimes
          ((buildAverage
              ((build (rand, (depth - 1))), (build (rand, (depth - 1))))),
            (buildSine (build (rand, (depth - 1)))))
  | 4 ->
      buildTimes ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
  | 5 ->
      let num = rand (1, 10) in
      if num = 1
      then buildSine (buildSine (buildSine (build (rand, (depth - 1)))))
      else
        if num = 2
        then
          buildCosine (buildCosine (buildCosine (build (rand, (depth - 1)))))
        else
          if num = 3
          then buildSine (buildCosine (build (rand, (depth - 1))))
          else buildCosine (buildSine (build (rand, (depth - 1))))
  | 6 ->
      buildAverage ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
  | 7 ->
      buildTimes ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
  | 8 ->
      buildTimes
        ((buildAverage
            ((build (rand, (depth - 1))), (build (rand, (depth - 1))))),
          (buildSine (build (rand, (depth - 1)))))
  | _ -> build (rand, (depth - 1));;

*)

(* changed spans
(48,17)-(48,40)
(48,46)-(48,69)
(53,17)-(53,40)
(53,46)-(53,69)
(56,20)-(56,43)
(56,49)-(56,72)
(70,22)-(70,45)
(70,51)-(70,74)
(72,20)-(72,43)
(72,49)-(72,72)
(75,10)-(75,22)
(75,10)-(76,66)
(76,14)-(76,19)
(77,10)-(77,15)
(77,24)-(77,29)
(77,32)-(77,33)
*)

(* type error slice
(11,4)-(11,46)
(11,19)-(11,43)
(11,28)-(11,43)
(11,37)-(11,39)
(11,41)-(11,43)
(13,4)-(13,31)
(13,17)-(13,29)
(13,21)-(13,29)
(13,28)-(13,29)
(15,4)-(15,27)
(15,15)-(15,25)
(15,19)-(15,25)
(15,24)-(15,25)
(17,4)-(17,42)
(17,17)-(17,39)
(17,26)-(17,39)
(17,33)-(17,35)
(17,37)-(17,39)
(19,4)-(19,23)
(19,12)-(19,21)
(19,12)-(19,21)
(19,17)-(19,21)
(21,4)-(21,23)
(21,12)-(21,21)
(21,12)-(21,21)
(21,17)-(21,21)
(23,16)-(77,33)
(24,3)-(77,33)
(24,3)-(77,33)
(24,3)-(77,33)
(24,3)-(77,33)
(24,3)-(77,33)
(24,3)-(77,33)
(24,3)-(77,33)
(24,3)-(77,33)
(24,3)-(77,33)
(24,3)-(77,33)
(24,9)-(24,14)
(25,10)-(25,76)
(25,10)-(25,76)
(25,20)-(25,24)
(25,20)-(25,31)
(25,20)-(25,31)
(25,26)-(25,27)
(25,26)-(25,31)
(25,29)-(25,31)
(25,36)-(25,76)
(25,36)-(25,76)
(25,39)-(25,42)
(25,39)-(25,46)
(25,39)-(25,46)
(25,39)-(25,46)
(25,45)-(25,46)
(25,52)-(25,58)
(25,52)-(25,61)
(25,59)-(25,61)
(25,67)-(25,73)
(25,67)-(25,76)
(25,74)-(25,76)
(27,7)-(30,48)
(27,7)-(30,48)
(27,17)-(27,21)
(27,17)-(27,28)
(27,23)-(27,24)
(27,23)-(27,28)
(27,26)-(27,28)
(28,7)-(30,48)
(28,7)-(30,48)
(28,11)-(28,14)
(28,11)-(28,20)
(28,11)-(28,25)
(28,11)-(28,25)
(28,19)-(28,20)
(28,24)-(28,25)
(29,12)-(29,21)
(29,12)-(29,46)
(29,12)-(29,46)
(29,23)-(29,28)
(29,23)-(29,46)
(29,23)-(29,46)
(29,30)-(29,34)
(29,30)-(29,46)
(29,37)-(29,42)
(29,37)-(29,46)
(29,37)-(29,46)
(29,45)-(29,46)
(30,12)-(30,23)
(30,12)-(30,48)
(30,25)-(30,30)
(30,25)-(30,48)
(30,32)-(30,36)
(30,32)-(30,48)
(30,39)-(30,44)
(30,39)-(30,48)
(30,47)-(30,48)
(32,7)-(41,37)
(32,7)-(41,37)
(32,17)-(32,21)
(32,17)-(32,28)
(32,23)-(32,24)
(32,23)-(32,28)
(32,26)-(32,28)
(33,7)-(41,37)
(33,7)-(41,37)
(33,11)-(33,14)
(33,11)-(33,20)
(33,11)-(33,26)
(33,11)-(33,26)
(33,19)-(33,20)
(33,25)-(33,26)
(35,9)-(35,19)
(35,9)-(37,37)
(35,9)-(37,37)
(36,13)-(36,22)
(36,13)-(36,47)
(36,13)-(37,37)
(36,24)-(36,29)
(36,24)-(36,47)
(36,31)-(36,35)
(36,31)-(36,47)
(36,38)-(36,43)
(36,38)-(36,47)
(36,46)-(36,47)
(37,14)-(37,19)
(37,14)-(37,37)
(37,21)-(37,25)
(37,21)-(37,37)
(37,28)-(37,33)
(37,28)-(37,37)
(37,36)-(37,37)
(39,9)-(39,19)
(39,9)-(41,37)
(40,13)-(40,24)
(40,13)-(40,49)
(40,13)-(41,37)
(40,26)-(40,31)
(40,26)-(40,49)
(40,33)-(40,37)
(40,33)-(40,49)
(40,40)-(40,45)
(40,40)-(40,49)
(40,48)-(40,49)
(41,14)-(41,19)
(41,14)-(41,37)
(41,21)-(41,25)
(41,21)-(41,37)
(41,28)-(41,33)
(41,28)-(41,37)
(41,36)-(41,37)
(43,7)-(54,48)
(43,7)-(54,48)
(43,17)-(43,21)
(43,17)-(43,28)
(43,23)-(43,24)
(43,23)-(43,28)
(43,26)-(43,28)
(44,7)-(54,48)
(44,7)-(54,48)
(44,11)-(44,14)
(44,11)-(44,20)
(44,11)-(44,25)
(44,11)-(44,25)
(44,19)-(44,20)
(44,24)-(44,25)
(46,9)-(46,19)
(46,9)-(49,50)
(46,9)-(49,50)
(47,13)-(47,25)
(47,13)-(48,69)
(47,13)-(49,50)
(48,17)-(48,22)
(48,17)-(48,40)
(48,17)-(48,69)
(48,24)-(48,28)
(48,24)-(48,40)
(48,31)-(48,36)
(48,31)-(48,40)
(48,39)-(48,40)
(48,46)-(48,51)
(48,46)-(48,69)
(48,53)-(48,57)
(48,53)-(48,69)
(48,60)-(48,65)
(48,60)-(48,69)
(48,68)-(48,69)
(49,14)-(49,25)
(49,14)-(49,50)
(49,27)-(49,32)
(49,27)-(49,50)
(49,34)-(49,38)
(49,34)-(49,50)
(49,41)-(49,46)
(49,41)-(49,50)
(49,49)-(49,50)
(51,9)-(51,19)
(51,9)-(54,48)
(52,13)-(52,25)
(52,13)-(53,69)
(52,13)-(54,48)
(53,17)-(53,22)
(53,17)-(53,40)
(53,17)-(53,69)
(53,24)-(53,28)
(53,24)-(53,40)
(53,31)-(53,36)
(53,31)-(53,40)
(53,39)-(53,40)
(53,46)-(53,51)
(53,46)-(53,69)
(53,53)-(53,57)
(53,53)-(53,69)
(53,60)-(53,65)
(53,60)-(53,69)
(53,68)-(53,69)
(54,14)-(54,23)
(54,14)-(54,48)
(54,25)-(54,30)
(54,25)-(54,48)
(54,32)-(54,36)
(54,32)-(54,48)
(54,39)-(54,44)
(54,39)-(54,48)
(54,47)-(54,48)
(56,7)-(56,17)
(56,7)-(56,72)
(56,20)-(56,25)
(56,20)-(56,43)
(56,20)-(56,72)
(56,27)-(56,31)
(56,27)-(56,43)
(56,34)-(56,39)
(56,34)-(56,43)
(56,42)-(56,43)
(56,49)-(56,54)
(56,49)-(56,72)
(56,56)-(56,60)
(56,56)-(56,72)
(56,63)-(56,68)
(56,63)-(56,72)
(56,71)-(56,72)
(58,7)-(68,63)
(58,7)-(68,63)
(58,17)-(58,21)
(58,17)-(58,28)
(58,23)-(58,24)
(58,23)-(58,28)
(58,26)-(58,28)
(59,7)-(68,63)
(59,10)-(59,13)
(59,10)-(59,17)
(59,10)-(59,17)
(59,16)-(59,17)
(60,12)-(60,21)
(60,12)-(60,68)
(60,23)-(60,32)
(60,23)-(60,68)
(60,34)-(60,43)
(60,34)-(60,68)
(60,45)-(60,50)
(60,45)-(60,68)
(60,52)-(60,56)
(60,52)-(60,68)
(60,59)-(60,64)
(60,59)-(60,68)
(60,67)-(60,68)
(62,9)-(68,63)
(62,12)-(62,15)
(62,12)-(62,19)
(62,12)-(62,19)
(62,18)-(62,19)
(64,11)-(64,22)
(64,11)-(64,73)
(64,24)-(64,35)
(64,24)-(64,73)
(64,37)-(64,48)
(64,37)-(64,73)
(64,50)-(64,55)
(64,50)-(64,73)
(64,57)-(64,61)
(64,57)-(64,73)
(64,64)-(64,69)
(64,64)-(64,73)
(64,72)-(64,73)
(66,11)-(68,63)
(66,14)-(66,17)
(66,14)-(66,21)
(66,14)-(66,21)
(66,20)-(66,21)
(67,16)-(67,25)
(67,16)-(67,63)
(67,27)-(67,38)
(67,27)-(67,63)
(67,40)-(67,45)
(67,40)-(67,63)
(67,47)-(67,51)
(67,47)-(67,63)
(67,54)-(67,59)
(67,54)-(67,63)
(67,62)-(67,63)
(68,16)-(68,27)
(68,16)-(68,63)
(68,29)-(68,38)
(68,29)-(68,63)
(68,40)-(68,45)
(68,40)-(68,63)
(68,47)-(68,51)
(68,47)-(68,63)
(68,54)-(68,59)
(68,54)-(68,63)
(68,62)-(68,63)
(70,7)-(70,19)
(70,7)-(70,74)
(70,22)-(70,27)
(70,22)-(70,45)
(70,22)-(70,74)
(70,29)-(70,33)
(70,29)-(70,45)
(70,36)-(70,41)
(70,36)-(70,45)
(70,44)-(70,45)
(70,51)-(70,56)
(70,51)-(70,74)
(70,58)-(70,62)
(70,58)-(70,74)
(70,65)-(70,70)
(70,65)-(70,74)
(70,73)-(70,74)
(72,7)-(72,17)
(72,7)-(72,72)
(72,20)-(72,25)
(72,20)-(72,43)
(72,20)-(72,72)
(72,27)-(72,31)
(72,27)-(72,43)
(72,34)-(72,39)
(72,34)-(72,43)
(72,42)-(72,43)
(72,49)-(72,54)
(72,49)-(72,72)
(72,56)-(72,60)
(72,56)-(72,72)
(72,63)-(72,68)
(72,63)-(72,72)
(72,71)-(72,72)
(74,7)-(74,17)
(74,7)-(76,66)
(74,7)-(76,66)
(75,10)-(75,22)
(75,10)-(76,66)
(76,14)-(76,19)
(76,14)-(76,37)
(76,14)-(76,66)
(76,21)-(76,25)
(76,21)-(76,37)
(76,28)-(76,33)
(76,28)-(76,37)
(76,36)-(76,37)
(76,43)-(76,48)
(76,43)-(76,66)
(76,50)-(76,54)
(76,50)-(76,66)
(76,57)-(76,62)
(76,57)-(76,66)
(76,65)-(76,66)
*)

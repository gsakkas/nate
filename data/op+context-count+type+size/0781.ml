
let rec clone x n =
  let rec helper x n acc =
    if n <= 0 then acc else helper x (n - 1) (x :: acc) in
  helper x n [];;

let padZero l1 l2 =
  let len1 = List.length l1 in
  let len2 = List.length l2 in
  if len1 > len2
  then (l1, ((clone 0 (len1 - len2)) @ l2))
  else (((clone 0 (len2 - len1)) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | 0::t -> removeZero t | t -> t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (x1,x2) = x in
      let (a1,a2) = a in
      let xx = (x1 + x2) + a1 in
      if xx > 9 then (1, ((xx - 10) :: a2)) else (0, (xx :: a2)) in
    let base = (0, []) in
    let args = List.combine (List.rev (0 :: l1)) (List.rev (0 :: l2)) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l =
  let rec helper i l acc s =
    let l2 = List.rev l in
    match l2 with
    | [] -> s :: acc
    | h::t ->
        let n = (i * h) + s in
        if n > 9
        then helper i t ((n mod 10) :: acc) (n / 10)
        else helper i t (n :: acc) 0 in
  helper i l [] 0;;

let bigMul l1 l2 =
  let f a x =
    let (v,l) = x in
    let (ac,la) = a in
    let mul = mulByDigit v l in
    let shift = mulByDigit ac a in ((ac * 10), (bigAdd mul shift)) in
  let base = (1, []) in
  let args = List.map (fun x  -> (x, l2)) l1 in
  let (_,res) = List.fold_left f base args in res;;


(* fix

let rec clone x n =
  let rec helper x n acc =
    if n <= 0 then acc else helper x (n - 1) (x :: acc) in
  helper x n [];;

let padZero l1 l2 =
  let len1 = List.length l1 in
  let len2 = List.length l2 in
  if len1 > len2
  then (l1, ((clone 0 (len1 - len2)) @ l2))
  else (((clone 0 (len2 - len1)) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | 0::t -> removeZero t | t -> t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (x1,x2) = x in
      let (a1,a2) = a in
      let xx = (x1 + x2) + a1 in
      if xx > 9 then (1, ((xx - 10) :: a2)) else (0, (xx :: a2)) in
    let base = (0, []) in
    let args = List.combine (List.rev (0 :: l1)) (List.rev (0 :: l2)) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l =
  let rec helper i l acc s =
    let l2 = List.rev l in
    match l2 with
    | [] -> s :: acc
    | h::t ->
        let n = (i * h) + s in
        if n > 9
        then helper i t ((n mod 10) :: acc) (n / 10)
        else helper i t (n :: acc) 0 in
  helper i l [] 0;;

let bigMul l1 l2 =
  let f a x =
    let (v,l) = x in
    let (ac,la) = a in
    let mul = mulByDigit v l in
    let shift = mulByDigit ac mul in ((ac * 10), (bigAdd shift la)) in
  let base = (1, []) in
  let args = List.map (fun x  -> (x, (List.rev l2))) l1 in
  let (_,res) = List.fold_left f base args in res;;

*)

(* changed spans
(46,31)-(46,32)
(46,56)-(46,59)
(47,3)-(49,50)
(48,38)-(48,40)
*)

(* type error slice
(2,4)-(5,18)
(2,15)-(5,16)
(2,17)-(5,16)
(3,3)-(5,16)
(3,3)-(5,16)
(3,18)-(4,55)
(3,20)-(4,55)
(3,22)-(4,55)
(4,5)-(4,55)
(4,5)-(4,55)
(4,8)-(4,9)
(4,8)-(4,14)
(4,8)-(4,14)
(4,8)-(4,14)
(4,13)-(4,14)
(4,20)-(4,23)
(4,29)-(4,35)
(4,29)-(4,55)
(4,29)-(4,55)
(4,29)-(4,55)
(4,29)-(4,55)
(4,36)-(4,37)
(4,39)-(4,40)
(4,39)-(4,44)
(4,43)-(4,44)
(4,47)-(4,48)
(4,47)-(4,55)
(4,52)-(4,55)
(5,3)-(5,9)
(5,3)-(5,16)
(5,3)-(5,16)
(5,3)-(5,16)
(5,10)-(5,11)
(5,12)-(5,13)
(5,14)-(5,16)
(7,4)-(12,46)
(7,13)-(12,43)
(7,16)-(12,43)
(8,3)-(12,43)
(8,3)-(12,43)
(8,14)-(8,25)
(8,14)-(8,28)
(8,14)-(8,28)
(8,26)-(8,28)
(9,3)-(12,43)
(9,3)-(12,43)
(9,14)-(9,25)
(9,14)-(9,28)
(9,14)-(9,28)
(9,26)-(9,28)
(10,3)-(12,43)
(10,3)-(12,43)
(10,6)-(10,10)
(10,6)-(10,17)
(10,6)-(10,17)
(10,13)-(10,17)
(11,9)-(11,11)
(11,9)-(11,42)
(11,15)-(11,20)
(11,15)-(11,35)
(11,15)-(11,35)
(11,15)-(11,35)
(11,15)-(11,42)
(11,15)-(11,42)
(11,15)-(11,42)
(11,21)-(11,22)
(11,24)-(11,28)
(11,24)-(11,35)
(11,31)-(11,35)
(11,38)-(11,39)
(11,40)-(11,42)
(12,11)-(12,16)
(12,11)-(12,31)
(12,11)-(12,38)
(12,11)-(12,38)
(12,11)-(12,38)
(12,11)-(12,43)
(12,17)-(12,18)
(12,20)-(12,24)
(12,20)-(12,31)
(12,27)-(12,31)
(12,34)-(12,35)
(12,36)-(12,38)
(12,41)-(12,43)
(14,20)-(15,58)
(15,3)-(15,58)
(15,3)-(15,58)
(15,3)-(15,58)
(15,3)-(15,58)
(15,9)-(15,10)
(15,24)-(15,26)
(15,37)-(15,47)
(15,37)-(15,49)
(15,57)-(15,58)
(17,4)-(27,37)
(17,12)-(27,33)
(17,15)-(27,33)
(18,3)-(27,33)
(18,12)-(26,52)
(19,5)-(26,52)
(19,11)-(23,63)
(19,13)-(23,63)
(20,7)-(23,63)
(20,21)-(20,22)
(21,7)-(23,63)
(21,21)-(21,22)
(22,17)-(22,19)
(22,22)-(22,24)
(22,28)-(22,30)
(23,40)-(23,42)
(24,5)-(26,52)
(24,17)-(24,22)
(24,20)-(24,22)
(25,16)-(25,28)
(25,16)-(25,68)
(25,30)-(25,38)
(25,30)-(25,47)
(25,45)-(25,47)
(25,51)-(25,59)
(25,51)-(25,68)
(25,66)-(25,68)
(26,19)-(26,33)
(26,19)-(26,45)
(26,19)-(26,45)
(26,34)-(26,35)
(26,36)-(26,40)
(27,15)-(27,18)
(27,15)-(27,33)
(27,20)-(27,27)
(27,20)-(27,33)
(27,20)-(27,33)
(27,20)-(27,33)
(27,28)-(27,30)
(27,31)-(27,33)
(29,4)-(39,20)
(29,20)-(39,18)
(29,22)-(39,18)
(30,18)-(38,37)
(30,20)-(38,37)
(30,22)-(38,37)
(30,26)-(38,37)
(31,5)-(38,37)
(31,14)-(31,22)
(31,14)-(31,24)
(31,14)-(31,24)
(31,23)-(31,24)
(32,5)-(38,37)
(32,5)-(38,37)
(32,5)-(38,37)
(32,5)-(38,37)
(32,11)-(32,13)
(33,13)-(33,14)
(33,13)-(33,21)
(33,18)-(33,21)
(35,9)-(38,37)
(35,9)-(38,37)
(35,18)-(35,19)
(35,18)-(35,23)
(35,18)-(35,23)
(35,18)-(35,23)
(35,18)-(35,28)
(35,18)-(35,28)
(35,22)-(35,23)
(35,27)-(35,28)
(36,9)-(38,37)
(36,9)-(38,37)
(36,12)-(36,13)
(36,12)-(36,17)
(36,12)-(36,17)
(36,16)-(36,17)
(37,14)-(37,20)
(37,14)-(37,52)
(37,14)-(37,52)
(37,14)-(37,52)
(37,14)-(37,52)
(37,14)-(37,52)
(37,21)-(37,22)
(37,23)-(37,24)
(37,27)-(37,28)
(37,27)-(37,35)
(37,27)-(37,43)
(37,33)-(37,35)
(37,40)-(37,43)
(37,46)-(37,47)
(37,46)-(37,52)
(37,50)-(37,52)
(38,14)-(38,20)
(38,14)-(38,37)
(38,21)-(38,22)
(38,23)-(38,24)
(38,26)-(38,27)
(38,26)-(38,34)
(38,31)-(38,34)
(38,36)-(38,37)
(39,10)-(39,11)
(39,12)-(39,13)
(39,14)-(39,16)
(41,4)-(49,52)
(41,12)-(49,50)
(41,15)-(49,50)
(42,3)-(49,50)
(42,3)-(49,50)
(42,9)-(46,65)
(42,11)-(46,65)
(43,5)-(46,65)
(43,5)-(46,65)
(43,17)-(43,18)
(44,5)-(46,65)
(44,5)-(46,65)
(44,19)-(44,20)
(45,5)-(46,65)
(45,5)-(46,65)
(45,15)-(45,25)
(45,15)-(45,29)
(45,15)-(45,29)
(45,26)-(45,27)
(45,28)-(45,29)
(46,5)-(46,65)
(46,5)-(46,65)
(46,17)-(46,27)
(46,17)-(46,32)
(46,17)-(46,32)
(46,28)-(46,30)
(46,31)-(46,32)
(46,38)-(46,65)
(46,49)-(46,55)
(46,49)-(46,65)
(46,49)-(46,65)
(46,49)-(46,65)
(46,56)-(46,59)
(46,60)-(46,65)
(47,3)-(49,50)
(47,3)-(49,50)
(47,15)-(47,20)
(47,18)-(47,20)
(48,3)-(49,50)
(48,3)-(49,50)
(48,14)-(48,22)
(48,14)-(48,45)
(48,14)-(48,45)
(48,14)-(48,45)
(48,24)-(48,40)
(48,35)-(48,36)
(48,35)-(48,40)
(48,38)-(48,40)
(48,43)-(48,45)
(49,3)-(49,50)
(49,3)-(49,50)
(49,17)-(49,31)
(49,17)-(49,43)
(49,17)-(49,43)
(49,17)-(49,43)
(49,17)-(49,43)
(49,32)-(49,33)
(49,34)-(49,38)
(49,39)-(49,43)
(49,47)-(49,50)
*)

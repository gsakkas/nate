
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth < 1
  then
    let base = rand (0, 2) in
    match base with
    | 0 -> buildX ()
    | 1 -> buildY ()
    | _ -> (if base < 0 then buildX () else buildY ())
  else
    (let recurse = rand (0, 5) in
     match recurse with
     | 0 -> buildSine (build (rand, (depth - 1)))
     | 1 -> buildCosine (build (rand, (depth - 1)))
     | 2 ->
         buildAverage
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 3 ->
         buildTimes
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 4 ->
         buildThresh
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
             (build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | _ ->
         if recurse > 2
         then buildCosine (rand, (depth - 1))
         else buildSine (rand, (depth - 1)));;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth < 1
  then
    let base = rand (0, 2) in
    match base with
    | 0 -> buildX ()
    | 1 -> buildY ()
    | _ -> (if base < 0 then buildX () else buildY ())
  else
    (let recurse = rand (0, 5) in
     match recurse with
     | 0 -> buildSine (build (rand, (depth - 1)))
     | 1 -> buildCosine (build (rand, (depth - 1)))
     | 2 ->
         buildAverage
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 3 ->
         buildTimes
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 4 ->
         buildThresh
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
             (build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | _ ->
         if recurse > 2
         then buildCosine (build (rand, (depth - 1)))
         else buildSine (build (rand, (depth - 1))));;

*)

(* changed spans
(40,14)-(40,37)
(40,43)-(40,66)
(43,14)-(43,37)
(43,43)-(43,66)
(50,28)-(50,44)
(51,26)-(51,42)
(51,33)-(51,38)
(51,41)-(51,42)
*)

(* type error slice
(11,4)-(11,46)
(11,19)-(11,43)
(11,28)-(11,43)
(11,37)-(11,39)
(11,41)-(11,43)
(13,4)-(13,31)
(13,17)-(13,29)
(13,21)-(13,29)
(13,28)-(13,29)
(15,4)-(15,27)
(15,15)-(15,25)
(15,19)-(15,25)
(15,24)-(15,25)
(17,4)-(17,70)
(17,18)-(17,67)
(17,39)-(17,67)
(17,47)-(17,48)
(17,50)-(17,51)
(17,53)-(17,59)
(17,61)-(17,67)
(19,4)-(19,42)
(19,17)-(19,39)
(19,26)-(19,39)
(19,33)-(19,35)
(19,37)-(19,39)
(21,4)-(21,23)
(21,12)-(21,21)
(21,12)-(21,21)
(21,17)-(21,21)
(23,4)-(23,23)
(23,12)-(23,21)
(23,12)-(23,21)
(23,17)-(23,21)
(25,16)-(51,42)
(26,3)-(51,42)
(26,3)-(51,42)
(26,6)-(26,11)
(26,6)-(26,15)
(26,6)-(26,15)
(26,6)-(26,15)
(26,14)-(26,15)
(28,5)-(32,54)
(28,5)-(32,54)
(28,16)-(28,20)
(28,16)-(28,26)
(28,16)-(28,26)
(28,22)-(28,23)
(28,22)-(28,26)
(28,25)-(28,26)
(29,5)-(32,54)
(29,5)-(32,54)
(29,5)-(32,54)
(29,5)-(32,54)
(29,5)-(32,54)
(29,5)-(32,54)
(29,11)-(29,15)
(30,12)-(30,18)
(30,12)-(30,21)
(30,19)-(30,21)
(31,12)-(31,18)
(31,12)-(31,21)
(31,19)-(31,21)
(32,13)-(32,54)
(32,13)-(32,54)
(32,16)-(32,20)
(32,16)-(32,24)
(32,16)-(32,24)
(32,16)-(32,24)
(32,23)-(32,24)
(32,30)-(32,36)
(32,30)-(32,39)
(32,37)-(32,39)
(32,45)-(32,51)
(32,45)-(32,54)
(32,52)-(32,54)
(34,6)-(51,42)
(34,6)-(51,42)
(34,20)-(34,24)
(34,20)-(34,30)
(34,26)-(34,27)
(34,26)-(34,30)
(34,29)-(34,30)
(35,6)-(51,42)
(35,6)-(51,42)
(35,6)-(51,42)
(35,6)-(51,42)
(35,6)-(51,42)
(35,6)-(51,42)
(35,6)-(51,42)
(35,6)-(51,42)
(35,6)-(51,42)
(35,6)-(51,42)
(35,6)-(51,42)
(35,6)-(51,42)
(35,12)-(35,19)
(36,13)-(36,22)
(36,13)-(36,47)
(36,13)-(36,47)
(36,24)-(36,29)
(36,24)-(36,47)
(36,24)-(36,47)
(36,31)-(36,35)
(36,31)-(36,47)
(36,38)-(36,43)
(36,38)-(36,47)
(36,46)-(36,47)
(37,13)-(37,24)
(37,13)-(37,49)
(37,26)-(37,31)
(37,26)-(37,49)
(37,33)-(37,37)
(37,33)-(37,49)
(37,40)-(37,45)
(37,40)-(37,49)
(37,48)-(37,49)
(39,10)-(39,22)
(39,10)-(40,66)
(40,14)-(40,19)
(40,14)-(40,37)
(40,14)-(40,66)
(40,21)-(40,25)
(40,21)-(40,37)
(40,28)-(40,33)
(40,28)-(40,37)
(40,36)-(40,37)
(40,43)-(40,48)
(40,43)-(40,66)
(40,50)-(40,54)
(40,50)-(40,66)
(40,57)-(40,62)
(40,57)-(40,66)
(40,65)-(40,66)
(42,10)-(42,20)
(42,10)-(43,66)
(43,14)-(43,19)
(43,14)-(43,37)
(43,14)-(43,66)
(43,21)-(43,25)
(43,21)-(43,37)
(43,28)-(43,33)
(43,28)-(43,37)
(43,36)-(43,37)
(43,43)-(43,48)
(43,43)-(43,66)
(43,50)-(43,54)
(43,50)-(43,66)
(43,57)-(43,62)
(43,57)-(43,66)
(43,65)-(43,66)
(45,10)-(45,21)
(45,10)-(47,67)
(46,14)-(46,19)
(46,14)-(46,37)
(46,14)-(47,67)
(46,21)-(46,25)
(46,21)-(46,37)
(46,28)-(46,33)
(46,28)-(46,37)
(46,36)-(46,37)
(46,43)-(46,48)
(46,43)-(46,66)
(46,50)-(46,54)
(46,50)-(46,66)
(46,57)-(46,62)
(46,57)-(46,66)
(46,65)-(46,66)
(47,15)-(47,20)
(47,15)-(47,38)
(47,22)-(47,26)
(47,22)-(47,38)
(47,29)-(47,34)
(47,29)-(47,38)
(47,37)-(47,38)
(47,44)-(47,49)
(47,44)-(47,67)
(47,51)-(47,55)
(47,51)-(47,67)
(47,58)-(47,63)
(47,58)-(47,67)
(47,66)-(47,67)
(49,10)-(51,42)
(49,10)-(51,42)
(49,13)-(49,20)
(49,13)-(49,24)
(49,13)-(49,24)
(49,23)-(49,24)
(50,15)-(50,26)
(50,15)-(50,44)
(50,15)-(50,44)
(50,28)-(50,32)
(50,28)-(50,44)
(50,35)-(50,40)
(50,35)-(50,44)
(50,43)-(50,44)
(51,15)-(51,24)
(51,15)-(51,42)
(51,15)-(51,42)
(51,26)-(51,30)
(51,26)-(51,42)
(51,33)-(51,38)
(51,33)-(51,42)
(51,41)-(51,42)
*)

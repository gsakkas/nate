
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) = (List.length l2)
  then (l1, l2)
  else
    if (List.length l1) > (List.length l2)
    then
      (let y = (clone 0 ((List.length l1) - (List.length l2))) @ l2 in
       (l1, y))
    else
      (let z = (clone 0 ((List.length l2) - (List.length l1))) @ l1 in
       (z, l2));;

let rec removeZero l = failwith "to be implemented";;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match x with
      | (d1,d2) ->
          (match a with
           | (carry,result) ->
               if ((d1 + d2) + carry) > 9
               then (1, ((((d1 + d2) + 1) - 10) :: result))
               else (0, ((d1 + d2) :: result))) in
    let base = (0, []) in
    let args = List.combine ((List.rev l1), (List.rev l2)) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) = (List.length l2)
  then (l1, l2)
  else
    if (List.length l1) > (List.length l2)
    then
      (let y = (clone 0 ((List.length l1) - (List.length l2))) @ l2 in
       (l1, y))
    else
      (let z = (clone 0 ((List.length l2) - (List.length l1))) @ l1 in
       (z, l2));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match x with
      | (d1,d2) ->
          (match a with
           | (carry,result) ->
               if ((d1 + d2) + carry) > 9
               then (1, ((((d1 + d2) + 1) - 10) :: result))
               else (0, ((d1 + d2) :: result))) in
    let base = (0, []) in
    let args = List.combine (List.rev l1) (List.rev l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(16,24)-(16,32)
(16,24)-(16,52)
(16,33)-(16,52)
(18,12)-(31,33)
(29,16)-(29,57)
(29,31)-(29,57)
(31,15)-(31,18)
(31,20)-(31,27)
(31,20)-(31,33)
(31,28)-(31,30)
(31,31)-(31,33)
*)

(* type error slice
(2,4)-(2,68)
(2,15)-(2,64)
(2,17)-(2,64)
(2,21)-(2,64)
(2,21)-(2,64)
(2,24)-(2,25)
(2,24)-(2,30)
(2,24)-(2,30)
(2,24)-(2,30)
(2,29)-(2,30)
(2,36)-(2,38)
(2,44)-(2,45)
(2,44)-(2,64)
(2,50)-(2,55)
(2,50)-(2,64)
(2,50)-(2,64)
(2,50)-(2,64)
(2,56)-(2,57)
(2,59)-(2,60)
(2,59)-(2,64)
(2,63)-(2,64)
(4,4)-(14,18)
(4,13)-(14,14)
(4,16)-(14,14)
(5,7)-(5,18)
(5,7)-(5,21)
(5,7)-(5,21)
(5,19)-(5,21)
(5,26)-(5,37)
(5,26)-(5,40)
(5,26)-(5,40)
(5,38)-(5,40)
(6,9)-(6,11)
(6,9)-(6,15)
(6,13)-(6,15)
(8,9)-(8,20)
(8,9)-(8,23)
(8,9)-(8,23)
(8,21)-(8,23)
(8,28)-(8,39)
(8,28)-(8,42)
(8,28)-(8,42)
(8,40)-(8,42)
(10,8)-(11,14)
(10,17)-(10,22)
(10,17)-(10,60)
(10,17)-(10,68)
(10,27)-(10,38)
(10,27)-(10,41)
(10,27)-(10,41)
(10,39)-(10,41)
(10,46)-(10,57)
(10,46)-(10,60)
(10,46)-(10,60)
(10,58)-(10,60)
(10,64)-(10,65)
(10,66)-(10,68)
(11,9)-(11,11)
(11,9)-(11,14)
(13,17)-(13,68)
(13,27)-(13,38)
(13,27)-(13,41)
(13,46)-(13,57)
(13,46)-(13,60)
(13,46)-(13,60)
(13,58)-(13,60)
(13,64)-(13,65)
(13,66)-(13,68)
(16,4)-(16,54)
(16,20)-(16,52)
(16,24)-(16,32)
(16,24)-(16,52)
(18,4)-(31,37)
(18,12)-(31,33)
(18,15)-(31,33)
(19,3)-(31,33)
(19,3)-(31,33)
(19,12)-(30,52)
(20,5)-(30,52)
(20,11)-(27,45)
(20,13)-(27,45)
(21,7)-(27,45)
(21,7)-(27,45)
(21,13)-(21,14)
(23,12)-(27,45)
(23,12)-(27,45)
(23,18)-(23,19)
(25,16)-(27,45)
(25,21)-(25,23)
(25,21)-(25,28)
(25,21)-(25,28)
(25,21)-(25,28)
(25,21)-(25,37)
(25,21)-(25,37)
(25,21)-(25,42)
(25,21)-(25,42)
(25,26)-(25,28)
(25,32)-(25,37)
(25,41)-(25,42)
(26,22)-(26,23)
(26,22)-(26,58)
(26,29)-(26,31)
(26,29)-(26,36)
(26,29)-(26,41)
(26,29)-(26,47)
(26,29)-(26,58)
(26,34)-(26,36)
(26,40)-(26,41)
(26,45)-(26,47)
(26,52)-(26,58)
(27,22)-(27,23)
(27,22)-(27,45)
(27,27)-(27,29)
(27,27)-(27,34)
(27,27)-(27,45)
(27,32)-(27,34)
(27,39)-(27,45)
(28,5)-(30,52)
(28,17)-(28,18)
(28,17)-(28,22)
(28,20)-(28,22)
(29,5)-(30,52)
(29,16)-(29,28)
(29,16)-(29,57)
(29,16)-(29,57)
(29,31)-(29,39)
(29,31)-(29,42)
(29,31)-(29,42)
(29,31)-(29,57)
(29,40)-(29,42)
(29,46)-(29,54)
(29,46)-(29,57)
(29,46)-(29,57)
(29,55)-(29,57)
(30,19)-(30,33)
(30,19)-(30,45)
(30,19)-(30,45)
(30,19)-(30,45)
(30,19)-(30,45)
(30,34)-(30,35)
(30,36)-(30,40)
(30,41)-(30,45)
(31,3)-(31,13)
(31,3)-(31,33)
(31,3)-(31,33)
(31,15)-(31,18)
(31,15)-(31,33)
(31,15)-(31,33)
(31,20)-(31,27)
(31,20)-(31,33)
(31,20)-(31,33)
(31,28)-(31,30)
(31,31)-(31,33)
*)

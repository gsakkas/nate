
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match (a, x) with
      | ((o,sum),[]) -> (0, sum)
      | ((o,sum),(b,c)::l') ->
          let d = (b + c) + o in
          if d < 10 then (0, (d :: sum)) else (1, ((d - 10) :: sum)) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let carry = match a with | (x,y) -> x in
      match x with
      | (addend_a,addend_b) ->
          let new_carry = ((carry + addend_a) + addend_b) / 10 in
          let digit = ((carry + addend_a) + addend_b) mod 10 in
          (match a with | (x,y) -> (new_carry, (digit :: y))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(15,7)-(19,67)
(15,14)-(15,15)
(15,14)-(15,18)
(16,26)-(16,27)
(16,26)-(16,32)
(16,29)-(16,32)
(18,11)-(19,67)
(18,20)-(18,21)
(18,20)-(18,30)
(18,24)-(18,25)
(18,29)-(18,30)
(19,11)-(19,67)
(19,14)-(19,15)
(19,14)-(19,20)
(19,18)-(19,20)
(19,27)-(19,28)
(19,27)-(19,39)
(19,31)-(19,32)
(19,31)-(19,39)
(19,36)-(19,39)
(19,48)-(19,49)
(19,48)-(19,67)
(19,53)-(19,54)
(19,53)-(19,59)
(19,57)-(19,59)
(19,64)-(19,67)
(20,5)-(22,52)
*)

(* type error slice
(2,4)-(2,68)
(2,15)-(2,64)
(2,17)-(2,64)
(2,21)-(2,64)
(2,21)-(2,64)
(2,24)-(2,25)
(2,24)-(2,30)
(2,24)-(2,30)
(2,24)-(2,30)
(2,29)-(2,30)
(2,36)-(2,38)
(2,44)-(2,45)
(2,44)-(2,64)
(2,50)-(2,55)
(2,50)-(2,64)
(2,50)-(2,64)
(2,50)-(2,64)
(2,56)-(2,57)
(2,59)-(2,60)
(2,59)-(2,64)
(2,63)-(2,64)
(4,4)-(7,70)
(4,13)-(7,67)
(4,16)-(7,67)
(5,7)-(5,18)
(5,7)-(5,21)
(5,7)-(5,21)
(5,19)-(5,21)
(5,26)-(5,37)
(5,26)-(5,40)
(5,26)-(5,40)
(5,38)-(5,40)
(6,9)-(6,11)
(6,9)-(6,66)
(6,15)-(6,20)
(6,15)-(6,58)
(6,15)-(6,66)
(6,25)-(6,36)
(6,25)-(6,39)
(6,25)-(6,39)
(6,37)-(6,39)
(6,44)-(6,55)
(6,44)-(6,58)
(6,44)-(6,58)
(6,56)-(6,58)
(6,62)-(6,63)
(6,64)-(6,66)
(7,11)-(7,62)
(7,21)-(7,32)
(7,21)-(7,35)
(7,40)-(7,51)
(7,40)-(7,54)
(7,40)-(7,54)
(7,52)-(7,54)
(7,58)-(7,59)
(7,60)-(7,62)
(9,20)-(10,75)
(10,3)-(10,75)
(10,3)-(10,75)
(10,3)-(10,75)
(10,3)-(10,75)
(10,3)-(10,75)
(10,9)-(10,10)
(10,24)-(10,26)
(10,37)-(10,75)
(10,40)-(10,41)
(10,40)-(10,45)
(10,51)-(10,61)
(10,51)-(10,63)
(12,4)-(23,37)
(12,12)-(23,33)
(12,15)-(23,33)
(13,3)-(23,33)
(13,12)-(22,52)
(14,5)-(22,52)
(14,11)-(19,67)
(14,13)-(19,67)
(15,7)-(19,67)
(15,7)-(19,67)
(15,7)-(19,67)
(15,7)-(19,67)
(15,7)-(19,67)
(15,14)-(15,15)
(15,14)-(15,18)
(15,17)-(15,18)
(16,26)-(16,32)
(16,29)-(16,32)
(18,20)-(18,21)
(18,24)-(18,25)
(18,29)-(18,30)
(19,36)-(19,39)
(20,5)-(22,52)
(20,17)-(20,22)
(20,20)-(20,22)
(21,5)-(22,52)
(21,16)-(21,24)
(21,16)-(21,44)
(21,16)-(21,44)
(21,26)-(21,38)
(21,26)-(21,44)
(21,26)-(21,44)
(21,26)-(21,44)
(21,39)-(21,41)
(21,42)-(21,44)
(22,19)-(22,33)
(22,19)-(22,45)
(22,19)-(22,45)
(22,19)-(22,45)
(22,34)-(22,35)
(22,36)-(22,40)
(22,41)-(22,45)
(23,15)-(23,18)
(23,15)-(23,33)
(23,15)-(23,33)
(23,20)-(23,27)
(23,20)-(23,33)
(23,20)-(23,33)
(23,28)-(23,30)
(23,31)-(23,33)
*)

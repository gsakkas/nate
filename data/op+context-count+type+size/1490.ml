
let rec sepConcat sep sl =
  match sl with
  | [] -> ""
  | h::t ->
      let f a x = if (List.length sl) > 1 then a ^ (sep ^ x) else a ^ x in
      let base = if (List.length sl) > 1 then h else h in
      let l = t in List.fold_left f base l;;

let stringOfList f l = List.map (fun a  -> a l) sepConcat;;


(* fix

let rec sepConcat sep sl =
  match sl with
  | [] -> ""
  | h::t ->
      let f a x = if (List.length sl) > 1 then a ^ (sep ^ x) else a ^ x in
      let base = h in let l = t in List.fold_left f base l;;

let stringOfList f l = sepConcat ";" (List.map f l);;

*)

(* changed spans
(7,18)-(7,55)
(7,22)-(7,33)
(7,22)-(7,36)
(7,22)-(7,41)
(7,34)-(7,36)
(7,40)-(7,41)
(7,54)-(7,55)
*)

(* type error slice
(2,4)-(8,45)
(2,19)-(8,43)
(2,23)-(8,43)
(3,3)-(8,43)
(3,3)-(8,43)
(3,3)-(8,43)
(3,3)-(8,43)
(3,3)-(8,43)
(3,3)-(8,43)
(3,9)-(3,11)
(4,11)-(4,13)
(6,7)-(8,43)
(6,7)-(8,43)
(6,13)-(6,72)
(6,15)-(6,72)
(6,19)-(6,72)
(6,23)-(6,34)
(6,23)-(6,37)
(6,23)-(6,37)
(6,23)-(6,42)
(6,23)-(6,42)
(6,35)-(6,37)
(6,41)-(6,42)
(6,48)-(6,49)
(6,48)-(6,60)
(6,48)-(6,60)
(6,50)-(6,51)
(6,53)-(6,56)
(6,53)-(6,60)
(6,53)-(6,60)
(6,53)-(6,60)
(6,57)-(6,58)
(6,59)-(6,60)
(6,67)-(6,68)
(6,67)-(6,72)
(6,69)-(6,70)
(6,71)-(6,72)
(7,7)-(8,43)
(7,7)-(8,43)
(7,18)-(7,55)
(7,18)-(7,55)
(7,22)-(7,33)
(7,22)-(7,36)
(7,22)-(7,36)
(7,22)-(7,41)
(7,22)-(7,41)
(7,34)-(7,36)
(7,40)-(7,41)
(7,47)-(7,48)
(7,54)-(7,55)
(8,7)-(8,43)
(8,7)-(8,43)
(8,15)-(8,16)
(8,20)-(8,34)
(8,20)-(8,43)
(8,20)-(8,43)
(8,20)-(8,43)
(8,20)-(8,43)
(8,35)-(8,36)
(8,37)-(8,41)
(8,42)-(8,43)
(10,4)-(10,60)
(10,18)-(10,58)
(10,20)-(10,58)
(10,24)-(10,32)
(10,24)-(10,58)
(10,24)-(10,58)
(10,24)-(10,58)
(10,34)-(10,47)
(10,44)-(10,45)
(10,44)-(10,47)
(10,44)-(10,47)
(10,46)-(10,47)
(10,49)-(10,58)
*)

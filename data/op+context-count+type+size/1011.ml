
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let lenl1 = List.length l1 in
  let lenl2 = List.length l2 in
  if lenl1 > lenl2
  then (l1, ((clone 0 (lenl1 - lenl2)) @ l2))
  else (((clone 0 (lenl2 - lenl1)) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (rem,acc) = a in
      if x = []
      then
        (if rem = 1
         then (0, (1 :: acc))
         else
           (let (el1,el2) = x in
            let new_sum = (rem + el1) + el2 in
            let new_rem = if new_sum > 9 then 1 else 0 in
            let norm_sum = if new_sum > 9 then new_sum - 10 else new_sum in
            (new_rem, (norm_sum :: acc)))) in
    let base = (0, []) in
    let args = List.rev ([] @ (List.combine l1 l2)) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let lenl1 = List.length l1 in
  let lenl2 = List.length l2 in
  if lenl1 > lenl2
  then (l1, ((clone 0 (lenl1 - lenl2)) @ l2))
  else (((clone 0 (lenl2 - lenl1)) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (rem,acc) = a in
      if
        ((List.length acc) = (List.length l1)) ||
          ((List.length acc) = (List.length l2))
      then (if rem = 1 then (0, (1 :: acc)) else (0, acc))
      else
        (let (el1,el2) = x in
         let new_sum = (rem + el1) + el2 in
         let new_rem = if new_sum > 9 then 1 else 0 in
         let norm_sum = if new_sum > 9 then new_sum - 10 else new_sum in
         (new_rem, (norm_sum :: acc))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(18,7)-(27,39)
(18,10)-(18,11)
(18,10)-(18,16)
(18,14)-(18,16)
(20,10)-(27,39)
(23,13)-(27,39)
(29,26)-(29,28)
(29,29)-(29,30)
(29,32)-(29,50)
(31,3)-(31,13)
(31,15)-(31,18)
(31,15)-(31,33)
(31,20)-(31,27)
(31,20)-(31,33)
(31,28)-(31,30)
(31,31)-(31,33)
*)

(* type error slice
(2,4)-(2,68)
(2,15)-(2,64)
(2,17)-(2,64)
(2,21)-(2,64)
(2,21)-(2,64)
(2,24)-(2,25)
(2,24)-(2,30)
(2,24)-(2,30)
(2,24)-(2,30)
(2,29)-(2,30)
(2,36)-(2,38)
(2,44)-(2,45)
(2,44)-(2,64)
(2,50)-(2,55)
(2,50)-(2,64)
(2,50)-(2,64)
(2,50)-(2,64)
(2,56)-(2,57)
(2,59)-(2,60)
(2,59)-(2,64)
(2,63)-(2,64)
(4,4)-(9,48)
(4,13)-(9,45)
(4,16)-(9,45)
(5,15)-(5,26)
(5,15)-(5,29)
(5,15)-(5,29)
(5,27)-(5,29)
(6,15)-(6,26)
(6,15)-(6,29)
(6,15)-(6,29)
(6,27)-(6,29)
(8,9)-(8,11)
(8,9)-(8,44)
(8,15)-(8,20)
(8,15)-(8,37)
(8,15)-(8,44)
(8,40)-(8,41)
(8,42)-(8,44)
(9,11)-(9,40)
(9,36)-(9,37)
(9,38)-(9,40)
(11,20)-(12,75)
(12,3)-(12,75)
(12,3)-(12,75)
(12,3)-(12,75)
(12,3)-(12,75)
(12,3)-(12,75)
(12,9)-(12,10)
(12,24)-(12,26)
(12,37)-(12,75)
(12,40)-(12,41)
(12,40)-(12,45)
(12,51)-(12,61)
(12,51)-(12,63)
(14,4)-(31,37)
(14,12)-(31,33)
(14,15)-(31,33)
(15,3)-(31,33)
(15,12)-(30,52)
(16,5)-(30,52)
(16,11)-(27,39)
(16,13)-(27,39)
(17,7)-(27,39)
(17,23)-(17,24)
(18,7)-(27,39)
(18,7)-(27,39)
(18,7)-(27,39)
(18,10)-(18,11)
(18,10)-(18,16)
(18,10)-(18,16)
(18,10)-(18,16)
(18,14)-(18,16)
(20,10)-(27,39)
(20,13)-(20,16)
(20,13)-(20,20)
(20,13)-(20,20)
(20,13)-(20,20)
(20,19)-(20,20)
(21,16)-(21,17)
(21,16)-(21,28)
(21,20)-(21,21)
(21,20)-(21,28)
(21,25)-(21,28)
(23,13)-(27,39)
(23,13)-(27,39)
(23,29)-(23,30)
(24,13)-(27,39)
(24,13)-(27,39)
(24,28)-(24,31)
(24,28)-(24,37)
(24,28)-(24,37)
(24,28)-(24,44)
(24,28)-(24,44)
(24,34)-(24,37)
(24,41)-(24,44)
(25,13)-(27,39)
(25,13)-(27,39)
(25,27)-(25,55)
(25,30)-(25,37)
(25,30)-(25,41)
(25,30)-(25,41)
(25,40)-(25,41)
(25,47)-(25,48)
(25,54)-(25,55)
(26,13)-(27,39)
(26,13)-(27,39)
(26,28)-(26,73)
(26,31)-(26,38)
(26,31)-(26,42)
(26,31)-(26,42)
(26,41)-(26,42)
(26,48)-(26,55)
(26,48)-(26,60)
(26,58)-(26,60)
(26,66)-(26,73)
(27,14)-(27,21)
(27,14)-(27,39)
(27,24)-(27,32)
(27,24)-(27,39)
(27,36)-(27,39)
(28,5)-(30,52)
(28,17)-(28,22)
(28,20)-(28,22)
(29,5)-(30,52)
(29,16)-(29,24)
(29,16)-(29,50)
(29,16)-(29,50)
(29,26)-(29,28)
(29,26)-(29,50)
(29,26)-(29,50)
(29,26)-(29,50)
(29,29)-(29,30)
(29,32)-(29,44)
(29,32)-(29,50)
(29,32)-(29,50)
(29,32)-(29,50)
(29,45)-(29,47)
(29,48)-(29,50)
(30,19)-(30,33)
(30,19)-(30,45)
(30,19)-(30,45)
(30,19)-(30,45)
(30,34)-(30,35)
(30,36)-(30,40)
(30,41)-(30,45)
(31,15)-(31,18)
(31,15)-(31,33)
(31,15)-(31,33)
(31,20)-(31,27)
(31,20)-(31,33)
(31,20)-(31,33)
(31,28)-(31,30)
(31,31)-(31,33)
*)


let rec clone x n =
  let accum = [] in
  let rec helper accum n =
    if n < 1 then accum else helper (x :: accum) (n - 1) in
  helper accum n;;

let padZero l1 l2 =
  let (a,b) = ((List.length l1), (List.length l2)) in
  if a < b
  then ((List.append (clone 0 (b - a)) l1), l2)
  else if b < a then (l1, (List.append (clone 0 (a - b)) l2)) else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = let (h::t,b) = a in a = (t, b) in
    let base = ((List.rev l1), []) in
    let args = l2 in let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n =
  let accum = [] in
  let rec helper accum n =
    if n < 1 then accum else helper (x :: accum) (n - 1) in
  helper accum n;;

let padZero l1 l2 =
  let (a,b) = ((List.length l1), (List.length l2)) in
  if a < b
  then ((List.append (clone 0 (b - a)) l1), l2)
  else if b < a then (l1, (List.append (clone 0 (a - b)) l2)) else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = let (h::t,_) = a in ([], []) in
    let base = ((List.rev l1), []) in
    let args = l2 in let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(19,37)-(19,38)
(19,37)-(19,46)
(19,42)-(19,43)
(19,45)-(19,46)
(20,5)-(21,69)
*)

(* type error slice
(2,4)-(6,19)
(2,15)-(6,17)
(2,17)-(6,17)
(3,3)-(6,17)
(3,3)-(6,17)
(3,15)-(3,17)
(4,3)-(6,17)
(4,3)-(6,17)
(4,18)-(5,56)
(4,24)-(5,56)
(5,5)-(5,56)
(5,5)-(5,56)
(5,8)-(5,9)
(5,8)-(5,13)
(5,8)-(5,13)
(5,8)-(5,13)
(5,12)-(5,13)
(5,19)-(5,24)
(5,30)-(5,36)
(5,30)-(5,56)
(5,30)-(5,56)
(5,30)-(5,56)
(5,38)-(5,39)
(5,38)-(5,48)
(5,43)-(5,48)
(5,51)-(5,52)
(5,51)-(5,56)
(5,55)-(5,56)
(6,3)-(6,9)
(6,3)-(6,17)
(6,3)-(6,17)
(6,10)-(6,15)
(6,16)-(6,17)
(8,4)-(12,78)
(8,13)-(12,75)
(8,16)-(12,75)
(9,3)-(12,75)
(9,3)-(12,75)
(9,17)-(9,28)
(9,17)-(9,31)
(9,17)-(9,31)
(9,17)-(9,49)
(9,29)-(9,31)
(9,35)-(9,46)
(9,35)-(9,49)
(9,35)-(9,49)
(9,47)-(9,49)
(10,3)-(12,75)
(10,3)-(12,75)
(10,6)-(10,7)
(10,6)-(10,11)
(10,6)-(10,11)
(10,10)-(10,11)
(11,10)-(11,21)
(11,10)-(11,42)
(11,10)-(11,42)
(11,10)-(11,42)
(11,10)-(11,47)
(11,23)-(11,28)
(11,23)-(11,37)
(11,23)-(11,37)
(11,23)-(11,37)
(11,29)-(11,30)
(11,32)-(11,33)
(11,32)-(11,37)
(11,36)-(11,37)
(11,40)-(11,42)
(11,45)-(11,47)
(12,8)-(12,75)
(12,8)-(12,75)
(12,11)-(12,12)
(12,11)-(12,16)
(12,11)-(12,16)
(12,15)-(12,16)
(12,23)-(12,25)
(12,23)-(12,60)
(12,28)-(12,39)
(12,28)-(12,60)
(12,28)-(12,60)
(12,28)-(12,60)
(12,41)-(12,46)
(12,41)-(12,55)
(12,47)-(12,48)
(12,50)-(12,51)
(12,50)-(12,55)
(12,54)-(12,55)
(12,58)-(12,60)
(12,69)-(12,71)
(12,69)-(12,75)
(12,73)-(12,75)
(14,20)-(15,70)
(15,3)-(15,70)
(15,3)-(15,70)
(15,3)-(15,70)
(15,3)-(15,70)
(15,3)-(15,70)
(15,9)-(15,10)
(15,24)-(15,26)
(15,37)-(15,70)
(15,37)-(15,70)
(15,40)-(15,41)
(15,40)-(15,45)
(15,51)-(15,61)
(15,51)-(15,63)
(15,69)-(15,70)
(17,4)-(22,37)
(17,12)-(22,33)
(17,15)-(22,33)
(18,3)-(22,33)
(18,12)-(21,69)
(19,5)-(21,69)
(19,5)-(21,69)
(19,11)-(19,46)
(19,13)-(19,46)
(19,17)-(19,46)
(19,17)-(19,46)
(19,17)-(19,46)
(19,32)-(19,33)
(19,37)-(19,38)
(19,37)-(19,46)
(19,37)-(19,46)
(19,42)-(19,43)
(19,42)-(19,46)
(19,45)-(19,46)
(20,5)-(21,69)
(20,5)-(21,69)
(20,18)-(20,26)
(20,18)-(20,29)
(20,18)-(20,29)
(20,18)-(20,34)
(20,27)-(20,29)
(20,32)-(20,34)
(21,5)-(21,69)
(21,5)-(21,69)
(21,16)-(21,18)
(21,22)-(21,69)
(21,22)-(21,69)
(21,36)-(21,50)
(21,36)-(21,62)
(21,36)-(21,62)
(21,36)-(21,62)
(21,36)-(21,62)
(21,51)-(21,52)
(21,53)-(21,57)
(21,58)-(21,62)
(21,66)-(21,69)
(22,15)-(22,18)
(22,15)-(22,33)
(22,15)-(22,33)
(22,20)-(22,27)
(22,20)-(22,33)
(22,20)-(22,33)
(22,20)-(22,33)
(22,28)-(22,30)
(22,31)-(22,33)
*)

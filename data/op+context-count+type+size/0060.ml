
let rec mulByDigit i l =
  match List.rev l with
  | [] -> []
  | h::t ->
      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @
               [h * i]
       with
       | [] -> []
       | h::t ->
           let rec helper acc v =
             if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in
           helper h);;


(* fix

let rec mulByDigit i l =
  match List.rev l with
  | [] -> []
  | h::t ->
      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @
               [h * i]
       with
       | [] -> []
       | h::t ->
           let rec helper acc v =
             if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in
           helper [] h);;

*)

(* changed spans
(13,12)-(13,20)
(13,19)-(13,20)
*)

(* type error slice
(2,4)-(13,23)
(2,20)-(13,20)
(2,22)-(13,20)
(3,3)-(13,20)
(3,3)-(13,20)
(3,3)-(13,20)
(3,3)-(13,20)
(3,3)-(13,20)
(3,3)-(13,20)
(3,9)-(3,17)
(3,9)-(3,19)
(3,9)-(3,19)
(3,18)-(3,19)
(4,11)-(4,13)
(6,8)-(13,20)
(6,8)-(13,20)
(6,8)-(13,20)
(6,8)-(13,20)
(6,8)-(13,20)
(6,8)-(13,20)
(6,8)-(13,20)
(6,15)-(6,25)
(6,15)-(6,68)
(6,15)-(6,68)
(6,15)-(6,68)
(6,15)-(7,23)
(6,15)-(7,23)
(6,15)-(7,23)
(6,26)-(6,27)
(6,29)-(6,37)
(6,29)-(6,68)
(6,29)-(6,68)
(6,39)-(6,47)
(6,39)-(6,68)
(6,39)-(6,68)
(6,39)-(6,68)
(6,49)-(6,65)
(6,59)-(6,60)
(6,59)-(6,65)
(6,59)-(6,65)
(6,63)-(6,65)
(6,67)-(6,68)
(6,72)-(6,73)
(7,16)-(7,23)
(7,16)-(7,23)
(7,17)-(7,18)
(7,17)-(7,22)
(7,17)-(7,22)
(7,21)-(7,22)
(9,16)-(9,18)
(11,12)-(13,20)
(11,12)-(13,20)
(11,27)-(12,71)
(11,31)-(12,71)
(12,14)-(12,71)
(12,14)-(12,71)
(12,17)-(12,18)
(12,17)-(12,22)
(12,17)-(12,22)
(12,17)-(12,22)
(12,21)-(12,22)
(12,28)-(12,31)
(12,37)-(12,43)
(12,37)-(12,71)
(12,37)-(12,71)
(12,37)-(12,71)
(12,46)-(12,47)
(12,46)-(12,54)
(12,46)-(12,62)
(12,52)-(12,54)
(12,59)-(12,62)
(12,65)-(12,66)
(12,65)-(12,71)
(12,69)-(12,71)
(13,12)-(13,18)
(13,12)-(13,20)
(13,12)-(13,20)
(13,19)-(13,20)
*)


let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | (c,sum) ->
          (match x with
           | (d1,d2) ->
               let c' = ((c + d1) + d2) / 10 in
               let d' = ((c + d1) + d2) mod 10 in (c', (d' :: sum))) in
    let base = (0, []) in
    let args = List.combine (List.rev (0 :: l1)) (List.rev (0 :: l2)) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l =
  if i = 1
  then l
  else
    if i = 0
    then []
    else
      if i < 0
      then
        (match bigAdd (bigAdd l l) (mulByDigit ((i * (-1)) - 2) l) with
         | h::t -> (h * (-1)) :: t
         | _ -> 0)
      else bigAdd (bigAdd l l) (mulByDigit (i - 2) l);;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | (c,sum) ->
          (match x with
           | (d1,d2) ->
               let c' = ((c + d1) + d2) / 10 in
               let d' = ((c + d1) + d2) mod 10 in (c', (d' :: sum))) in
    let base = (0, []) in
    let args = List.combine (List.rev (0 :: l1)) (List.rev (0 :: l2)) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l =
  if i = 1
  then l
  else
    if i = 0
    then []
    else
      if i < 0
      then
        (match bigAdd (bigAdd l l) (mulByDigit ((i * (-1)) - 2) l) with
         | h::t -> (h * (-1)) :: t
         | _ -> [])
      else bigAdd (bigAdd l l) (mulByDigit (i - 2) l);;

*)

(* changed spans
(37,17)-(37,18)
*)

(* type error slice
(2,4)-(2,68)
(2,15)-(2,64)
(2,17)-(2,64)
(2,21)-(2,64)
(2,21)-(2,64)
(2,24)-(2,25)
(2,24)-(2,30)
(2,24)-(2,30)
(2,24)-(2,30)
(2,29)-(2,30)
(2,36)-(2,38)
(2,44)-(2,45)
(2,44)-(2,64)
(2,50)-(2,55)
(2,50)-(2,64)
(2,50)-(2,64)
(2,50)-(2,64)
(2,56)-(2,57)
(2,59)-(2,60)
(2,59)-(2,64)
(2,63)-(2,64)
(4,4)-(7,70)
(4,13)-(7,67)
(4,16)-(7,67)
(5,3)-(7,67)
(5,7)-(5,18)
(5,7)-(5,21)
(5,7)-(5,21)
(5,7)-(5,40)
(5,7)-(5,40)
(5,19)-(5,21)
(5,26)-(5,37)
(5,26)-(5,40)
(5,26)-(5,40)
(5,38)-(5,40)
(6,9)-(6,11)
(6,9)-(6,66)
(6,15)-(6,20)
(6,15)-(6,58)
(6,15)-(6,58)
(6,15)-(6,66)
(6,15)-(6,66)
(6,15)-(6,66)
(6,21)-(6,22)
(6,25)-(6,36)
(6,25)-(6,39)
(6,25)-(6,39)
(6,25)-(6,58)
(6,37)-(6,39)
(6,44)-(6,55)
(6,44)-(6,58)
(6,44)-(6,58)
(6,56)-(6,58)
(6,62)-(6,63)
(6,64)-(6,66)
(7,11)-(7,16)
(7,11)-(7,54)
(7,11)-(7,62)
(7,11)-(7,62)
(7,11)-(7,62)
(7,11)-(7,67)
(7,17)-(7,18)
(7,21)-(7,32)
(7,21)-(7,35)
(7,21)-(7,35)
(7,21)-(7,54)
(7,33)-(7,35)
(7,40)-(7,51)
(7,40)-(7,54)
(7,40)-(7,54)
(7,52)-(7,54)
(7,58)-(7,59)
(7,60)-(7,62)
(7,65)-(7,67)
(9,4)-(10,77)
(9,20)-(10,75)
(10,3)-(10,75)
(10,3)-(10,75)
(10,3)-(10,75)
(10,3)-(10,75)
(10,3)-(10,75)
(10,3)-(10,75)
(10,3)-(10,75)
(10,9)-(10,10)
(10,24)-(10,26)
(10,37)-(10,75)
(10,37)-(10,75)
(10,40)-(10,41)
(10,40)-(10,45)
(10,40)-(10,45)
(10,40)-(10,45)
(10,44)-(10,45)
(10,51)-(10,61)
(10,51)-(10,63)
(10,51)-(10,63)
(10,62)-(10,63)
(10,69)-(10,70)
(10,69)-(10,75)
(10,74)-(10,75)
(12,4)-(24,37)
(12,12)-(24,33)
(12,15)-(24,33)
(13,3)-(24,33)
(13,3)-(24,33)
(13,12)-(23,52)
(14,5)-(23,52)
(14,5)-(23,52)
(14,11)-(20,66)
(14,13)-(20,66)
(15,7)-(20,66)
(15,7)-(20,66)
(15,13)-(15,14)
(17,12)-(20,66)
(17,12)-(20,66)
(17,18)-(17,19)
(19,16)-(20,66)
(19,16)-(20,66)
(19,27)-(19,28)
(19,27)-(19,33)
(19,27)-(19,33)
(19,27)-(19,33)
(19,27)-(19,39)
(19,27)-(19,39)
(19,27)-(19,45)
(19,31)-(19,33)
(19,37)-(19,39)
(19,43)-(19,45)
(20,16)-(20,66)
(20,16)-(20,66)
(20,27)-(20,28)
(20,27)-(20,33)
(20,27)-(20,39)
(20,27)-(20,47)
(20,31)-(20,33)
(20,37)-(20,39)
(20,45)-(20,47)
(20,52)-(20,54)
(20,52)-(20,66)
(20,57)-(20,59)
(20,57)-(20,66)
(20,63)-(20,66)
(21,5)-(23,52)
(21,5)-(23,52)
(21,17)-(21,18)
(21,17)-(21,22)
(21,20)-(21,22)
(22,5)-(23,52)
(22,5)-(23,52)
(22,16)-(22,28)
(22,16)-(22,68)
(22,16)-(22,68)
(22,16)-(22,68)
(22,30)-(22,38)
(22,30)-(22,47)
(22,30)-(22,47)
(22,40)-(22,41)
(22,40)-(22,47)
(22,45)-(22,47)
(22,51)-(22,59)
(22,51)-(22,68)
(22,51)-(22,68)
(22,61)-(22,62)
(22,61)-(22,68)
(22,66)-(22,68)
(23,5)-(23,52)
(23,5)-(23,52)
(23,19)-(23,33)
(23,19)-(23,45)
(23,19)-(23,45)
(23,19)-(23,45)
(23,19)-(23,45)
(23,34)-(23,35)
(23,36)-(23,40)
(23,41)-(23,45)
(23,49)-(23,52)
(24,3)-(24,13)
(24,3)-(24,33)
(24,3)-(24,33)
(24,15)-(24,18)
(24,15)-(24,33)
(24,15)-(24,33)
(24,20)-(24,27)
(24,20)-(24,33)
(24,20)-(24,33)
(24,20)-(24,33)
(24,28)-(24,30)
(24,31)-(24,33)
(26,20)-(38,53)
(26,22)-(38,53)
(27,6)-(27,7)
(27,6)-(27,11)
(27,6)-(27,11)
(27,6)-(27,11)
(27,10)-(27,11)
(28,8)-(28,9)
(30,5)-(38,53)
(30,8)-(30,9)
(30,8)-(30,13)
(30,8)-(30,13)
(30,12)-(30,13)
(31,10)-(31,12)
(33,10)-(33,11)
(33,10)-(33,15)
(33,10)-(33,15)
(33,14)-(33,15)
(35,10)-(37,18)
(35,10)-(37,18)
(35,10)-(37,18)
(35,10)-(37,18)
(35,10)-(37,18)
(35,16)-(35,22)
(35,16)-(35,66)
(35,16)-(35,66)
(35,16)-(35,66)
(35,24)-(35,30)
(35,24)-(35,34)
(35,24)-(35,34)
(35,24)-(35,34)
(35,31)-(35,32)
(35,33)-(35,34)
(35,37)-(35,47)
(35,37)-(35,66)
(35,37)-(35,66)
(35,37)-(35,66)
(35,50)-(35,51)
(35,50)-(35,57)
(35,50)-(35,63)
(35,55)-(35,57)
(35,62)-(35,63)
(35,65)-(35,66)
(36,21)-(36,22)
(36,21)-(36,28)
(36,21)-(36,28)
(36,21)-(36,35)
(36,26)-(36,28)
(36,34)-(36,35)
(37,17)-(37,18)
*)

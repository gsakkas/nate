
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | ECosSin of expr* expr
  | SinLog of expr* expr* expr;;

let max = ref 0;;

let pi = 4.0 *. (atan 1.0);;

let rec eval (e,x,y) =
  match e with
  | VarX  -> x
  | VarY  -> y
  | Sine i -> sin (pi *. (eval (i, x, y)))
  | Cosine i -> cos (pi *. (eval (i, x, y)))
  | Average (i1,i2) -> ((eval (i1, x, y)) +. (eval (i2, x, y))) /. 2.0
  | Times (i1,i2) -> (eval (i1, x, y)) *. (eval (i2, x, y))
  | Thresh (i1,i2,i3,i4) ->
      if (eval (i1, x, y)) < (eval (i2, x, y))
      then eval (i3, x, y)
      else eval (i4, x, y)
  | ECosSin (a,b) ->
      (2.71 **
         (((sin (pi *. (eval (a, x, y)))) +. (cos (pi *. (eval (b, x, y)))))
            -. 1.0))
        -. 1.0
  | SinLog (a',b',c) ->
      let a = abs_float (eval (a', x, y)) in
      let b = abs_float (eval (b', x, y)) in
      let max' a b = if a > b then a else b in
      let my_log l' = let l = max 0.1 l' in (log l) /. (log 10.0) in
      if (eval (c, x, y)) < 0.0
      then ((my_log (a *. 100.0)) ** (sin ((pi *. b) *. 100.0))) -. 1.0
      else
        (-1.0) *.
          (((my_log (b *. 100.0)) ** (pi *. (sin (a *. 100.0)))) -. 1.0);;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | ECosSin of expr* expr
  | SinLog of expr* expr* expr;;

let pi = 4.0 *. (atan 1.0);;

let rec eval (e,x,y) =
  match e with
  | VarX  -> x
  | VarY  -> y
  | Sine i -> sin (pi *. (eval (i, x, y)))
  | Cosine i -> cos (pi *. (eval (i, x, y)))
  | Average (i1,i2) -> ((eval (i1, x, y)) +. (eval (i2, x, y))) /. 2.0
  | Times (i1,i2) -> (eval (i1, x, y)) *. (eval (i2, x, y))
  | Thresh (i1,i2,i3,i4) ->
      if (eval (i1, x, y)) < (eval (i2, x, y))
      then eval (i3, x, y)
      else eval (i4, x, y)
  | ECosSin (a,b) ->
      (2.71 **
         (((sin (pi *. (eval (a, x, y)))) +. (cos (pi *. (eval (b, x, y)))))
            -. 1.0))
        -. 1.0
  | SinLog (a',b',c) ->
      let a = abs_float (eval (a', x, y)) in
      let b = abs_float (eval (b', x, y)) in
      let max' a b = if a > b then a else b in
      let my_log l' = let l = max' 0.1 l' in (log l) /. (log 10.0) in
      if (eval (c, x, y)) < 0.0
      then ((my_log (a *. 100.0)) ** (sin ((pi *. b) *. 100.0))) -. 1.0
      else
        (-1.0) *.
          (((my_log (b *. 100.0)) ** (pi *. (sin (a *. 100.0)))) -. 1.0);;

*)

(* changed spans
(13,11)-(13,14)
(13,11)-(13,16)
(13,15)-(13,16)
(38,31)-(38,34)
*)

(* type error slice
(13,4)-(13,18)
(13,11)-(13,14)
(13,11)-(13,16)
(13,11)-(13,16)
(13,15)-(13,16)
(15,4)-(15,29)
(15,10)-(15,13)
(15,10)-(15,26)
(15,18)-(15,22)
(15,18)-(15,26)
(15,23)-(15,26)
(17,15)-(43,72)
(18,3)-(43,72)
(18,3)-(43,72)
(18,3)-(43,72)
(18,3)-(43,72)
(18,3)-(43,72)
(18,3)-(43,72)
(18,3)-(43,72)
(18,3)-(43,72)
(18,3)-(43,72)
(18,3)-(43,72)
(18,3)-(43,72)
(18,3)-(43,72)
(18,3)-(43,72)
(18,3)-(43,72)
(18,3)-(43,72)
(18,3)-(43,72)
(18,3)-(43,72)
(18,3)-(43,72)
(18,3)-(43,72)
(18,3)-(43,72)
(18,3)-(43,72)
(18,3)-(43,72)
(18,3)-(43,72)
(18,3)-(43,72)
(18,3)-(43,72)
(18,3)-(43,72)
(18,9)-(18,10)
(19,14)-(19,15)
(20,14)-(20,15)
(21,15)-(21,18)
(21,15)-(21,40)
(21,20)-(21,22)
(21,20)-(21,40)
(21,20)-(21,40)
(21,27)-(21,31)
(21,27)-(21,40)
(21,27)-(21,40)
(21,33)-(21,34)
(21,33)-(21,40)
(21,36)-(21,37)
(21,39)-(21,40)
(22,17)-(22,20)
(22,17)-(22,42)
(22,22)-(22,24)
(22,22)-(22,42)
(22,29)-(22,33)
(22,29)-(22,42)
(22,29)-(22,42)
(22,35)-(22,36)
(22,35)-(22,42)
(22,38)-(22,39)
(22,41)-(22,42)
(23,26)-(23,30)
(23,26)-(23,40)
(23,26)-(23,40)
(23,26)-(23,61)
(23,26)-(23,71)
(23,32)-(23,34)
(23,32)-(23,40)
(23,36)-(23,37)
(23,39)-(23,40)
(23,47)-(23,51)
(23,47)-(23,61)
(23,47)-(23,61)
(23,53)-(23,55)
(23,53)-(23,61)
(23,57)-(23,58)
(23,60)-(23,61)
(23,68)-(23,71)
(24,23)-(24,27)
(24,23)-(24,37)
(24,23)-(24,37)
(24,23)-(24,58)
(24,29)-(24,31)
(24,29)-(24,37)
(24,33)-(24,34)
(24,36)-(24,37)
(24,44)-(24,48)
(24,44)-(24,58)
(24,44)-(24,58)
(24,50)-(24,52)
(24,50)-(24,58)
(24,54)-(24,55)
(24,57)-(24,58)
(26,7)-(28,26)
(26,11)-(26,15)
(26,11)-(26,25)
(26,11)-(26,25)
(26,11)-(26,45)
(26,11)-(26,45)
(26,17)-(26,19)
(26,17)-(26,25)
(26,21)-(26,22)
(26,24)-(26,25)
(26,31)-(26,35)
(26,31)-(26,45)
(26,31)-(26,45)
(26,37)-(26,39)
(26,37)-(26,45)
(26,41)-(26,42)
(26,44)-(26,45)
(27,12)-(27,16)
(27,12)-(27,26)
(27,12)-(27,26)
(27,18)-(27,20)
(27,18)-(27,26)
(27,22)-(27,23)
(27,25)-(27,26)
(28,12)-(28,16)
(28,12)-(28,26)
(28,12)-(28,26)
(28,18)-(28,20)
(28,18)-(28,26)
(28,22)-(28,23)
(28,25)-(28,26)
(30,8)-(30,12)
(30,8)-(32,19)
(30,8)-(33,15)
(30,13)-(30,15)
(31,13)-(31,16)
(31,13)-(31,38)
(31,13)-(31,72)
(31,13)-(32,19)
(31,18)-(31,20)
(31,18)-(31,38)
(31,25)-(31,29)
(31,25)-(31,38)
(31,25)-(31,38)
(31,31)-(31,32)
(31,31)-(31,38)
(31,34)-(31,35)
(31,37)-(31,38)
(31,47)-(31,50)
(31,47)-(31,72)
(31,52)-(31,54)
(31,52)-(31,72)
(31,59)-(31,63)
(31,59)-(31,72)
(31,59)-(31,72)
(31,65)-(31,66)
(31,65)-(31,72)
(31,68)-(31,69)
(31,71)-(31,72)
(32,16)-(32,19)
(33,12)-(33,15)
(35,7)-(43,72)
(35,15)-(35,24)
(35,15)-(35,40)
(35,26)-(35,30)
(35,26)-(35,40)
(35,26)-(35,40)
(35,32)-(35,34)
(35,32)-(35,40)
(35,36)-(35,37)
(35,39)-(35,40)
(36,7)-(43,72)
(36,15)-(36,24)
(36,15)-(36,40)
(36,26)-(36,30)
(36,26)-(36,40)
(36,26)-(36,40)
(36,32)-(36,34)
(36,32)-(36,40)
(36,36)-(36,37)
(36,39)-(36,40)
(37,7)-(43,72)
(37,16)-(37,44)
(37,18)-(37,44)
(37,22)-(37,44)
(37,22)-(37,44)
(37,25)-(37,26)
(37,25)-(37,30)
(37,25)-(37,30)
(37,25)-(37,30)
(37,29)-(37,30)
(37,36)-(37,37)
(37,43)-(37,44)
(38,7)-(43,72)
(38,18)-(38,65)
(38,23)-(38,65)
(38,23)-(38,65)
(38,31)-(38,34)
(38,31)-(38,41)
(38,31)-(38,41)
(38,31)-(38,41)
(38,35)-(38,38)
(38,39)-(38,41)
(38,46)-(38,49)
(38,46)-(38,51)
(38,46)-(38,51)
(38,46)-(38,65)
(38,50)-(38,51)
(38,57)-(38,60)
(38,57)-(38,65)
(38,61)-(38,65)
(39,11)-(39,15)
(39,11)-(39,24)
(39,11)-(39,24)
(39,17)-(39,18)
(39,17)-(39,24)
(39,20)-(39,21)
(39,23)-(39,24)
(40,14)-(40,20)
(40,14)-(40,32)
(42,10)-(42,14)
(42,10)-(43,72)
(42,11)-(42,14)
*)

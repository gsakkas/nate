
let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;

let padZero l1 l2 =
  if (List.length l1) < (List.length l2)
  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)
  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match x with
      | (v1,v2) -> (match a with | ([],[]) -> ((v1 :: a), (v2 :: a))) in
    let base = ([], []) in
    let args = List.combine l1 l2 in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;

let padZero l1 l2 =
  if (List.length l1) < (List.length l2)
  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)
  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match x with
      | (v1,v2) ->
          (match a with | (list1,list2) -> ((v1 :: list1), (v2 :: list2))) in
    let base = ([], []) in
    let args = List.combine l1 l2 in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(16,21)-(16,67)
(16,55)-(16,56)
(16,66)-(16,67)
(17,5)-(19,52)
(17,17)-(17,19)
(17,17)-(17,23)
*)

(* type error slice
(2,4)-(2,67)
(2,15)-(2,65)
(2,17)-(2,65)
(2,21)-(2,65)
(2,21)-(2,65)
(2,24)-(2,25)
(2,24)-(2,29)
(2,24)-(2,29)
(2,24)-(2,29)
(2,28)-(2,29)
(2,35)-(2,36)
(2,35)-(2,55)
(2,41)-(2,46)
(2,41)-(2,55)
(2,41)-(2,55)
(2,41)-(2,55)
(2,47)-(2,48)
(2,50)-(2,51)
(2,50)-(2,55)
(2,54)-(2,55)
(2,63)-(2,65)
(4,4)-(7,80)
(4,13)-(7,76)
(4,16)-(7,76)
(5,7)-(5,18)
(5,7)-(5,21)
(5,7)-(5,21)
(5,19)-(5,21)
(5,26)-(5,37)
(5,26)-(5,40)
(5,26)-(5,40)
(5,38)-(5,40)
(6,10)-(6,21)
(6,10)-(6,72)
(6,10)-(6,77)
(6,23)-(6,28)
(6,23)-(6,66)
(6,33)-(6,44)
(6,33)-(6,47)
(6,33)-(6,47)
(6,45)-(6,47)
(6,52)-(6,63)
(6,52)-(6,66)
(6,52)-(6,66)
(6,64)-(6,66)
(6,70)-(6,72)
(6,75)-(6,77)
(7,14)-(7,25)
(7,14)-(7,76)
(7,37)-(7,48)
(7,37)-(7,51)
(7,56)-(7,67)
(7,56)-(7,70)
(7,56)-(7,70)
(7,68)-(7,70)
(7,74)-(7,76)
(9,20)-(10,70)
(10,3)-(10,70)
(10,3)-(10,70)
(10,3)-(10,70)
(10,3)-(10,70)
(10,3)-(10,70)
(10,9)-(10,10)
(10,24)-(10,26)
(10,37)-(10,70)
(10,37)-(10,70)
(10,40)-(10,41)
(10,40)-(10,45)
(10,51)-(10,61)
(10,51)-(10,63)
(10,69)-(10,70)
(12,4)-(20,37)
(12,12)-(20,33)
(12,15)-(20,33)
(13,3)-(20,33)
(13,12)-(19,52)
(14,5)-(19,52)
(14,5)-(19,52)
(14,11)-(16,67)
(14,13)-(16,67)
(15,7)-(16,67)
(15,7)-(16,67)
(15,13)-(15,14)
(16,21)-(16,67)
(16,21)-(16,67)
(16,21)-(16,67)
(16,21)-(16,67)
(16,27)-(16,28)
(16,49)-(16,51)
(16,49)-(16,56)
(16,49)-(16,67)
(16,55)-(16,56)
(16,60)-(16,62)
(16,60)-(16,67)
(16,66)-(16,67)
(17,5)-(19,52)
(17,5)-(19,52)
(17,17)-(17,19)
(17,17)-(17,23)
(17,21)-(17,23)
(18,5)-(19,52)
(18,5)-(19,52)
(18,16)-(18,28)
(18,16)-(18,34)
(18,16)-(18,34)
(18,16)-(18,34)
(18,29)-(18,31)
(18,32)-(18,34)
(19,5)-(19,52)
(19,5)-(19,52)
(19,19)-(19,33)
(19,19)-(19,45)
(19,19)-(19,45)
(19,19)-(19,45)
(19,19)-(19,45)
(19,34)-(19,35)
(19,36)-(19,40)
(19,41)-(19,45)
(19,49)-(19,52)
(20,15)-(20,18)
(20,15)-(20,33)
(20,15)-(20,33)
(20,20)-(20,27)
(20,20)-(20,33)
(20,20)-(20,33)
(20,28)-(20,30)
(20,31)-(20,33)
*)

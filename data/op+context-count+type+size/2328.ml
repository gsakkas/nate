
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Special1 of expr* expr* expr
  | Special2 of expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildSpecial1 (e1,e2,e3) = Special1 (e1, e2, e3);;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth < 1
  then
    let base = rand (0, 2) in
    match base with
    | 0 -> buildX ()
    | 1 -> buildY ()
    | _ -> (if base < 0 then buildX () else buildY ())
  else
    (let recurse = rand (0, 6) in
     match recurse with
     | 0 -> buildSine (build (rand, (depth - 1)))
     | 1 -> buildCosine (build (rand, (depth - 1)))
     | 2 ->
         buildAverage
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 3 ->
         buildTimes
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 4 ->
         buildThresh
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
             (build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 5 ->
         buildSpecial1
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | _ ->
         if recurse > 2
         then buildCosine (build (rand, (depth - 1)))
         else buildSine (build (rand, (depth - 1))));;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Special1 of expr* expr* expr
  | Special2 of expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildSpecial1 (e1,e2,e3) = Special1 (e1, e2, e3);;

let buildSpecial2 (e1,e2) = Special2 (e1, e2);;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth < 1
  then
    let base = rand (0, 2) in
    match base with
    | 0 -> buildX ()
    | 1 -> buildY ()
    | _ -> (if base < 0 then buildX () else buildY ())
  else
    (let recurse = rand (0, 6) in
     match recurse with
     | 0 -> buildSine (build (rand, (depth - 1)))
     | 1 -> buildCosine (build (rand, (depth - 1)))
     | 2 ->
         buildAverage
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 3 ->
         buildTimes
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 4 ->
         buildThresh
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
             (build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 5 ->
         buildSpecial1
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
             (build (rand, (depth - 1))))
     | 6 ->
         buildSpecial2
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | _ ->
         if recurse > 2
         then buildCosine (build (rand, (depth - 1)))
         else buildSine (build (rand, (depth - 1))));;

*)

(* changed spans
(21,18)-(21,67)
(39,6)-(58,49)
(44,14)-(44,37)
(44,43)-(44,66)
(47,14)-(47,37)
(47,43)-(47,66)
(54,14)-(54,66)
(56,10)-(58,49)
(56,13)-(56,20)
(56,13)-(56,24)
(56,23)-(56,24)
(57,15)-(57,26)
(57,28)-(57,51)
(58,15)-(58,24)
(58,26)-(58,49)
*)

(* type error slice
(13,4)-(13,46)
(13,19)-(13,43)
(13,28)-(13,43)
(13,37)-(13,39)
(13,41)-(13,43)
(15,4)-(15,31)
(15,17)-(15,29)
(15,21)-(15,29)
(15,28)-(15,29)
(17,4)-(17,27)
(17,15)-(17,25)
(17,19)-(17,25)
(17,24)-(17,25)
(19,4)-(19,55)
(19,20)-(19,52)
(19,32)-(19,52)
(19,42)-(19,44)
(19,46)-(19,48)
(19,50)-(19,52)
(21,4)-(21,70)
(21,18)-(21,67)
(21,39)-(21,67)
(21,47)-(21,48)
(21,50)-(21,51)
(21,53)-(21,59)
(21,61)-(21,67)
(23,4)-(23,42)
(23,17)-(23,39)
(23,26)-(23,39)
(23,33)-(23,35)
(23,37)-(23,39)
(25,4)-(25,23)
(25,12)-(25,21)
(25,12)-(25,21)
(25,17)-(25,21)
(27,4)-(27,23)
(27,12)-(27,21)
(27,12)-(27,21)
(27,17)-(27,21)
(29,16)-(58,49)
(30,3)-(58,49)
(30,3)-(58,49)
(30,6)-(30,11)
(30,6)-(30,15)
(30,6)-(30,15)
(30,6)-(30,15)
(30,14)-(30,15)
(32,5)-(36,54)
(32,5)-(36,54)
(32,16)-(32,20)
(32,16)-(32,26)
(32,16)-(32,26)
(32,22)-(32,23)
(32,22)-(32,26)
(32,25)-(32,26)
(33,5)-(36,54)
(33,5)-(36,54)
(33,5)-(36,54)
(33,5)-(36,54)
(33,5)-(36,54)
(33,5)-(36,54)
(33,11)-(33,15)
(34,12)-(34,18)
(34,12)-(34,21)
(34,19)-(34,21)
(35,12)-(35,18)
(35,12)-(35,21)
(35,19)-(35,21)
(36,13)-(36,54)
(36,13)-(36,54)
(36,16)-(36,20)
(36,16)-(36,24)
(36,16)-(36,24)
(36,16)-(36,24)
(36,23)-(36,24)
(36,30)-(36,36)
(36,30)-(36,39)
(36,37)-(36,39)
(36,45)-(36,51)
(36,45)-(36,54)
(36,52)-(36,54)
(38,6)-(58,49)
(38,6)-(58,49)
(38,20)-(38,24)
(38,20)-(38,30)
(38,26)-(38,27)
(38,26)-(38,30)
(38,29)-(38,30)
(39,6)-(58,49)
(39,6)-(58,49)
(39,6)-(58,49)
(39,6)-(58,49)
(39,6)-(58,49)
(39,6)-(58,49)
(39,6)-(58,49)
(39,6)-(58,49)
(39,6)-(58,49)
(39,6)-(58,49)
(39,6)-(58,49)
(39,6)-(58,49)
(39,6)-(58,49)
(39,6)-(58,49)
(39,12)-(39,19)
(40,13)-(40,22)
(40,13)-(40,47)
(40,13)-(40,47)
(40,24)-(40,29)
(40,24)-(40,47)
(40,24)-(40,47)
(40,31)-(40,35)
(40,31)-(40,47)
(40,38)-(40,43)
(40,38)-(40,47)
(40,46)-(40,47)
(41,13)-(41,24)
(41,13)-(41,49)
(41,26)-(41,31)
(41,26)-(41,49)
(41,33)-(41,37)
(41,33)-(41,49)
(41,40)-(41,45)
(41,40)-(41,49)
(41,48)-(41,49)
(43,10)-(43,22)
(43,10)-(44,66)
(44,14)-(44,19)
(44,14)-(44,37)
(44,14)-(44,66)
(44,21)-(44,25)
(44,21)-(44,37)
(44,28)-(44,33)
(44,28)-(44,37)
(44,36)-(44,37)
(44,43)-(44,48)
(44,43)-(44,66)
(44,50)-(44,54)
(44,50)-(44,66)
(44,57)-(44,62)
(44,57)-(44,66)
(44,65)-(44,66)
(46,10)-(46,20)
(46,10)-(47,66)
(47,14)-(47,19)
(47,14)-(47,37)
(47,14)-(47,66)
(47,21)-(47,25)
(47,21)-(47,37)
(47,28)-(47,33)
(47,28)-(47,37)
(47,36)-(47,37)
(47,43)-(47,48)
(47,43)-(47,66)
(47,50)-(47,54)
(47,50)-(47,66)
(47,57)-(47,62)
(47,57)-(47,66)
(47,65)-(47,66)
(49,10)-(49,21)
(49,10)-(51,67)
(50,14)-(50,19)
(50,14)-(50,37)
(50,14)-(51,67)
(50,21)-(50,25)
(50,21)-(50,37)
(50,28)-(50,33)
(50,28)-(50,37)
(50,36)-(50,37)
(50,43)-(50,48)
(50,43)-(50,66)
(50,50)-(50,54)
(50,50)-(50,66)
(50,57)-(50,62)
(50,57)-(50,66)
(50,65)-(50,66)
(51,15)-(51,20)
(51,15)-(51,38)
(51,22)-(51,26)
(51,22)-(51,38)
(51,29)-(51,34)
(51,29)-(51,38)
(51,37)-(51,38)
(51,44)-(51,49)
(51,44)-(51,67)
(51,51)-(51,55)
(51,51)-(51,67)
(51,58)-(51,63)
(51,58)-(51,67)
(51,66)-(51,67)
(53,10)-(53,23)
(53,10)-(54,66)
(53,10)-(54,66)
(54,14)-(54,19)
(54,14)-(54,37)
(54,14)-(54,66)
(54,21)-(54,25)
(54,21)-(54,37)
(54,28)-(54,33)
(54,28)-(54,37)
(54,36)-(54,37)
(54,43)-(54,48)
(54,43)-(54,66)
(54,50)-(54,54)
(54,50)-(54,66)
(54,57)-(54,62)
(54,57)-(54,66)
(54,65)-(54,66)
(56,10)-(58,49)
(56,10)-(58,49)
(56,13)-(56,20)
(56,13)-(56,24)
(56,13)-(56,24)
(56,23)-(56,24)
(57,15)-(57,26)
(57,15)-(57,51)
(57,28)-(57,33)
(57,28)-(57,51)
(57,35)-(57,39)
(57,35)-(57,51)
(57,42)-(57,47)
(57,42)-(57,51)
(57,50)-(57,51)
(58,15)-(58,24)
(58,15)-(58,49)
(58,26)-(58,31)
(58,26)-(58,49)
(58,33)-(58,37)
(58,33)-(58,49)
(58,40)-(58,45)
(58,40)-(58,49)
(58,48)-(58,49)
*)

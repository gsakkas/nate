
let rec clone x n =
  if n < 1
  then []
  else
    (let rec helper acc f x =
       match x with | 0 -> acc | _ -> helper (f :: acc) f (x - 1) in
     helper [] x n);;

let padZero l1 l2 =
  let x = (List.length l1) - (List.length l2) in
  if x != 0
  then
    (if x < 0
     then (((clone 0 (abs x)) @ l1), l2)
     else (l1, ((clone 0 (abs x)) @ l2)))
  else (l1, l2);;

let rec removeZero l =
  match l with | x::xs -> if x = 0 then removeZero xs else l | _ -> l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match x with
      | (b,c) ->
          let sum = b + c in
          if sum < 10
          then
            (match a with
             | (len,[]) -> (len, [sum])
             | (len,x'::xs') ->
                 if x' = (-1)
                 then
                   (if sum = 9
                    then (len, ((-1) :: 0 :: xs'))
                    else (len, ((sum + 1) :: xs')))
                 else (len, (sum :: x' :: xs')))
          else
            (match a with
             | (len,[]) -> (len, [(-1); sum mod 10])
             | (len,x'::xs') ->
                 if x' = (-1)
                 then (-1) :: ((sum mod 10) + 1) :: a
                 else (len, ((-1) :: (sum mod 10) :: x' :: xs'))) in
    let base = ((List.length l1), []) in
    let args = List.combine (List.rev l1) (List.rev l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n =
  if n < 1
  then []
  else
    (let rec helper acc f x =
       match x with | 0 -> acc | _ -> helper (f :: acc) f (x - 1) in
     helper [] x n);;

let padZero l1 l2 =
  let x = (List.length l1) - (List.length l2) in
  if x != 0
  then
    (if x < 0
     then (((clone 0 (abs x)) @ l1), l2)
     else (l1, ((clone 0 (abs x)) @ l2)))
  else (l1, l2);;

let rec removeZero l =
  match l with | x::xs -> if x = 0 then removeZero xs else l | _ -> l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match x with
      | (b,c) ->
          let sum = b + c in
          if sum < 10
          then
            (match a with
             | (len,[]) -> (len, [sum])
             | (len,x'::xs') ->
                 if x' = (-1)
                 then
                   (if sum = 9
                    then (len, ((-1) :: 0 :: xs'))
                    else (len, ((sum + 1) :: xs')))
                 else (len, (sum :: x' :: xs')))
          else
            (match a with
             | (len,[]) -> (len, [(-1); sum mod 10])
             | (len,x'::xs') ->
                 if x' = (-1)
                 then (len, ((-1) :: ((sum mod 10) + 1) :: xs'))
                 else (len, ((-1) :: (sum mod 10) :: x' :: xs'))) in
    let base = ((List.length l1), []) in
    let args = List.combine (List.rev l1) (List.rev l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(44,24)-(44,54)
(44,53)-(44,54)
*)

(* type error slice
(2,4)-(8,22)
(2,15)-(8,19)
(2,17)-(8,19)
(3,3)-(8,19)
(3,3)-(8,19)
(3,6)-(3,7)
(3,6)-(3,11)
(3,6)-(3,11)
(3,6)-(3,11)
(3,10)-(3,11)
(4,8)-(4,10)
(6,6)-(8,19)
(6,6)-(8,19)
(6,21)-(7,65)
(6,25)-(7,65)
(6,27)-(7,65)
(7,8)-(7,65)
(7,8)-(7,65)
(7,8)-(7,65)
(7,8)-(7,65)
(7,14)-(7,15)
(7,28)-(7,31)
(7,39)-(7,45)
(7,39)-(7,65)
(7,39)-(7,65)
(7,39)-(7,65)
(7,39)-(7,65)
(7,47)-(7,48)
(7,47)-(7,55)
(7,52)-(7,55)
(7,57)-(7,58)
(7,60)-(7,61)
(7,60)-(7,65)
(7,60)-(7,65)
(7,64)-(7,65)
(8,6)-(8,12)
(8,6)-(8,19)
(8,6)-(8,19)
(8,6)-(8,19)
(8,13)-(8,15)
(8,16)-(8,17)
(8,18)-(8,19)
(10,4)-(17,18)
(10,13)-(17,15)
(10,16)-(17,15)
(11,3)-(17,15)
(11,3)-(17,15)
(11,12)-(11,23)
(11,12)-(11,26)
(11,12)-(11,26)
(11,12)-(11,45)
(11,24)-(11,26)
(11,31)-(11,42)
(11,31)-(11,45)
(11,31)-(11,45)
(11,43)-(11,45)
(12,3)-(17,15)
(12,3)-(17,15)
(12,6)-(12,7)
(12,6)-(12,12)
(12,6)-(12,12)
(12,11)-(12,12)
(14,6)-(16,39)
(14,6)-(16,39)
(14,9)-(14,10)
(14,9)-(14,14)
(14,9)-(14,14)
(14,13)-(14,14)
(15,14)-(15,19)
(15,14)-(15,28)
(15,14)-(15,28)
(15,14)-(15,28)
(15,14)-(15,35)
(15,14)-(15,35)
(15,14)-(15,35)
(15,14)-(15,40)
(15,20)-(15,21)
(15,23)-(15,26)
(15,23)-(15,28)
(15,27)-(15,28)
(15,31)-(15,32)
(15,33)-(15,35)
(15,38)-(15,40)
(16,12)-(16,14)
(16,12)-(16,39)
(16,18)-(16,23)
(16,18)-(16,32)
(16,18)-(16,39)
(16,18)-(16,39)
(16,18)-(16,39)
(16,24)-(16,25)
(16,27)-(16,30)
(16,27)-(16,32)
(16,31)-(16,32)
(16,35)-(16,36)
(16,37)-(16,39)
(17,9)-(17,11)
(17,9)-(17,15)
(17,13)-(17,15)
(19,20)-(20,70)
(20,3)-(20,70)
(20,3)-(20,70)
(20,9)-(20,10)
(20,27)-(20,61)
(20,27)-(20,61)
(20,30)-(20,31)
(20,30)-(20,35)
(20,41)-(20,51)
(20,41)-(20,54)
(20,60)-(20,61)
(20,69)-(20,70)
(22,4)-(49,37)
(22,12)-(49,33)
(22,15)-(49,33)
(23,3)-(49,33)
(23,12)-(48,52)
(24,5)-(48,52)
(24,11)-(45,63)
(24,13)-(45,63)
(25,7)-(45,63)
(25,13)-(25,14)
(27,11)-(45,63)
(27,11)-(45,63)
(27,21)-(27,22)
(27,21)-(27,26)
(27,25)-(27,26)
(28,11)-(45,63)
(28,11)-(45,63)
(28,14)-(28,17)
(28,14)-(28,22)
(28,14)-(28,22)
(28,20)-(28,22)
(30,14)-(38,46)
(30,14)-(38,46)
(30,14)-(38,46)
(30,14)-(38,46)
(30,14)-(38,46)
(30,14)-(38,46)
(30,14)-(38,46)
(30,20)-(30,21)
(31,29)-(31,32)
(31,29)-(31,39)
(31,34)-(31,39)
(31,34)-(31,39)
(31,35)-(31,38)
(33,18)-(38,46)
(33,18)-(38,46)
(33,21)-(33,23)
(33,21)-(33,29)
(33,21)-(33,29)
(33,21)-(33,29)
(33,27)-(33,29)
(35,21)-(37,49)
(35,21)-(37,49)
(35,24)-(35,27)
(35,24)-(35,31)
(35,24)-(35,31)
(35,30)-(35,31)
(36,27)-(36,30)
(36,27)-(36,49)
(36,34)-(36,36)
(36,34)-(36,49)
(36,41)-(36,42)
(36,41)-(36,49)
(36,46)-(36,49)
(37,27)-(37,30)
(37,27)-(37,49)
(37,34)-(37,37)
(37,34)-(37,41)
(37,34)-(37,49)
(37,40)-(37,41)
(37,46)-(37,49)
(38,24)-(38,27)
(38,24)-(38,46)
(38,30)-(38,33)
(38,30)-(38,46)
(38,37)-(38,39)
(38,37)-(38,46)
(38,43)-(38,46)
(40,14)-(45,63)
(40,14)-(45,63)
(40,14)-(45,63)
(40,14)-(45,63)
(40,14)-(45,63)
(40,14)-(45,63)
(40,14)-(45,63)
(40,20)-(40,21)
(41,29)-(41,32)
(41,29)-(41,52)
(41,34)-(41,52)
(41,34)-(41,52)
(41,36)-(41,38)
(41,41)-(41,44)
(41,41)-(41,51)
(41,49)-(41,51)
(43,18)-(45,63)
(43,18)-(45,63)
(43,21)-(43,23)
(43,21)-(43,29)
(43,21)-(43,29)
(43,21)-(43,29)
(43,27)-(43,29)
(44,24)-(44,26)
(44,24)-(44,54)
(44,33)-(44,36)
(44,33)-(44,43)
(44,33)-(44,48)
(44,33)-(44,54)
(44,41)-(44,43)
(44,47)-(44,48)
(44,53)-(44,54)
(45,24)-(45,27)
(45,24)-(45,63)
(45,31)-(45,33)
(45,31)-(45,63)
(45,39)-(45,42)
(45,39)-(45,49)
(45,39)-(45,63)
(45,47)-(45,49)
(45,54)-(45,56)
(45,54)-(45,63)
(45,60)-(45,63)
(46,5)-(48,52)
(46,18)-(46,29)
(46,18)-(46,32)
(46,18)-(46,32)
(46,18)-(46,37)
(46,30)-(46,32)
(46,35)-(46,37)
(47,5)-(48,52)
(47,16)-(47,28)
(47,16)-(47,55)
(47,16)-(47,55)
(47,16)-(47,55)
(47,30)-(47,38)
(47,30)-(47,41)
(47,30)-(47,41)
(47,39)-(47,41)
(47,44)-(47,52)
(47,44)-(47,55)
(47,44)-(47,55)
(47,53)-(47,55)
(48,19)-(48,33)
(48,19)-(48,45)
(48,19)-(48,45)
(48,19)-(48,45)
(48,34)-(48,35)
(48,36)-(48,40)
(48,41)-(48,45)
(49,15)-(49,18)
(49,15)-(49,33)
(49,15)-(49,33)
(49,20)-(49,27)
(49,20)-(49,33)
(49,20)-(49,33)
(49,20)-(49,33)
(49,28)-(49,30)
(49,31)-(49,33)
*)

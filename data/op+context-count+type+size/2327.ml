
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Special1 of expr* expr;;

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Special1 of expr* expr* expr
  | Special2 of expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildSpecial1 (e1,e2) = Special1 (e1, e2);;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth < 1
  then
    let base = rand (0, 2) in
    match base with
    | 0 -> buildX ()
    | 1 -> buildY ()
    | _ -> (if base < 0 then buildX () else buildY ())
  else
    (let recurse = rand (0, 6) in
     match recurse with
     | 0 -> buildSine (build (rand, (depth - 1)))
     | 1 -> buildCosine (build (rand, (depth - 1)))
     | 2 ->
         buildAverage
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 3 ->
         buildTimes
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 4 ->
         buildThresh
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
             (build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 5 ->
         buildSpecial1
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | _ ->
         if recurse > 2
         then buildCosine (build (rand, (depth - 1)))
         else buildSine (build (rand, (depth - 1))));;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Special1 of expr* expr* expr
  | Special2 of expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildSpecial1 (e1,e2,e3) = Special1 (e1, e2, e3);;

let buildSpecial2 (e1,e2) = Special2 (e1, e2);;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth < 1
  then
    let base = rand (0, 2) in
    match base with
    | 0 -> buildX ()
    | 1 -> buildY ()
    | _ -> (if base < 0 then buildX () else buildY ())
  else
    (let recurse = rand (0, 6) in
     match recurse with
     | 0 -> buildSine (build (rand, (depth - 1)))
     | 1 -> buildCosine (build (rand, (depth - 1)))
     | 2 ->
         buildAverage
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 3 ->
         buildTimes
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 4 ->
         buildThresh
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
             (build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 5 ->
         buildSpecial1
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
             (build (rand, (depth - 1))))
     | 6 ->
         buildSpecial2
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | _ ->
         if recurse > 2
         then buildCosine (build (rand, (depth - 1)))
         else buildSine (build (rand, (depth - 1))));;

*)

(* changed spans
(29,20)-(29,45)
(29,29)-(29,45)
(49,6)-(68,49)
(54,14)-(54,37)
(54,43)-(54,66)
(57,14)-(57,37)
(57,43)-(57,66)
(64,14)-(64,66)
(66,10)-(68,49)
(66,13)-(66,20)
(66,13)-(66,24)
(66,23)-(66,24)
(67,15)-(67,26)
(67,28)-(67,51)
(68,15)-(68,24)
(68,26)-(68,49)
*)

(* type error slice
(23,4)-(23,46)
(23,19)-(23,43)
(23,28)-(23,43)
(23,37)-(23,39)
(23,41)-(23,43)
(25,4)-(25,31)
(25,17)-(25,29)
(25,21)-(25,29)
(25,28)-(25,29)
(27,4)-(27,27)
(27,15)-(27,25)
(27,19)-(27,25)
(27,24)-(27,25)
(29,4)-(29,48)
(29,20)-(29,45)
(29,29)-(29,45)
(29,39)-(29,41)
(29,43)-(29,45)
(31,4)-(31,70)
(31,18)-(31,67)
(31,39)-(31,67)
(31,47)-(31,48)
(31,50)-(31,51)
(31,53)-(31,59)
(31,61)-(31,67)
(33,4)-(33,42)
(33,17)-(33,39)
(33,26)-(33,39)
(33,33)-(33,35)
(33,37)-(33,39)
(35,4)-(35,23)
(35,12)-(35,21)
(35,12)-(35,21)
(35,17)-(35,21)
(37,4)-(37,23)
(37,12)-(37,21)
(37,12)-(37,21)
(37,17)-(37,21)
(39,16)-(68,49)
(40,3)-(68,49)
(40,3)-(68,49)
(40,6)-(40,11)
(40,6)-(40,15)
(40,6)-(40,15)
(40,6)-(40,15)
(40,14)-(40,15)
(42,5)-(46,54)
(42,5)-(46,54)
(42,16)-(42,20)
(42,16)-(42,26)
(42,16)-(42,26)
(42,22)-(42,23)
(42,22)-(42,26)
(42,25)-(42,26)
(43,5)-(46,54)
(43,5)-(46,54)
(43,5)-(46,54)
(43,5)-(46,54)
(43,5)-(46,54)
(43,5)-(46,54)
(43,11)-(43,15)
(44,12)-(44,18)
(44,12)-(44,21)
(44,19)-(44,21)
(45,12)-(45,18)
(45,12)-(45,21)
(45,19)-(45,21)
(46,13)-(46,54)
(46,13)-(46,54)
(46,16)-(46,20)
(46,16)-(46,24)
(46,16)-(46,24)
(46,16)-(46,24)
(46,23)-(46,24)
(46,30)-(46,36)
(46,30)-(46,39)
(46,37)-(46,39)
(46,45)-(46,51)
(46,45)-(46,54)
(46,52)-(46,54)
(48,6)-(68,49)
(48,6)-(68,49)
(48,20)-(48,24)
(48,20)-(48,30)
(48,26)-(48,27)
(48,26)-(48,30)
(48,29)-(48,30)
(49,6)-(68,49)
(49,6)-(68,49)
(49,6)-(68,49)
(49,6)-(68,49)
(49,6)-(68,49)
(49,6)-(68,49)
(49,6)-(68,49)
(49,6)-(68,49)
(49,6)-(68,49)
(49,6)-(68,49)
(49,6)-(68,49)
(49,6)-(68,49)
(49,6)-(68,49)
(49,6)-(68,49)
(49,12)-(49,19)
(50,13)-(50,22)
(50,13)-(50,47)
(50,13)-(50,47)
(50,24)-(50,29)
(50,24)-(50,47)
(50,24)-(50,47)
(50,31)-(50,35)
(50,31)-(50,47)
(50,38)-(50,43)
(50,38)-(50,47)
(50,46)-(50,47)
(51,13)-(51,24)
(51,13)-(51,49)
(51,26)-(51,31)
(51,26)-(51,49)
(51,33)-(51,37)
(51,33)-(51,49)
(51,40)-(51,45)
(51,40)-(51,49)
(51,48)-(51,49)
(53,10)-(53,22)
(53,10)-(54,66)
(54,14)-(54,19)
(54,14)-(54,37)
(54,14)-(54,66)
(54,21)-(54,25)
(54,21)-(54,37)
(54,28)-(54,33)
(54,28)-(54,37)
(54,36)-(54,37)
(54,43)-(54,48)
(54,43)-(54,66)
(54,50)-(54,54)
(54,50)-(54,66)
(54,57)-(54,62)
(54,57)-(54,66)
(54,65)-(54,66)
(56,10)-(56,20)
(56,10)-(57,66)
(57,14)-(57,19)
(57,14)-(57,37)
(57,14)-(57,66)
(57,21)-(57,25)
(57,21)-(57,37)
(57,28)-(57,33)
(57,28)-(57,37)
(57,36)-(57,37)
(57,43)-(57,48)
(57,43)-(57,66)
(57,50)-(57,54)
(57,50)-(57,66)
(57,57)-(57,62)
(57,57)-(57,66)
(57,65)-(57,66)
(59,10)-(59,21)
(59,10)-(61,67)
(60,14)-(60,19)
(60,14)-(60,37)
(60,14)-(61,67)
(60,21)-(60,25)
(60,21)-(60,37)
(60,28)-(60,33)
(60,28)-(60,37)
(60,36)-(60,37)
(60,43)-(60,48)
(60,43)-(60,66)
(60,50)-(60,54)
(60,50)-(60,66)
(60,57)-(60,62)
(60,57)-(60,66)
(60,65)-(60,66)
(61,15)-(61,20)
(61,15)-(61,38)
(61,22)-(61,26)
(61,22)-(61,38)
(61,29)-(61,34)
(61,29)-(61,38)
(61,37)-(61,38)
(61,44)-(61,49)
(61,44)-(61,67)
(61,51)-(61,55)
(61,51)-(61,67)
(61,58)-(61,63)
(61,58)-(61,67)
(61,66)-(61,67)
(63,10)-(63,23)
(63,10)-(64,66)
(64,14)-(64,19)
(64,14)-(64,37)
(64,14)-(64,66)
(64,21)-(64,25)
(64,21)-(64,37)
(64,28)-(64,33)
(64,28)-(64,37)
(64,36)-(64,37)
(64,43)-(64,48)
(64,43)-(64,66)
(64,50)-(64,54)
(64,50)-(64,66)
(64,57)-(64,62)
(64,57)-(64,66)
(64,65)-(64,66)
(66,10)-(68,49)
(66,10)-(68,49)
(66,13)-(66,20)
(66,13)-(66,24)
(66,13)-(66,24)
(66,23)-(66,24)
(67,15)-(67,26)
(67,15)-(67,51)
(67,28)-(67,33)
(67,28)-(67,51)
(67,35)-(67,39)
(67,35)-(67,51)
(67,42)-(67,47)
(67,42)-(67,51)
(67,50)-(67,51)
(68,15)-(68,24)
(68,15)-(68,49)
(68,26)-(68,31)
(68,26)-(68,49)
(68,33)-(68,37)
(68,33)-(68,49)
(68,40)-(68,45)
(68,40)-(68,49)
(68,48)-(68,49)
*)

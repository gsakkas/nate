
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Inverse of expr
  | Max of expr* expr
  | Range of expr* expr* expr;;

let pi = 4.0 *. (atan 1.0);;

let rec eval (e,x,y) =
  match e with
  | VarX  -> x
  | VarY  -> y
  | Sine a -> sin (pi *. (eval (a, x, y)))
  | Cosine a -> cos (pi *. (eval (a, x, y)))
  | Average (a,b) -> ((eval (a, x, y)) +. (eval (b, x, y))) /. 2.
  | Times (a,b) -> (eval (a, x, y)) *. (eval (b, x, y))
  | Thresh (a,b,c,d) ->
      if (eval (a, x, y)) < (eval (b, x, y))
      then eval (c, x, y)
      else eval (d, x, y)
  | Inverse a ->
      let result = eval (a, x, y) in if result = 0. then 0 else 1 /. result
  | Max (a,b) ->
      let aResult = eval (a, x, y) in
      let bResult = eval (b, x, y) in
      if aResult > bResult then aResult else bResult
  | Range (a,b,c) ->
      let aResult = eval (a, x, y) in
      let bResult = eval (b, x, y) in
      let cResult = eval (c, x, y) in
      if aResult < bResult
      then bResult
      else if aResult < cResult then cResult else aResult;;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Inverse of expr
  | Max of expr* expr
  | Range of expr* expr* expr;;

let pi = 4.0 *. (atan 1.0);;

let rec eval (e,x,y) =
  match e with
  | VarX  -> x
  | VarY  -> y
  | Sine a -> sin (pi *. (eval (a, x, y)))
  | Cosine a -> cos (pi *. (eval (a, x, y)))
  | Average (a,b) -> ((eval (a, x, y)) +. (eval (b, x, y))) /. 2.
  | Times (a,b) -> (eval (a, x, y)) *. (eval (b, x, y))
  | Thresh (a,b,c,d) ->
      if (eval (a, x, y)) < (eval (b, x, y))
      then eval (c, x, y)
      else eval (d, x, y)
  | Inverse a ->
      let result = eval (a, x, y) in if result = 0. then 0. else 1. /. result
  | Max (a,b) ->
      let aResult = eval (a, x, y) in
      let bResult = eval (b, x, y) in
      if aResult > bResult then aResult else bResult
  | Range (a,b,c) ->
      let aResult = eval (a, x, y) in
      let bResult = eval (b, x, y) in
      let cResult = eval (c, x, y) in
      if aResult < bResult
      then bResult
      else if aResult < cResult then cResult else aResult;;

*)

(* changed spans
(29,58)-(29,59)
(29,65)-(29,66)
*)

(* type error slice
(14,4)-(14,29)
(14,10)-(14,26)
(16,15)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,3)-(40,58)
(17,9)-(17,10)
(18,14)-(18,15)
(19,14)-(19,15)
(20,15)-(20,18)
(20,15)-(20,40)
(20,20)-(20,22)
(20,20)-(20,40)
(20,20)-(20,40)
(20,27)-(20,31)
(20,27)-(20,40)
(20,27)-(20,40)
(20,33)-(20,34)
(20,33)-(20,40)
(20,36)-(20,37)
(20,39)-(20,40)
(21,17)-(21,20)
(21,17)-(21,42)
(21,22)-(21,24)
(21,22)-(21,42)
(21,29)-(21,33)
(21,29)-(21,42)
(21,29)-(21,42)
(21,35)-(21,36)
(21,35)-(21,42)
(21,38)-(21,39)
(21,41)-(21,42)
(22,24)-(22,28)
(22,24)-(22,37)
(22,24)-(22,37)
(22,24)-(22,57)
(22,24)-(22,66)
(22,30)-(22,31)
(22,30)-(22,37)
(22,33)-(22,34)
(22,36)-(22,37)
(22,44)-(22,48)
(22,44)-(22,57)
(22,44)-(22,57)
(22,50)-(22,51)
(22,50)-(22,57)
(22,53)-(22,54)
(22,56)-(22,57)
(22,64)-(22,66)
(23,21)-(23,25)
(23,21)-(23,34)
(23,21)-(23,34)
(23,21)-(23,54)
(23,27)-(23,28)
(23,27)-(23,34)
(23,30)-(23,31)
(23,33)-(23,34)
(23,41)-(23,45)
(23,41)-(23,54)
(23,41)-(23,54)
(23,47)-(23,48)
(23,47)-(23,54)
(23,50)-(23,51)
(23,53)-(23,54)
(25,7)-(27,25)
(25,11)-(25,15)
(25,11)-(25,24)
(25,11)-(25,24)
(25,11)-(25,43)
(25,11)-(25,43)
(25,17)-(25,18)
(25,17)-(25,24)
(25,20)-(25,21)
(25,23)-(25,24)
(25,30)-(25,34)
(25,30)-(25,43)
(25,30)-(25,43)
(25,36)-(25,37)
(25,36)-(25,43)
(25,39)-(25,40)
(25,42)-(25,43)
(26,12)-(26,16)
(26,12)-(26,25)
(26,12)-(26,25)
(26,18)-(26,19)
(26,18)-(26,25)
(26,21)-(26,22)
(26,24)-(26,25)
(27,12)-(27,16)
(27,12)-(27,25)
(27,12)-(27,25)
(27,18)-(27,19)
(27,18)-(27,25)
(27,21)-(27,22)
(27,24)-(27,25)
(29,7)-(29,76)
(29,7)-(29,76)
(29,20)-(29,24)
(29,20)-(29,33)
(29,20)-(29,33)
(29,26)-(29,27)
(29,26)-(29,33)
(29,29)-(29,30)
(29,32)-(29,33)
(29,38)-(29,76)
(29,38)-(29,76)
(29,41)-(29,47)
(29,41)-(29,52)
(29,41)-(29,52)
(29,50)-(29,52)
(29,58)-(29,59)
(29,65)-(29,66)
(29,65)-(29,76)
(29,65)-(29,76)
(29,70)-(29,76)
(31,7)-(33,53)
(31,7)-(33,53)
(31,21)-(31,25)
(31,21)-(31,34)
(31,21)-(31,34)
(31,27)-(31,28)
(31,27)-(31,34)
(31,30)-(31,31)
(31,33)-(31,34)
(32,7)-(33,53)
(32,7)-(33,53)
(32,21)-(32,25)
(32,21)-(32,34)
(32,21)-(32,34)
(32,27)-(32,28)
(32,27)-(32,34)
(32,30)-(32,31)
(32,33)-(32,34)
(33,7)-(33,53)
(33,10)-(33,17)
(33,10)-(33,27)
(33,10)-(33,27)
(33,20)-(33,27)
(33,33)-(33,40)
(33,46)-(33,53)
(35,7)-(40,58)
(35,7)-(40,58)
(35,21)-(35,25)
(35,21)-(35,34)
(35,21)-(35,34)
(35,27)-(35,28)
(35,27)-(35,34)
(35,30)-(35,31)
(35,33)-(35,34)
(36,7)-(40,58)
(36,7)-(40,58)
(36,21)-(36,25)
(36,21)-(36,34)
(36,21)-(36,34)
(36,27)-(36,28)
(36,27)-(36,34)
(36,30)-(36,31)
(36,33)-(36,34)
(37,7)-(40,58)
(37,7)-(40,58)
(37,21)-(37,25)
(37,21)-(37,34)
(37,21)-(37,34)
(37,27)-(37,28)
(37,27)-(37,34)
(37,30)-(37,31)
(37,33)-(37,34)
(38,7)-(40,58)
(38,10)-(38,17)
(38,10)-(38,27)
(38,10)-(38,27)
(38,20)-(38,27)
(39,12)-(39,19)
(40,12)-(40,58)
(40,15)-(40,22)
(40,15)-(40,32)
(40,15)-(40,32)
(40,25)-(40,32)
(40,38)-(40,45)
(40,51)-(40,58)
*)


let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let diff = (List.length l2) - (List.length l1) in
  (((clone 0 diff) @ l1), ((clone 0 (- diff)) @ l2));;

let rec removeZero l =
  match l with | [] -> l | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (carry,num) = a in
      let (l1',l2') = x in
      let addit = (l1' + l2') + carry in
      ((addit / 10), (num @ (addit mod 10))) in
    let base = (0, []) in
    let args = List.combine l1 l2 in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let diff = (List.length l2) - (List.length l1) in
  (((clone 0 diff) @ l1), ((clone 0 (- diff)) @ l2));;

let rec removeZero l =
  match l with | [] -> l | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (carry,num) = a in
      let (l1',l2') = x in
      let addit = (l1' + l2') + carry in
      ((addit / 10), (num @ [addit mod 10])) in
    let base = (0, []) in
    let args = List.combine l1 l2 in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(17,30)-(17,42)
*)

(* type error slice
(2,4)-(2,68)
(2,15)-(2,64)
(2,17)-(2,64)
(2,21)-(2,64)
(2,21)-(2,64)
(2,24)-(2,25)
(2,24)-(2,30)
(2,24)-(2,30)
(2,24)-(2,30)
(2,29)-(2,30)
(2,36)-(2,38)
(2,44)-(2,45)
(2,44)-(2,64)
(2,50)-(2,55)
(2,50)-(2,64)
(2,50)-(2,64)
(2,50)-(2,64)
(2,56)-(2,57)
(2,59)-(2,60)
(2,59)-(2,64)
(2,63)-(2,64)
(4,4)-(6,55)
(4,13)-(6,51)
(4,16)-(6,51)
(5,15)-(5,26)
(5,15)-(5,29)
(5,15)-(5,29)
(5,27)-(5,29)
(5,34)-(5,45)
(5,34)-(5,48)
(5,34)-(5,48)
(5,46)-(5,48)
(6,6)-(6,11)
(6,6)-(6,18)
(6,6)-(6,24)
(6,20)-(6,21)
(6,22)-(6,24)
(6,29)-(6,51)
(6,47)-(6,48)
(6,49)-(6,51)
(8,20)-(9,69)
(9,3)-(9,69)
(9,3)-(9,69)
(9,3)-(9,69)
(9,3)-(9,69)
(9,3)-(9,69)
(9,9)-(9,10)
(9,24)-(9,25)
(9,36)-(9,69)
(9,36)-(9,69)
(9,39)-(9,40)
(9,39)-(9,44)
(9,50)-(9,60)
(9,50)-(9,62)
(9,68)-(9,69)
(11,4)-(21,37)
(11,12)-(21,33)
(11,15)-(21,33)
(12,3)-(21,33)
(12,12)-(20,52)
(13,5)-(20,52)
(13,5)-(20,52)
(13,11)-(17,42)
(13,13)-(17,42)
(14,7)-(17,42)
(14,7)-(17,42)
(14,25)-(14,26)
(15,7)-(17,42)
(15,7)-(17,42)
(15,23)-(15,24)
(16,7)-(17,42)
(16,7)-(17,42)
(16,20)-(16,23)
(16,20)-(16,38)
(16,26)-(16,29)
(16,33)-(16,38)
(17,9)-(17,14)
(17,9)-(17,19)
(17,9)-(17,42)
(17,17)-(17,19)
(17,23)-(17,26)
(17,23)-(17,42)
(17,23)-(17,42)
(17,23)-(17,42)
(17,27)-(17,28)
(17,30)-(17,35)
(17,30)-(17,42)
(17,40)-(17,42)
(18,5)-(20,52)
(18,5)-(20,52)
(18,17)-(18,22)
(18,20)-(18,22)
(19,5)-(20,52)
(19,5)-(20,52)
(19,16)-(19,28)
(19,16)-(19,34)
(19,16)-(19,34)
(19,16)-(19,34)
(19,29)-(19,31)
(19,32)-(19,34)
(20,5)-(20,52)
(20,5)-(20,52)
(20,19)-(20,33)
(20,19)-(20,45)
(20,19)-(20,45)
(20,19)-(20,45)
(20,19)-(20,45)
(20,34)-(20,35)
(20,36)-(20,40)
(20,41)-(20,45)
(20,49)-(20,52)
(21,15)-(21,18)
(21,15)-(21,33)
(21,15)-(21,33)
(21,20)-(21,27)
(21,20)-(21,33)
(21,20)-(21,33)
(21,28)-(21,30)
(21,31)-(21,33)
*)

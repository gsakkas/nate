
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) = (List.length l2)
  then (l1, l2)
  else
    if (List.length l1) < (List.length l2)
    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
    else (l1, (clone 0 (((List.length l1) - (List.length l2)) @ l2)));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) = (List.length l2)
  then (l1, l2)
  else
    if (List.length l1) < (List.length l2)
    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
    else (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2));;

*)

(* changed spans
(10,16)-(10,21)
(10,27)-(10,67)
(10,63)-(10,64)
*)

(* type error slice
(2,4)-(2,68)
(2,15)-(2,64)
(2,17)-(2,64)
(2,21)-(2,64)
(2,21)-(2,64)
(2,24)-(2,25)
(2,24)-(2,30)
(2,24)-(2,30)
(2,24)-(2,30)
(2,29)-(2,30)
(2,36)-(2,38)
(2,44)-(2,45)
(2,44)-(2,64)
(2,50)-(2,55)
(2,50)-(2,64)
(2,50)-(2,64)
(2,50)-(2,64)
(2,56)-(2,57)
(2,59)-(2,60)
(2,59)-(2,64)
(2,63)-(2,64)
(4,4)-(10,72)
(4,13)-(10,67)
(4,16)-(10,67)
(5,7)-(5,18)
(5,7)-(5,21)
(5,7)-(5,21)
(5,7)-(5,40)
(5,7)-(5,40)
(5,19)-(5,21)
(5,26)-(5,37)
(5,26)-(5,40)
(5,26)-(5,40)
(5,38)-(5,40)
(6,9)-(6,11)
(6,9)-(6,15)
(6,13)-(6,15)
(8,5)-(10,67)
(8,9)-(8,20)
(8,9)-(8,23)
(8,9)-(8,23)
(8,9)-(8,42)
(8,9)-(8,42)
(8,21)-(8,23)
(8,28)-(8,39)
(8,28)-(8,42)
(8,28)-(8,42)
(8,40)-(8,42)
(9,13)-(9,18)
(9,13)-(9,56)
(9,13)-(9,56)
(9,13)-(9,64)
(9,13)-(9,64)
(9,13)-(9,64)
(9,13)-(9,69)
(9,19)-(9,20)
(9,23)-(9,34)
(9,23)-(9,37)
(9,23)-(9,37)
(9,23)-(9,56)
(9,35)-(9,37)
(9,42)-(9,53)
(9,42)-(9,56)
(9,42)-(9,56)
(9,54)-(9,56)
(9,60)-(9,61)
(9,62)-(9,64)
(9,67)-(9,69)
(10,11)-(10,13)
(10,16)-(10,21)
(10,16)-(10,67)
(10,16)-(10,67)
(10,22)-(10,23)
(10,27)-(10,38)
(10,27)-(10,41)
(10,27)-(10,41)
(10,27)-(10,60)
(10,27)-(10,67)
(10,27)-(10,67)
(10,27)-(10,67)
(10,39)-(10,41)
(10,46)-(10,57)
(10,46)-(10,60)
(10,46)-(10,60)
(10,58)-(10,60)
(10,63)-(10,64)
(10,65)-(10,67)
*)

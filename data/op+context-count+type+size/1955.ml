
let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;

let padZero l1 l2 =
  (((clone 0 ((List.length l2) - (List.length l1))) @ l1),
    ((clone 0 ((List.length l1) - (List.length l2))) @ l2));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f (a1,a2) (x1,x2) =
      ((((x1 + x2) + a1) / 10), ((((x1 + x2) + a1) mod 10) :: a2)) in
    let base = (0, []) in
    let args = List.combine ((List.rev 0) :: l1) ((List.rev 0) :: l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;

let padZero l1 l2 =
  (((clone 0 ((List.length l2) - (List.length l1))) @ l1),
    ((clone 0 ((List.length l1) - (List.length l2))) @ l2));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f (a1,a2) (x1,x2) =
      ((((x1 + x2) + a1) / 10), ((((x1 + x2) + a1) mod 10) :: a2)) in
    let base = (0, []) in
    let args = List.combine (List.rev (0 :: l1)) (List.rev (0 :: l2)) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(16,31)-(16,48)
(16,40)-(16,41)
(16,52)-(16,69)
(16,61)-(16,62)
*)

(* type error slice
(2,4)-(2,67)
(2,15)-(2,65)
(2,17)-(2,65)
(2,21)-(2,65)
(2,21)-(2,65)
(2,24)-(2,25)
(2,24)-(2,29)
(2,24)-(2,29)
(2,24)-(2,29)
(2,28)-(2,29)
(2,35)-(2,36)
(2,35)-(2,55)
(2,41)-(2,46)
(2,41)-(2,55)
(2,41)-(2,55)
(2,41)-(2,55)
(2,47)-(2,48)
(2,50)-(2,51)
(2,50)-(2,55)
(2,54)-(2,55)
(2,63)-(2,65)
(4,4)-(6,62)
(4,13)-(6,58)
(4,16)-(6,58)
(5,6)-(5,11)
(5,6)-(5,49)
(5,6)-(5,57)
(5,16)-(5,27)
(5,16)-(5,30)
(5,16)-(5,30)
(5,28)-(5,30)
(5,35)-(5,46)
(5,35)-(5,49)
(5,35)-(5,49)
(5,47)-(5,49)
(5,53)-(5,54)
(5,55)-(5,57)
(6,7)-(6,58)
(6,17)-(6,28)
(6,17)-(6,31)
(6,36)-(6,47)
(6,36)-(6,50)
(6,36)-(6,50)
(6,48)-(6,50)
(6,54)-(6,55)
(6,56)-(6,58)
(8,20)-(9,70)
(9,3)-(9,70)
(9,3)-(9,70)
(9,3)-(9,70)
(9,3)-(9,70)
(9,3)-(9,70)
(9,9)-(9,10)
(9,24)-(9,26)
(9,37)-(9,70)
(9,37)-(9,70)
(9,40)-(9,41)
(9,40)-(9,45)
(9,51)-(9,61)
(9,51)-(9,63)
(9,69)-(9,70)
(11,4)-(18,37)
(11,12)-(18,33)
(11,15)-(18,33)
(12,3)-(18,33)
(12,12)-(17,52)
(13,5)-(17,52)
(13,12)-(14,65)
(13,20)-(14,65)
(14,11)-(14,13)
(14,16)-(14,18)
(14,22)-(14,24)
(14,63)-(14,65)
(15,5)-(17,52)
(15,17)-(15,22)
(15,20)-(15,22)
(16,5)-(17,52)
(16,16)-(16,28)
(16,16)-(16,69)
(16,16)-(16,69)
(16,16)-(16,69)
(16,31)-(16,39)
(16,31)-(16,41)
(16,31)-(16,41)
(16,31)-(16,48)
(16,40)-(16,41)
(16,46)-(16,48)
(16,52)-(16,60)
(16,52)-(16,62)
(16,52)-(16,62)
(16,52)-(16,69)
(16,61)-(16,62)
(16,67)-(16,69)
(17,19)-(17,33)
(17,19)-(17,45)
(17,19)-(17,45)
(17,19)-(17,45)
(17,34)-(17,35)
(17,36)-(17,40)
(17,41)-(17,45)
(18,15)-(18,18)
(18,15)-(18,33)
(18,15)-(18,33)
(18,20)-(18,27)
(18,20)-(18,33)
(18,20)-(18,33)
(18,28)-(18,30)
(18,31)-(18,33)
*)

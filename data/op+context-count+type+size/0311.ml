
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let a = List.length l1 in
  let b = List.length l2 in
  if a = b
  then (l1, l2)
  else
    if a < b
    then (((clone 0 (b - a)) @ l1), l2)
    else (l1, ((clone 0 (a - b)) @ l2));;

let padZero l1 l2 =
  if (List.length l1) = (List.length l2)
  then (l1, l2)
  else
    if (List.length l1) < (List.length l2)
    then padZero (0 :: l1) l2
    else padZero l1 (0 :: l2);;

let padZero l1 l2 =
  if (List.length l1) = (List.length l2)
  then (l1, l2)
  else
    if (List.length l1) < (List.length l2)
    then padZero (0 :: l1) l2
    else padZero l1 (0 :: l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (carry,result) = a in
      let (x1,x2) = x in
      let res = (x1 + x2) + carry in
      let newCarry = res / 10 in
      match result with
      | [] -> (newCarry, [newCarry; res mod 10])
      | h::t -> (newCarry, (newCarry :: (res mod 10) :: t)) in
    let base = [] in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let a = List.length l1 in
  let b = List.length l2 in
  if a = b
  then (l1, l2)
  else
    if a < b
    then (((clone 0 (b - a)) @ l1), l2)
    else (l1, ((clone 0 (a - b)) @ l2));;

let padZero l1 l2 =
  if (List.length l1) = (List.length l2)
  then (l1, l2)
  else
    if (List.length l1) < (List.length l2)
    then padZero (0 :: l1) l2
    else padZero l1 (0 :: l2);;

let padZero l1 l2 =
  if (List.length l1) = (List.length l2)
  then (l1, l2)
  else
    if (List.length l1) < (List.length l2)
    then padZero (0 :: l1) l2
    else padZero l1 (0 :: l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (carry,result) = a in
      let (x1,x2) = x in
      let res = (x1 + x2) + carry in
      let newCarry = res / 10 in
      match result with
      | [] -> (newCarry, [newCarry; res mod 10])
      | h::t -> (newCarry, (newCarry :: (res mod 10) :: t)) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(43,16)-(43,18)
*)

(* type error slice
(2,4)-(2,68)
(2,15)-(2,64)
(2,17)-(2,64)
(2,21)-(2,64)
(2,21)-(2,64)
(2,24)-(2,25)
(2,24)-(2,30)
(2,24)-(2,30)
(2,24)-(2,30)
(2,29)-(2,30)
(2,36)-(2,38)
(2,44)-(2,45)
(2,44)-(2,64)
(2,50)-(2,55)
(2,50)-(2,64)
(2,50)-(2,64)
(2,50)-(2,64)
(2,56)-(2,57)
(2,59)-(2,60)
(2,59)-(2,64)
(2,63)-(2,64)
(4,4)-(12,42)
(4,13)-(12,38)
(4,16)-(12,38)
(5,3)-(12,38)
(5,3)-(12,38)
(5,11)-(5,22)
(5,11)-(5,25)
(5,11)-(5,25)
(5,23)-(5,25)
(6,3)-(12,38)
(6,3)-(12,38)
(6,11)-(6,22)
(6,11)-(6,25)
(6,11)-(6,25)
(6,23)-(6,25)
(7,3)-(12,38)
(7,6)-(7,7)
(7,6)-(7,11)
(7,6)-(7,11)
(7,10)-(7,11)
(8,9)-(8,11)
(8,9)-(8,15)
(8,13)-(8,15)
(10,5)-(12,38)
(10,8)-(10,9)
(10,8)-(10,13)
(10,8)-(10,13)
(10,12)-(10,13)
(11,13)-(11,18)
(11,13)-(11,27)
(11,13)-(11,27)
(11,13)-(11,34)
(11,13)-(11,34)
(11,13)-(11,34)
(11,13)-(11,39)
(11,19)-(11,20)
(11,22)-(11,23)
(11,22)-(11,27)
(11,26)-(11,27)
(11,30)-(11,31)
(11,32)-(11,34)
(11,37)-(11,39)
(12,11)-(12,13)
(12,11)-(12,38)
(12,17)-(12,22)
(12,17)-(12,31)
(12,17)-(12,38)
(12,17)-(12,38)
(12,17)-(12,38)
(12,23)-(12,24)
(12,26)-(12,27)
(12,26)-(12,31)
(12,30)-(12,31)
(12,34)-(12,35)
(12,36)-(12,38)
(14,4)-(20,32)
(14,13)-(20,29)
(14,16)-(20,29)
(15,3)-(20,29)
(15,3)-(20,29)
(15,7)-(15,18)
(15,7)-(15,21)
(15,7)-(15,21)
(15,7)-(15,40)
(15,7)-(15,40)
(15,19)-(15,21)
(15,26)-(15,37)
(15,26)-(15,40)
(15,26)-(15,40)
(15,38)-(15,40)
(16,9)-(16,11)
(16,9)-(16,15)
(16,13)-(16,15)
(18,5)-(20,29)
(18,5)-(20,29)
(18,9)-(18,20)
(18,9)-(18,23)
(18,9)-(18,23)
(18,9)-(18,42)
(18,9)-(18,42)
(18,21)-(18,23)
(18,28)-(18,39)
(18,28)-(18,42)
(18,28)-(18,42)
(18,40)-(18,42)
(19,10)-(19,17)
(19,10)-(19,30)
(19,10)-(19,30)
(19,19)-(19,20)
(19,19)-(19,26)
(19,24)-(19,26)
(19,28)-(19,30)
(20,10)-(20,17)
(20,10)-(20,29)
(20,18)-(20,20)
(20,22)-(20,23)
(20,22)-(20,29)
(20,27)-(20,29)
(22,4)-(28,32)
(22,13)-(28,29)
(22,16)-(28,29)
(23,7)-(23,18)
(23,7)-(23,21)
(23,7)-(23,21)
(23,7)-(23,40)
(23,7)-(23,40)
(23,19)-(23,21)
(23,26)-(23,37)
(23,26)-(23,40)
(23,26)-(23,40)
(23,38)-(23,40)
(24,9)-(24,11)
(24,9)-(24,15)
(24,13)-(24,15)
(26,5)-(28,29)
(26,5)-(28,29)
(26,9)-(26,20)
(26,9)-(26,23)
(26,9)-(26,23)
(26,9)-(26,42)
(26,9)-(26,42)
(26,21)-(26,23)
(26,28)-(26,39)
(26,28)-(26,42)
(26,28)-(26,42)
(26,40)-(26,42)
(27,10)-(27,17)
(27,10)-(27,30)
(27,10)-(27,30)
(27,19)-(27,20)
(27,19)-(27,26)
(27,24)-(27,26)
(27,28)-(27,30)
(28,10)-(28,17)
(28,10)-(28,29)
(28,18)-(28,20)
(28,22)-(28,23)
(28,22)-(28,29)
(28,27)-(28,29)
(30,20)-(31,70)
(31,3)-(31,70)
(31,3)-(31,70)
(31,3)-(31,70)
(31,3)-(31,70)
(31,3)-(31,70)
(31,9)-(31,10)
(31,24)-(31,26)
(31,37)-(31,70)
(31,37)-(31,70)
(31,40)-(31,41)
(31,40)-(31,45)
(31,51)-(31,61)
(31,51)-(31,63)
(31,69)-(31,70)
(33,4)-(46,37)
(33,12)-(46,33)
(33,15)-(46,33)
(34,3)-(46,33)
(34,12)-(45,52)
(35,5)-(45,52)
(35,11)-(42,58)
(35,13)-(42,58)
(36,7)-(42,58)
(36,7)-(42,58)
(36,28)-(36,29)
(37,7)-(42,58)
(37,7)-(42,58)
(37,21)-(37,22)
(38,7)-(42,58)
(38,7)-(42,58)
(38,18)-(38,20)
(38,18)-(38,25)
(38,18)-(38,25)
(38,18)-(38,25)
(38,18)-(38,34)
(38,18)-(38,34)
(38,23)-(38,25)
(38,29)-(38,34)
(39,7)-(42,58)
(39,7)-(42,58)
(39,22)-(39,25)
(39,22)-(39,30)
(39,28)-(39,30)
(40,7)-(42,58)
(40,7)-(42,58)
(40,7)-(42,58)
(40,7)-(42,58)
(40,7)-(42,58)
(40,7)-(42,58)
(40,13)-(40,19)
(41,16)-(41,24)
(41,16)-(41,48)
(41,26)-(41,48)
(41,26)-(41,48)
(41,27)-(41,35)
(41,37)-(41,40)
(41,37)-(41,47)
(41,45)-(41,47)
(42,18)-(42,26)
(42,18)-(42,58)
(42,29)-(42,37)
(42,29)-(42,58)
(42,42)-(42,45)
(42,42)-(42,52)
(42,42)-(42,58)
(42,50)-(42,52)
(42,57)-(42,58)
(43,5)-(45,52)
(43,16)-(43,18)
(44,5)-(45,52)
(44,16)-(44,24)
(44,16)-(44,44)
(44,16)-(44,44)
(44,26)-(44,38)
(44,26)-(44,44)
(44,26)-(44,44)
(44,26)-(44,44)
(44,39)-(44,41)
(44,42)-(44,44)
(45,19)-(45,33)
(45,19)-(45,45)
(45,19)-(45,45)
(45,19)-(45,45)
(45,19)-(45,45)
(45,34)-(45,35)
(45,36)-(45,40)
(45,41)-(45,45)
(46,15)-(46,18)
(46,15)-(46,33)
(46,15)-(46,33)
(46,20)-(46,27)
(46,20)-(46,33)
(46,20)-(46,33)
(46,28)-(46,30)
(46,31)-(46,33)
*)

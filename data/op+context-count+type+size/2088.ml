
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let s1 = List.length l1 in
  let s2 = List.length l2 in
  if s1 < s2
  then (((clone 0 (s2 - s1)) @ l1), l2)
  else if s2 < s1 then (l1, (((clone 0 s1) - s2) @ l2)) else (l1, l2);;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let s1 = List.length l1 in
  let s2 = List.length l2 in
  if s1 < s2
  then (((clone 0 (s2 - s1)) @ l1), l2)
  else if s2 < s1 then (l1, ((clone 0 (s1 - s2)) @ l2)) else (l1, l2);;

*)

(* changed spans
(9,32)-(9,48)
(9,40)-(9,42)
*)

(* type error slice
(2,4)-(2,68)
(2,15)-(2,64)
(2,17)-(2,64)
(2,21)-(2,64)
(2,21)-(2,64)
(2,24)-(2,25)
(2,24)-(2,30)
(2,24)-(2,30)
(2,24)-(2,30)
(2,29)-(2,30)
(2,36)-(2,38)
(2,44)-(2,45)
(2,44)-(2,64)
(2,50)-(2,55)
(2,50)-(2,64)
(2,50)-(2,64)
(2,50)-(2,64)
(2,56)-(2,57)
(2,59)-(2,60)
(2,59)-(2,64)
(2,63)-(2,64)
(4,4)-(9,72)
(4,13)-(9,69)
(4,16)-(9,69)
(5,3)-(9,69)
(5,3)-(9,69)
(5,12)-(5,23)
(5,12)-(5,26)
(5,12)-(5,26)
(5,24)-(5,26)
(6,3)-(9,69)
(6,3)-(9,69)
(6,12)-(6,23)
(6,12)-(6,26)
(6,12)-(6,26)
(6,24)-(6,26)
(7,3)-(9,69)
(7,3)-(9,69)
(7,6)-(7,8)
(7,6)-(7,13)
(7,6)-(7,13)
(7,11)-(7,13)
(8,11)-(8,16)
(8,11)-(8,27)
(8,11)-(8,27)
(8,11)-(8,34)
(8,11)-(8,34)
(8,11)-(8,34)
(8,11)-(8,39)
(8,17)-(8,18)
(8,20)-(8,22)
(8,20)-(8,27)
(8,25)-(8,27)
(8,30)-(8,31)
(8,32)-(8,34)
(8,37)-(8,39)
(9,8)-(9,69)
(9,8)-(9,69)
(9,11)-(9,13)
(9,11)-(9,18)
(9,11)-(9,18)
(9,16)-(9,18)
(9,25)-(9,27)
(9,25)-(9,54)
(9,32)-(9,37)
(9,32)-(9,42)
(9,32)-(9,48)
(9,32)-(9,48)
(9,32)-(9,54)
(9,32)-(9,54)
(9,32)-(9,54)
(9,38)-(9,39)
(9,40)-(9,42)
(9,46)-(9,48)
(9,50)-(9,51)
(9,52)-(9,54)
(9,63)-(9,65)
(9,63)-(9,69)
(9,67)-(9,69)
*)

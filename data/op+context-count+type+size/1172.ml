
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Tan of expr
  | NegPos of expr* expr* expr;;

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Square of expr
  | NegPos of expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildNegPos (e1,e2,e3) = NegPos (e1, e2, e3);;

let buildSine e = Sine e;;

let buildSquare e1 = Tan e1;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth > 1
  then
    match rand (0, 16) with
    | 0 -> buildX ()
    | 1 -> buildY ()
    | 3|4 -> buildSine (build (rand, (depth - 1)))
    | 5|6 -> buildCosine (build (rand, (depth - 1)))
    | 7|8|9 ->
        buildAverage
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 10|11|12 ->
        buildTimes ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 13|14|15 ->
        buildThresh
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
            (build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 16|17 -> buildSquare (build (rand, (depth - 1)))
    | _ ->
        buildNegPos
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
            (build (rand, (depth - 1))))
  else (match rand (0, 2) with | 0 -> buildX () | _ -> buildY ());;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Square of expr
  | NegPos of expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildNegPos (e1,e2,e3) = NegPos (e1, e2, e3);;

let buildSine e = Sine e;;

let buildSquare e1 = Square e1;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth > 1
  then
    match rand (0, 16) with
    | 0 -> buildX ()
    | 1 -> buildY ()
    | 3|4 -> buildSine (build (rand, (depth - 1)))
    | 5|6 -> buildCosine (build (rand, (depth - 1)))
    | 7|8|9 ->
        buildAverage
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 10|11|12 ->
        buildTimes ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 13|14|15 ->
        buildThresh
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
            (build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 16|17 -> buildSquare (build (rand, (depth - 1)))
    | _ ->
        buildNegPos
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
            (build (rand, (depth - 1))))
  else (match rand (0, 2) with | 0 -> buildX () | _ -> buildY ());;

*)

(* changed spans
(32,22)-(32,28)
(52,13)-(52,36)
(52,42)-(52,65)
(54,22)-(54,45)
(54,51)-(54,74)
*)

(* type error slice
(24,4)-(24,46)
(24,19)-(24,43)
(24,28)-(24,43)
(24,37)-(24,39)
(24,41)-(24,43)
(26,4)-(26,31)
(26,17)-(26,29)
(26,21)-(26,29)
(26,28)-(26,29)
(28,4)-(28,51)
(28,18)-(28,48)
(28,30)-(28,48)
(28,38)-(28,40)
(28,42)-(28,44)
(28,46)-(28,48)
(30,4)-(30,27)
(30,15)-(30,25)
(30,19)-(30,25)
(30,24)-(30,25)
(32,4)-(32,30)
(32,17)-(32,28)
(32,22)-(32,28)
(32,26)-(32,28)
(34,4)-(34,70)
(34,18)-(34,67)
(34,39)-(34,67)
(34,47)-(34,48)
(34,50)-(34,51)
(34,53)-(34,59)
(34,61)-(34,67)
(36,4)-(36,42)
(36,17)-(36,39)
(36,26)-(36,39)
(36,33)-(36,35)
(36,37)-(36,39)
(38,4)-(38,23)
(38,12)-(38,21)
(38,12)-(38,21)
(38,17)-(38,21)
(40,4)-(40,23)
(40,12)-(40,21)
(40,12)-(40,21)
(40,17)-(40,21)
(42,16)-(64,65)
(43,3)-(64,65)
(43,3)-(64,65)
(43,6)-(43,11)
(43,6)-(43,15)
(43,6)-(43,15)
(43,6)-(43,15)
(43,14)-(43,15)
(45,5)-(63,37)
(45,5)-(63,37)
(45,5)-(63,37)
(45,5)-(63,37)
(45,5)-(63,37)
(45,5)-(63,37)
(45,5)-(63,37)
(45,5)-(63,37)
(45,5)-(63,37)
(45,5)-(63,37)
(45,5)-(63,37)
(45,5)-(63,37)
(45,5)-(63,37)
(45,5)-(63,37)
(45,5)-(63,37)
(45,5)-(63,37)
(45,5)-(63,37)
(45,5)-(63,37)
(45,5)-(63,37)
(45,5)-(63,37)
(45,5)-(63,37)
(45,5)-(63,37)
(45,5)-(63,37)
(45,5)-(63,37)
(45,5)-(63,37)
(45,5)-(63,37)
(45,5)-(63,37)
(45,5)-(63,37)
(45,11)-(45,15)
(45,11)-(45,22)
(45,11)-(45,22)
(45,17)-(45,18)
(45,17)-(45,22)
(45,20)-(45,22)
(46,12)-(46,18)
(46,12)-(46,21)
(46,19)-(46,21)
(47,12)-(47,18)
(47,12)-(47,21)
(47,19)-(47,21)
(48,14)-(48,23)
(48,14)-(48,48)
(48,14)-(48,48)
(48,25)-(48,30)
(48,25)-(48,48)
(48,25)-(48,48)
(48,32)-(48,36)
(48,32)-(48,48)
(48,39)-(48,44)
(48,39)-(48,48)
(48,47)-(48,48)
(49,14)-(49,25)
(49,14)-(49,50)
(49,27)-(49,32)
(49,27)-(49,50)
(49,27)-(49,50)
(49,34)-(49,38)
(49,34)-(49,50)
(49,41)-(49,46)
(49,41)-(49,50)
(49,49)-(49,50)
(51,9)-(51,21)
(51,9)-(52,65)
(52,13)-(52,18)
(52,13)-(52,36)
(52,13)-(52,36)
(52,13)-(52,65)
(52,20)-(52,24)
(52,20)-(52,36)
(52,27)-(52,32)
(52,27)-(52,36)
(52,35)-(52,36)
(52,42)-(52,47)
(52,42)-(52,65)
(52,42)-(52,65)
(52,49)-(52,53)
(52,49)-(52,65)
(52,56)-(52,61)
(52,56)-(52,65)
(52,64)-(52,65)
(54,9)-(54,19)
(54,9)-(54,74)
(54,22)-(54,27)
(54,22)-(54,45)
(54,22)-(54,45)
(54,22)-(54,74)
(54,29)-(54,33)
(54,29)-(54,45)
(54,36)-(54,41)
(54,36)-(54,45)
(54,44)-(54,45)
(54,51)-(54,56)
(54,51)-(54,74)
(54,51)-(54,74)
(54,58)-(54,62)
(54,58)-(54,74)
(54,65)-(54,70)
(54,65)-(54,74)
(54,73)-(54,74)
(56,9)-(56,20)
(56,9)-(58,66)
(57,13)-(57,18)
(57,13)-(57,36)
(57,13)-(57,36)
(57,13)-(58,66)
(57,20)-(57,24)
(57,20)-(57,36)
(57,27)-(57,32)
(57,27)-(57,36)
(57,35)-(57,36)
(57,42)-(57,47)
(57,42)-(57,65)
(57,42)-(57,65)
(57,49)-(57,53)
(57,49)-(57,65)
(57,56)-(57,61)
(57,56)-(57,65)
(57,64)-(57,65)
(58,14)-(58,19)
(58,14)-(58,37)
(58,14)-(58,37)
(58,21)-(58,25)
(58,21)-(58,37)
(58,28)-(58,33)
(58,28)-(58,37)
(58,36)-(58,37)
(58,43)-(58,48)
(58,43)-(58,66)
(58,43)-(58,66)
(58,50)-(58,54)
(58,50)-(58,66)
(58,57)-(58,62)
(58,57)-(58,66)
(58,65)-(58,66)
(59,16)-(59,27)
(59,16)-(59,52)
(59,29)-(59,34)
(59,29)-(59,52)
(59,29)-(59,52)
(59,36)-(59,40)
(59,36)-(59,52)
(59,43)-(59,48)
(59,43)-(59,52)
(59,51)-(59,52)
(61,9)-(61,20)
(61,9)-(63,37)
(62,13)-(62,18)
(62,13)-(62,36)
(62,13)-(62,36)
(62,13)-(63,37)
(62,20)-(62,24)
(62,20)-(62,36)
(62,27)-(62,32)
(62,27)-(62,36)
(62,35)-(62,36)
(62,42)-(62,47)
(62,42)-(62,65)
(62,42)-(62,65)
(62,49)-(62,53)
(62,49)-(62,65)
(62,56)-(62,61)
(62,56)-(62,65)
(62,64)-(62,65)
(63,14)-(63,19)
(63,14)-(63,37)
(63,14)-(63,37)
(63,21)-(63,25)
(63,21)-(63,37)
(63,28)-(63,33)
(63,28)-(63,37)
(63,36)-(63,37)
(64,9)-(64,65)
(64,9)-(64,65)
(64,9)-(64,65)
(64,9)-(64,65)
(64,15)-(64,19)
(64,15)-(64,25)
(64,21)-(64,22)
(64,21)-(64,25)
(64,24)-(64,25)
(64,39)-(64,45)
(64,39)-(64,48)
(64,46)-(64,48)
(64,56)-(64,62)
(64,56)-(64,65)
(64,63)-(64,65)
*)


let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let carry = (fst x) + (snd x) in
      match a with
      | h::t -> ((h + carry) / 10) :: ((h + carry) mod 10) :: t
      | _ -> [carry / 10; carry mod 10] in
    let base = [] in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let carry = match a with | (x,y) -> x in
      match x with
      | (addend_a,addend_b) ->
          let new_carry = ((carry + addend_a) + addend_b) / 10 in
          let digit = ((carry + addend_a) + addend_b) mod 10 in
          (match a with | (x,y) -> (new_carry, (digit :: y))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(15,20)-(15,23)
(15,20)-(15,25)
(15,20)-(15,35)
(15,24)-(15,25)
(15,30)-(15,33)
(15,30)-(15,35)
(16,7)-(18,40)
(16,13)-(16,14)
(17,19)-(17,20)
(17,19)-(17,64)
(17,23)-(17,28)
(17,32)-(17,34)
(17,41)-(17,42)
(17,41)-(17,58)
(17,41)-(17,64)
(17,56)-(17,58)
(17,63)-(17,64)
(18,14)-(18,40)
(18,15)-(18,20)
(18,15)-(18,25)
(18,23)-(18,25)
(18,27)-(18,32)
(18,27)-(18,39)
(18,37)-(18,39)
(19,5)-(21,52)
(19,16)-(19,18)
*)

(* type error slice
(2,4)-(2,68)
(2,15)-(2,64)
(2,17)-(2,64)
(2,21)-(2,64)
(2,21)-(2,64)
(2,24)-(2,25)
(2,24)-(2,30)
(2,24)-(2,30)
(2,24)-(2,30)
(2,29)-(2,30)
(2,36)-(2,38)
(2,44)-(2,45)
(2,44)-(2,64)
(2,50)-(2,55)
(2,50)-(2,64)
(2,50)-(2,64)
(2,50)-(2,64)
(2,56)-(2,57)
(2,59)-(2,60)
(2,59)-(2,64)
(2,63)-(2,64)
(4,4)-(7,70)
(4,13)-(7,67)
(4,16)-(7,67)
(5,7)-(5,18)
(5,7)-(5,21)
(5,7)-(5,21)
(5,19)-(5,21)
(5,26)-(5,37)
(5,26)-(5,40)
(5,26)-(5,40)
(5,38)-(5,40)
(6,9)-(6,11)
(6,9)-(6,66)
(6,15)-(6,20)
(6,15)-(6,58)
(6,15)-(6,66)
(6,25)-(6,36)
(6,25)-(6,39)
(6,25)-(6,39)
(6,37)-(6,39)
(6,44)-(6,55)
(6,44)-(6,58)
(6,44)-(6,58)
(6,56)-(6,58)
(6,62)-(6,63)
(6,64)-(6,66)
(7,11)-(7,62)
(7,21)-(7,32)
(7,21)-(7,35)
(7,40)-(7,51)
(7,40)-(7,54)
(7,40)-(7,54)
(7,52)-(7,54)
(7,58)-(7,59)
(7,60)-(7,62)
(9,20)-(10,75)
(10,3)-(10,75)
(10,3)-(10,75)
(10,3)-(10,75)
(10,3)-(10,75)
(10,3)-(10,75)
(10,9)-(10,10)
(10,24)-(10,26)
(10,37)-(10,75)
(10,40)-(10,41)
(10,40)-(10,45)
(10,51)-(10,61)
(10,51)-(10,63)
(12,4)-(22,37)
(12,12)-(22,33)
(12,15)-(22,33)
(13,3)-(22,33)
(13,12)-(21,52)
(14,5)-(21,52)
(14,5)-(21,52)
(14,11)-(18,40)
(14,13)-(18,40)
(15,7)-(18,40)
(15,7)-(18,40)
(15,20)-(15,23)
(15,20)-(15,25)
(15,20)-(15,25)
(15,20)-(15,35)
(15,20)-(15,35)
(15,20)-(15,35)
(15,24)-(15,25)
(15,30)-(15,33)
(15,30)-(15,35)
(15,30)-(15,35)
(15,34)-(15,35)
(16,7)-(18,40)
(16,7)-(18,40)
(16,7)-(18,40)
(16,7)-(18,40)
(16,7)-(18,40)
(16,13)-(16,14)
(17,19)-(17,20)
(17,19)-(17,28)
(17,19)-(17,28)
(17,19)-(17,34)
(17,19)-(17,64)
(17,23)-(17,28)
(17,32)-(17,34)
(17,41)-(17,42)
(17,41)-(17,50)
(17,41)-(17,58)
(17,41)-(17,64)
(17,45)-(17,50)
(17,56)-(17,58)
(17,63)-(17,64)
(18,14)-(18,40)
(18,14)-(18,40)
(18,15)-(18,20)
(18,15)-(18,25)
(18,23)-(18,25)
(18,27)-(18,32)
(18,27)-(18,39)
(18,37)-(18,39)
(19,5)-(21,52)
(19,5)-(21,52)
(19,16)-(19,18)
(20,5)-(21,52)
(20,5)-(21,52)
(20,16)-(20,24)
(20,16)-(20,44)
(20,16)-(20,44)
(20,26)-(20,38)
(20,26)-(20,44)
(20,26)-(20,44)
(20,26)-(20,44)
(20,39)-(20,41)
(20,42)-(20,44)
(21,5)-(21,52)
(21,5)-(21,52)
(21,19)-(21,33)
(21,19)-(21,45)
(21,19)-(21,45)
(21,19)-(21,45)
(21,19)-(21,45)
(21,34)-(21,35)
(21,36)-(21,40)
(21,41)-(21,45)
(21,49)-(21,52)
(22,15)-(22,18)
(22,15)-(22,33)
(22,15)-(22,33)
(22,20)-(22,27)
(22,20)-(22,33)
(22,20)-(22,33)
(22,28)-(22,30)
(22,31)-(22,33)
*)

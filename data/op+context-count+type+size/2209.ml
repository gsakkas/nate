
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let first = List.length l1 in
  let sec = List.length l2 in
  if first < sec
  then ((List.append (clone 0 (sec - first)) l1), l2)
  else
    if first > sec
    then List.append l1 ((clone 0 (first - sec)) :: l2)
    else (l1, l2);;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let first = List.length l1 in
  let sec = List.length l2 in
  if first < sec
  then ((List.append (clone 0 (sec - first)) l1), l2)
  else
    if first > sec
    then (l1, (List.append (clone 0 (first - sec)) l2))
    else (l1, l2);;

*)

(* changed spans
(11,10)-(11,55)
(11,22)-(11,24)
(11,27)-(11,55)
*)

(* type error slice
(2,4)-(2,68)
(2,15)-(2,64)
(2,17)-(2,64)
(2,21)-(2,64)
(2,21)-(2,64)
(2,24)-(2,25)
(2,24)-(2,30)
(2,24)-(2,30)
(2,24)-(2,30)
(2,29)-(2,30)
(2,36)-(2,38)
(2,44)-(2,45)
(2,44)-(2,64)
(2,50)-(2,55)
(2,50)-(2,64)
(2,50)-(2,64)
(2,50)-(2,64)
(2,56)-(2,57)
(2,59)-(2,60)
(2,59)-(2,64)
(2,63)-(2,64)
(4,4)-(12,20)
(4,13)-(12,17)
(4,16)-(12,17)
(5,3)-(12,17)
(5,15)-(5,26)
(5,15)-(5,29)
(5,15)-(5,29)
(5,27)-(5,29)
(6,3)-(12,17)
(6,13)-(6,24)
(6,13)-(6,27)
(6,13)-(6,27)
(6,25)-(6,27)
(7,3)-(12,17)
(7,3)-(12,17)
(7,6)-(7,11)
(7,6)-(7,17)
(7,6)-(7,17)
(7,14)-(7,17)
(8,10)-(8,21)
(8,10)-(8,48)
(8,10)-(8,48)
(8,10)-(8,48)
(8,10)-(8,53)
(8,23)-(8,28)
(8,23)-(8,43)
(8,23)-(8,43)
(8,29)-(8,30)
(8,32)-(8,35)
(8,32)-(8,43)
(8,38)-(8,43)
(8,46)-(8,48)
(8,51)-(8,53)
(10,5)-(12,17)
(10,5)-(12,17)
(10,8)-(10,13)
(10,8)-(10,19)
(10,8)-(10,19)
(10,16)-(10,19)
(11,10)-(11,21)
(11,10)-(11,55)
(11,10)-(11,55)
(11,10)-(11,55)
(11,22)-(11,24)
(11,27)-(11,32)
(11,27)-(11,47)
(11,27)-(11,55)
(11,33)-(11,34)
(11,36)-(11,41)
(11,36)-(11,47)
(11,44)-(11,47)
(11,53)-(11,55)
(12,11)-(12,13)
(12,11)-(12,17)
(12,15)-(12,17)
*)


let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let dl = (List.length l1) - (List.length l2) in
  match dl with
  | 0 -> (l1, l2)
  | _ ->
      if dl > 0
      then (l1, ((clone 0 dl) @ l2))
      else (((clone 0 (dl / (-1))) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h == 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let z = (fst x) + (snd x) in
      match a with | (w,y) -> (((w + z) / 10), (((w + z) mod 10) :: y)) in
    let base = (0, []) in
    let args = (List.rev (List.combine l1 l2)) @ [(0, 0)] in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l =
  let rec adder n l' a =
    match n with
    | 0 -> [0]
    | 1 -> bigAdd l' a
    | _ -> adder (n - 1) l' (bigAdd a l') in
  adder i l [0];;

let bigMul l1 l2 =
  let f a x =
    match a with
    | (w,y) -> (w, (bigAdd y (mulByDigit (x * (10 ** (List.length y))) l1))) in
  let base = (0, []) in
  let args = List.rev l2 in let (_,res) = List.fold_left f base args in res;;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let dl = (List.length l1) - (List.length l2) in
  match dl with
  | 0 -> (l1, l2)
  | _ ->
      if dl > 0
      then (l1, ((clone 0 dl) @ l2))
      else (((clone 0 (dl / (-1))) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h == 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let z = (fst x) + (snd x) in
      match a with | (w,y) -> (((w + z) / 10), (((w + z) mod 10) :: y)) in
    let base = (0, []) in
    let args = (List.rev (List.combine l1 l2)) @ [(0, 0)] in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l =
  let rec adder n l' a =
    match n with
    | 0 -> [0]
    | 1 -> bigAdd l' a
    | _ -> adder (n - 1) l' (bigAdd a l') in
  adder i l [0];;

let rec mulByTen n =
  match n with | 0 -> 0 | 1 -> 10 | _ -> 10 * (mulByTen (n - 1));;

let bigMul l1 l2 =
  let f a x =
    match a with
    | (w,y) ->
        (w, (bigAdd y (mulByDigit (x * (mulByTen (List.length y))) l1))) in
  let base = (0, []) in
  let args = List.rev l2 in let (_,res) = List.fold_left f base args in res;;

*)

(* changed spans
(22,52)-(22,53)
(22,55)-(22,56)
(34,12)-(39,76)
(37,48)-(37,50)
(37,48)-(37,68)
(37,51)-(37,53)
(37,55)-(37,66)
(39,14)-(39,22)
(39,14)-(39,25)
(39,23)-(39,25)
(39,29)-(39,76)
(39,43)-(39,57)
(39,43)-(39,69)
(39,58)-(39,59)
(39,60)-(39,64)
(39,65)-(39,69)
(39,73)-(39,76)
*)

(* type error slice
(2,4)-(2,68)
(2,15)-(2,64)
(2,17)-(2,64)
(2,21)-(2,64)
(2,21)-(2,64)
(2,24)-(2,25)
(2,24)-(2,30)
(2,24)-(2,30)
(2,24)-(2,30)
(2,29)-(2,30)
(2,36)-(2,38)
(2,44)-(2,45)
(2,44)-(2,64)
(2,50)-(2,55)
(2,50)-(2,64)
(2,50)-(2,64)
(2,50)-(2,64)
(2,56)-(2,57)
(2,59)-(2,60)
(2,59)-(2,64)
(2,63)-(2,64)
(4,4)-(11,48)
(4,13)-(11,45)
(4,16)-(11,45)
(5,13)-(5,24)
(5,13)-(5,27)
(5,13)-(5,27)
(5,25)-(5,27)
(5,32)-(5,43)
(5,32)-(5,46)
(5,32)-(5,46)
(5,44)-(5,46)
(7,11)-(7,13)
(7,11)-(7,17)
(7,15)-(7,17)
(10,13)-(10,15)
(10,13)-(10,35)
(10,19)-(10,24)
(10,19)-(10,29)
(10,19)-(10,35)
(10,31)-(10,32)
(10,33)-(10,35)
(11,15)-(11,40)
(11,36)-(11,37)
(11,38)-(11,40)
(13,20)-(14,76)
(14,3)-(14,76)
(14,3)-(14,76)
(14,3)-(14,76)
(14,3)-(14,76)
(14,3)-(14,76)
(14,9)-(14,10)
(14,24)-(14,26)
(14,37)-(14,76)
(14,40)-(14,41)
(14,40)-(14,46)
(14,52)-(14,62)
(14,52)-(14,64)
(16,4)-(24,37)
(16,12)-(24,33)
(16,15)-(24,33)
(17,3)-(24,33)
(17,12)-(23,52)
(18,5)-(23,52)
(18,11)-(20,70)
(18,13)-(20,70)
(19,16)-(19,19)
(19,16)-(19,21)
(19,16)-(19,21)
(19,20)-(19,21)
(19,26)-(19,29)
(19,26)-(19,31)
(19,26)-(19,31)
(19,30)-(19,31)
(20,13)-(20,14)
(20,34)-(20,35)
(20,69)-(20,70)
(21,5)-(23,52)
(21,17)-(21,22)
(21,20)-(21,22)
(22,17)-(22,25)
(22,17)-(22,45)
(22,17)-(22,45)
(22,17)-(22,58)
(22,17)-(22,58)
(22,27)-(22,39)
(22,27)-(22,45)
(22,27)-(22,45)
(22,27)-(22,45)
(22,40)-(22,42)
(22,43)-(22,45)
(22,48)-(22,49)
(23,19)-(23,33)
(23,19)-(23,45)
(23,19)-(23,45)
(23,34)-(23,35)
(23,36)-(23,40)
(24,15)-(24,18)
(24,15)-(24,33)
(24,20)-(24,27)
(24,20)-(24,33)
(24,20)-(24,33)
(24,28)-(24,30)
(24,31)-(24,33)
(26,4)-(32,18)
(26,20)-(32,16)
(26,22)-(32,16)
(27,17)-(31,41)
(27,19)-(31,41)
(27,22)-(31,41)
(28,11)-(28,12)
(30,12)-(30,18)
(30,12)-(30,23)
(30,12)-(30,23)
(30,19)-(30,21)
(30,22)-(30,23)
(31,12)-(31,17)
(31,12)-(31,41)
(31,12)-(31,41)
(31,19)-(31,20)
(31,30)-(31,36)
(31,30)-(31,41)
(31,37)-(31,38)
(32,9)-(32,10)
(32,11)-(32,12)
(34,4)-(39,78)
(34,12)-(39,76)
(34,15)-(39,76)
(35,3)-(39,76)
(35,9)-(37,74)
(35,11)-(37,74)
(36,5)-(37,74)
(36,5)-(37,74)
(36,11)-(36,12)
(37,17)-(37,18)
(37,17)-(37,74)
(37,28)-(37,29)
(37,31)-(37,41)
(37,31)-(37,74)
(37,31)-(37,74)
(37,43)-(37,44)
(37,43)-(37,68)
(37,43)-(37,68)
(37,48)-(37,50)
(37,48)-(37,68)
(37,48)-(37,68)
(37,48)-(37,68)
(37,51)-(37,53)
(37,55)-(37,66)
(37,55)-(37,68)
(37,55)-(37,68)
(37,67)-(37,68)
(37,72)-(37,74)
(38,3)-(39,76)
(38,15)-(38,20)
(38,18)-(38,20)
(39,3)-(39,76)
(39,14)-(39,22)
(39,14)-(39,25)
(39,14)-(39,25)
(39,23)-(39,25)
(39,43)-(39,57)
(39,43)-(39,69)
(39,43)-(39,69)
(39,43)-(39,69)
(39,58)-(39,59)
(39,60)-(39,64)
(39,65)-(39,69)
*)

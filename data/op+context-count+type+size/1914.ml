
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Inverse of expr
  | Max of expr* expr
  | Range of expr* expr* expr;;

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Square of expr
  | Max of expr* expr
  | Range of expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildInverse e = Inverse e;;

let buildMax (e1,e2) = Max (e1, e2);;

let buildRange (e1,e2,e3) = Range (e1, e2, e3);;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth = 0
  then
    let result = rand (0, 1) in (if result = 0 then buildX () else buildY ())
  else
    (let result = rand (0, 9) in
     match result with
     | 0 -> buildX ()
     | 1 -> buildY ()
     | 2 -> buildSine (build (rand, (depth - 1)))
     | 3 -> buildCosine (build (rand, (depth - 1)))
     | 4 ->
         buildAverage
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 5 ->
         buildTimes
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 6 ->
         buildThresh
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
             (build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 7 -> buildInverse (build (rand, (depth - 1)))
     | 8 ->
         buildMax ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 9 ->
         buildRange
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
             (build (rand, (depth - 1))))
     | _ -> buildX ());;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Square of expr
  | Max of expr* expr
  | Range of expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildMax (e1,e2) = Max (e1, e2);;

let buildRange (e1,e2,e3) = Range (e1, e2, e3);;

let buildSine e = Sine e;;

let buildSquare e = Square e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth = 0
  then
    let result = rand (0, 1) in (if result = 0 then buildX () else buildY ())
  else
    (let result = rand (0, 9) in
     match result with
     | 0 -> buildX ()
     | 1 -> buildY ()
     | 2 -> buildSine (build (rand, (depth - 1)))
     | 3 -> buildCosine (build (rand, (depth - 1)))
     | 4 ->
         buildAverage
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 5 ->
         buildTimes
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 6 ->
         buildThresh
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
             (build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 7 -> buildSquare (build (rand, (depth - 1)))
     | 8 ->
         buildMax ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 9 ->
         buildRange
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
             (build (rand, (depth - 1))))
     | _ -> buildX ());;

*)

(* changed spans
(30,18)-(30,31)
(30,22)-(30,31)
(30,30)-(30,31)
(38,18)-(38,67)
(59,14)-(59,37)
(59,43)-(59,66)
(62,14)-(62,37)
(62,43)-(62,66)
(67,13)-(67,25)
(69,21)-(69,44)
(69,50)-(69,73)
*)

(* type error slice
(26,4)-(26,46)
(26,19)-(26,43)
(26,28)-(26,43)
(26,37)-(26,39)
(26,41)-(26,43)
(28,4)-(28,31)
(28,17)-(28,29)
(28,21)-(28,29)
(28,28)-(28,29)
(30,4)-(30,33)
(30,18)-(30,31)
(30,22)-(30,31)
(30,30)-(30,31)
(32,4)-(32,38)
(32,15)-(32,35)
(32,24)-(32,35)
(32,29)-(32,31)
(32,33)-(32,35)
(34,4)-(34,49)
(34,17)-(34,46)
(34,29)-(34,46)
(34,36)-(34,38)
(34,40)-(34,42)
(34,44)-(34,46)
(36,4)-(36,27)
(36,15)-(36,25)
(36,19)-(36,25)
(36,24)-(36,25)
(38,4)-(38,70)
(38,18)-(38,67)
(38,39)-(38,67)
(38,47)-(38,48)
(38,50)-(38,51)
(38,53)-(38,59)
(38,61)-(38,67)
(40,4)-(40,42)
(40,17)-(40,39)
(40,26)-(40,39)
(40,33)-(40,35)
(40,37)-(40,39)
(42,4)-(42,23)
(42,12)-(42,21)
(42,12)-(42,21)
(42,17)-(42,21)
(44,4)-(44,23)
(44,12)-(44,21)
(44,12)-(44,21)
(44,17)-(44,21)
(46,16)-(74,22)
(47,3)-(74,22)
(47,3)-(74,22)
(47,6)-(47,11)
(47,6)-(47,15)
(47,6)-(47,15)
(47,6)-(47,15)
(47,14)-(47,15)
(49,5)-(49,77)
(49,5)-(49,77)
(49,18)-(49,22)
(49,18)-(49,28)
(49,18)-(49,28)
(49,24)-(49,25)
(49,24)-(49,28)
(49,27)-(49,28)
(49,34)-(49,77)
(49,34)-(49,77)
(49,37)-(49,43)
(49,37)-(49,47)
(49,37)-(49,47)
(49,37)-(49,47)
(49,46)-(49,47)
(49,53)-(49,59)
(49,53)-(49,62)
(49,60)-(49,62)
(49,68)-(49,74)
(49,68)-(49,77)
(49,75)-(49,77)
(51,6)-(74,22)
(51,6)-(74,22)
(51,19)-(51,23)
(51,19)-(51,29)
(51,25)-(51,26)
(51,25)-(51,29)
(51,28)-(51,29)
(52,6)-(74,22)
(52,6)-(74,22)
(52,6)-(74,22)
(52,6)-(74,22)
(52,6)-(74,22)
(52,6)-(74,22)
(52,6)-(74,22)
(52,6)-(74,22)
(52,6)-(74,22)
(52,6)-(74,22)
(52,6)-(74,22)
(52,6)-(74,22)
(52,6)-(74,22)
(52,6)-(74,22)
(52,6)-(74,22)
(52,6)-(74,22)
(52,6)-(74,22)
(52,6)-(74,22)
(52,6)-(74,22)
(52,6)-(74,22)
(52,6)-(74,22)
(52,6)-(74,22)
(52,12)-(52,18)
(53,13)-(53,19)
(53,13)-(53,22)
(53,20)-(53,22)
(54,13)-(54,19)
(54,13)-(54,22)
(54,20)-(54,22)
(55,13)-(55,22)
(55,13)-(55,47)
(55,13)-(55,47)
(55,24)-(55,29)
(55,24)-(55,47)
(55,24)-(55,47)
(55,31)-(55,35)
(55,31)-(55,47)
(55,38)-(55,43)
(55,38)-(55,47)
(55,46)-(55,47)
(56,13)-(56,24)
(56,13)-(56,49)
(56,26)-(56,31)
(56,26)-(56,49)
(56,33)-(56,37)
(56,33)-(56,49)
(56,40)-(56,45)
(56,40)-(56,49)
(56,48)-(56,49)
(58,10)-(58,22)
(58,10)-(59,66)
(59,14)-(59,19)
(59,14)-(59,37)
(59,14)-(59,66)
(59,21)-(59,25)
(59,21)-(59,37)
(59,28)-(59,33)
(59,28)-(59,37)
(59,36)-(59,37)
(59,43)-(59,48)
(59,43)-(59,66)
(59,50)-(59,54)
(59,50)-(59,66)
(59,57)-(59,62)
(59,57)-(59,66)
(59,65)-(59,66)
(61,10)-(61,20)
(61,10)-(62,66)
(62,14)-(62,19)
(62,14)-(62,37)
(62,14)-(62,66)
(62,21)-(62,25)
(62,21)-(62,37)
(62,28)-(62,33)
(62,28)-(62,37)
(62,36)-(62,37)
(62,43)-(62,48)
(62,43)-(62,66)
(62,50)-(62,54)
(62,50)-(62,66)
(62,57)-(62,62)
(62,57)-(62,66)
(62,65)-(62,66)
(64,10)-(64,21)
(64,10)-(66,67)
(65,14)-(65,19)
(65,14)-(65,37)
(65,14)-(66,67)
(65,21)-(65,25)
(65,21)-(65,37)
(65,28)-(65,33)
(65,28)-(65,37)
(65,36)-(65,37)
(65,43)-(65,48)
(65,43)-(65,66)
(65,50)-(65,54)
(65,50)-(65,66)
(65,57)-(65,62)
(65,57)-(65,66)
(65,65)-(65,66)
(66,15)-(66,20)
(66,15)-(66,38)
(66,22)-(66,26)
(66,22)-(66,38)
(66,29)-(66,34)
(66,29)-(66,38)
(66,37)-(66,38)
(66,44)-(66,49)
(66,44)-(66,67)
(66,51)-(66,55)
(66,51)-(66,67)
(66,58)-(66,63)
(66,58)-(66,67)
(66,66)-(66,67)
(67,13)-(67,25)
(67,13)-(67,50)
(67,27)-(67,32)
(67,27)-(67,50)
(67,34)-(67,38)
(67,34)-(67,50)
(67,41)-(67,46)
(67,41)-(67,50)
(67,49)-(67,50)
(69,10)-(69,18)
(69,10)-(69,73)
(69,21)-(69,26)
(69,21)-(69,44)
(69,21)-(69,73)
(69,28)-(69,32)
(69,28)-(69,44)
(69,35)-(69,40)
(69,35)-(69,44)
(69,43)-(69,44)
(69,50)-(69,55)
(69,50)-(69,73)
(69,57)-(69,61)
(69,57)-(69,73)
(69,64)-(69,69)
(69,64)-(69,73)
(69,72)-(69,73)
(71,10)-(71,20)
(71,10)-(73,38)
(72,14)-(72,19)
(72,14)-(72,37)
(72,14)-(73,38)
(72,21)-(72,25)
(72,21)-(72,37)
(72,28)-(72,33)
(72,28)-(72,37)
(72,36)-(72,37)
(72,43)-(72,48)
(72,43)-(72,66)
(72,50)-(72,54)
(72,50)-(72,66)
(72,57)-(72,62)
(72,57)-(72,66)
(72,65)-(72,66)
(73,15)-(73,20)
(73,15)-(73,38)
(73,22)-(73,26)
(73,22)-(73,38)
(73,29)-(73,34)
(73,29)-(73,38)
(73,37)-(73,38)
(74,13)-(74,19)
(74,13)-(74,22)
(74,20)-(74,22)
*)

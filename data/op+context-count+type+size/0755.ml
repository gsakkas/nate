
let rec clone x n =
  let accum = [] in
  let rec helper accum n =
    if n < 1 then accum else helper (x :: accum) (n - 1) in
  helper accum n;;

let padZero l1 l2 =
  let (a,b) = ((List.length l1), (List.length l2)) in
  if a < b
  then ((List.append (clone 0 (b - a)) l1), l2)
  else if b < a then (l1, (List.append (clone 0 (a - b)) l2)) else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (h::t,b) = a in
      if (x + h) > 9
      then
        let asd2 = (x + h) - 10 in
        let h2::t2 = t in let asd3 = (h2 + 1) :: t2 in (asd3, (asd2 :: b))
      else
        if (t = []) && ((x + h) > 9)
        then (let asd2 = (x + h) - 10 in ([], (1 :: asd2 :: b)))
        else (t, ((x + h) :: b)) in
    let base = (((List.rev 0) :: l1), []) in
    let args = List.rev l2 in let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n =
  let accum = [] in
  let rec helper accum n =
    if n < 1 then accum else helper (x :: accum) (n - 1) in
  helper accum n;;

let padZero l1 l2 =
  let (a,b) = ((List.length l1), (List.length l2)) in
  if a < b
  then ((List.append (clone 0 (b - a)) l1), l2)
  else if b < a then (l1, (List.append (clone 0 (a - b)) l2)) else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (h::t,b) = a in
      if (x + h) > 9
      then
        let asd2 = (x + h) - 10 in
        let h2::t2 = t in let asd3 = (h2 + 1) :: t2 in (asd3, (asd2 :: b))
      else
        if (t = []) && ((x + h) > 9)
        then (let asd2 = (x + h) - 10 in ([], (1 :: asd2 :: b)))
        else (t, ((x + h) :: b)) in
    let base = ((List.rev (0 :: l1)), []) in
    let args = List.rev l2 in let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(29,19)-(29,36)
(29,28)-(29,29)
*)

(* type error slice
(2,4)-(6,19)
(2,15)-(6,17)
(2,17)-(6,17)
(3,3)-(6,17)
(3,3)-(6,17)
(3,15)-(3,17)
(4,3)-(6,17)
(4,3)-(6,17)
(4,18)-(5,56)
(4,24)-(5,56)
(5,5)-(5,56)
(5,5)-(5,56)
(5,8)-(5,9)
(5,8)-(5,13)
(5,8)-(5,13)
(5,8)-(5,13)
(5,12)-(5,13)
(5,19)-(5,24)
(5,30)-(5,36)
(5,30)-(5,56)
(5,30)-(5,56)
(5,30)-(5,56)
(5,38)-(5,39)
(5,38)-(5,48)
(5,43)-(5,48)
(5,51)-(5,52)
(5,51)-(5,56)
(5,55)-(5,56)
(6,3)-(6,9)
(6,3)-(6,17)
(6,3)-(6,17)
(6,10)-(6,15)
(6,16)-(6,17)
(8,4)-(12,78)
(8,13)-(12,75)
(8,16)-(12,75)
(9,3)-(12,75)
(9,3)-(12,75)
(9,17)-(9,28)
(9,17)-(9,31)
(9,17)-(9,31)
(9,17)-(9,49)
(9,29)-(9,31)
(9,35)-(9,46)
(9,35)-(9,49)
(9,35)-(9,49)
(9,47)-(9,49)
(10,3)-(12,75)
(10,3)-(12,75)
(10,6)-(10,7)
(10,6)-(10,11)
(10,6)-(10,11)
(10,10)-(10,11)
(11,10)-(11,21)
(11,10)-(11,42)
(11,10)-(11,42)
(11,10)-(11,42)
(11,10)-(11,47)
(11,23)-(11,28)
(11,23)-(11,37)
(11,23)-(11,37)
(11,23)-(11,37)
(11,29)-(11,30)
(11,32)-(11,33)
(11,32)-(11,37)
(11,36)-(11,37)
(11,40)-(11,42)
(11,45)-(11,47)
(12,8)-(12,75)
(12,8)-(12,75)
(12,11)-(12,12)
(12,11)-(12,16)
(12,11)-(12,16)
(12,15)-(12,16)
(12,23)-(12,25)
(12,23)-(12,60)
(12,28)-(12,39)
(12,28)-(12,60)
(12,28)-(12,60)
(12,28)-(12,60)
(12,41)-(12,46)
(12,41)-(12,55)
(12,47)-(12,48)
(12,50)-(12,51)
(12,50)-(12,55)
(12,54)-(12,55)
(12,58)-(12,60)
(12,69)-(12,71)
(12,69)-(12,75)
(12,73)-(12,75)
(14,20)-(15,70)
(15,3)-(15,70)
(15,3)-(15,70)
(15,3)-(15,70)
(15,3)-(15,70)
(15,3)-(15,70)
(15,9)-(15,10)
(15,24)-(15,26)
(15,37)-(15,70)
(15,37)-(15,70)
(15,40)-(15,41)
(15,40)-(15,45)
(15,51)-(15,61)
(15,51)-(15,63)
(15,69)-(15,70)
(17,4)-(31,37)
(17,12)-(31,33)
(17,15)-(31,33)
(18,3)-(31,33)
(18,12)-(30,78)
(19,5)-(30,78)
(19,11)-(28,31)
(19,13)-(28,31)
(20,7)-(28,31)
(20,7)-(28,31)
(20,7)-(28,31)
(20,7)-(28,31)
(20,22)-(20,23)
(21,7)-(28,31)
(21,11)-(21,12)
(21,11)-(21,16)
(21,11)-(21,16)
(21,11)-(21,16)
(21,11)-(21,21)
(21,11)-(21,21)
(21,15)-(21,16)
(21,20)-(21,21)
(23,9)-(24,73)
(23,9)-(24,73)
(23,21)-(23,22)
(23,21)-(23,26)
(23,21)-(23,32)
(23,25)-(23,26)
(23,30)-(23,32)
(24,9)-(24,73)
(24,9)-(24,73)
(24,9)-(24,73)
(24,9)-(24,73)
(24,22)-(24,23)
(24,27)-(24,73)
(24,27)-(24,73)
(24,39)-(24,41)
(24,39)-(24,45)
(24,39)-(24,52)
(24,44)-(24,45)
(24,50)-(24,52)
(24,57)-(24,61)
(24,57)-(24,73)
(24,64)-(24,68)
(24,64)-(24,73)
(24,72)-(24,73)
(26,9)-(28,31)
(26,9)-(28,31)
(26,13)-(26,14)
(26,13)-(26,19)
(26,13)-(26,19)
(26,13)-(26,19)
(26,13)-(26,36)
(26,17)-(26,19)
(26,26)-(26,27)
(26,26)-(26,31)
(26,26)-(26,36)
(26,26)-(26,36)
(26,30)-(26,31)
(26,35)-(26,36)
(27,15)-(27,62)
(27,15)-(27,62)
(27,27)-(27,28)
(27,27)-(27,32)
(27,27)-(27,38)
(27,31)-(27,32)
(27,36)-(27,38)
(27,43)-(27,45)
(27,43)-(27,62)
(27,48)-(27,49)
(27,48)-(27,62)
(27,53)-(27,57)
(27,53)-(27,62)
(27,61)-(27,62)
(28,15)-(28,16)
(28,15)-(28,31)
(28,20)-(28,21)
(28,20)-(28,25)
(28,20)-(28,31)
(28,24)-(28,25)
(28,30)-(28,31)
(29,5)-(30,78)
(29,19)-(29,27)
(29,19)-(29,29)
(29,19)-(29,29)
(29,19)-(29,36)
(29,19)-(29,41)
(29,28)-(29,29)
(29,34)-(29,36)
(29,39)-(29,41)
(30,5)-(30,78)
(30,16)-(30,24)
(30,16)-(30,27)
(30,16)-(30,27)
(30,25)-(30,27)
(30,45)-(30,59)
(30,45)-(30,71)
(30,45)-(30,71)
(30,45)-(30,71)
(30,45)-(30,71)
(30,60)-(30,61)
(30,62)-(30,66)
(30,67)-(30,71)
(31,15)-(31,18)
(31,15)-(31,33)
(31,15)-(31,33)
(31,20)-(31,27)
(31,20)-(31,33)
(31,20)-(31,33)
(31,20)-(31,33)
(31,28)-(31,30)
(31,31)-(31,33)
*)

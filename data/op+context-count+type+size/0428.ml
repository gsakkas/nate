
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Tan of expr
  | Average of expr* expr
  | Times of expr* expr
  | TimesMod of expr* expr* expr
  | Thresh of expr* expr* expr* expr;;

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | SineSq of expr
  | Average of expr* expr
  | Times of expr* expr
  | TimesModOne of expr* expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildSineSq e = SineSq e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildTimesMod (e1,e2,e3) = TimesMod (e1, e2, e3);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth > 0
  then
    match rand (0, 6) with
    | 0 ->
        buildTimesMod
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
            (build (rand, (depth - 1))))
    | 1 -> buildSineSq (build (rand, (depth - 1)))
    | 2 -> buildSine (build (rand, (depth - 1)))
    | 3 -> buildCosine (build (rand, (depth - 1)))
    | 4 ->
        buildAverage
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 5 ->
        buildTimes ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 6 ->
        buildThresh
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
            (build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | _ -> buildY ()
  else
    (match rand (0, 1) with
     | 0 -> buildX ()
     | 1 -> buildY ()
     | _ -> buildX ());;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | SineSq of expr
  | Average of expr* expr
  | Times of expr* expr
  | TimesModOne of expr* expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildSineSq e = SineSq e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth > 0
  then
    match rand (0, 6) with
    | 1 -> buildSineSq (build (rand, (depth - 1)))
    | 2 -> buildSine (build (rand, (depth - 1)))
    | 3 -> buildCosine (build (rand, (depth - 1)))
    | 4 ->
        buildAverage
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 5 ->
        buildTimes ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 6 ->
        buildThresh
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
            (build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | _ -> buildY ()
  else
    (match rand (0, 1) with
     | 0 -> buildX ()
     | 1 -> buildY ()
     | _ -> buildX ());;

*)

(* changed spans
(36,20)-(36,52)
(36,32)-(36,52)
(36,42)-(36,44)
(36,46)-(36,48)
(36,50)-(36,52)
(45,5)-(62,21)
(47,9)-(47,22)
(48,13)-(49,37)
(48,42)-(48,47)
(48,49)-(48,53)
(48,49)-(48,65)
(48,56)-(48,61)
(48,56)-(48,65)
(48,64)-(48,65)
(50,12)-(50,23)
(51,12)-(51,21)
(51,23)-(51,46)
(52,12)-(52,23)
(52,25)-(52,48)
(54,9)-(54,21)
(55,13)-(55,36)
(55,13)-(55,65)
(57,9)-(57,19)
(57,22)-(57,45)
(57,22)-(57,74)
(59,9)-(59,20)
(60,13)-(60,36)
(60,13)-(61,66)
(61,14)-(61,19)
(61,21)-(61,25)
(61,21)-(61,37)
(61,28)-(61,37)
(61,43)-(61,66)
(62,12)-(62,21)
(64,6)-(67,22)
*)

(* type error slice
(24,4)-(24,46)
(24,19)-(24,43)
(24,28)-(24,43)
(24,37)-(24,39)
(24,41)-(24,43)
(26,4)-(26,31)
(26,17)-(26,29)
(26,21)-(26,29)
(26,28)-(26,29)
(28,4)-(28,27)
(28,15)-(28,25)
(28,19)-(28,25)
(28,24)-(28,25)
(30,4)-(30,31)
(30,17)-(30,29)
(30,21)-(30,29)
(30,28)-(30,29)
(32,4)-(32,70)
(32,18)-(32,67)
(32,39)-(32,67)
(32,47)-(32,48)
(32,50)-(32,51)
(32,53)-(32,59)
(32,61)-(32,67)
(34,4)-(34,42)
(34,17)-(34,39)
(34,26)-(34,39)
(34,33)-(34,35)
(34,37)-(34,39)
(36,4)-(36,55)
(36,20)-(36,52)
(36,32)-(36,52)
(36,42)-(36,44)
(36,46)-(36,48)
(36,50)-(36,52)
(38,4)-(38,23)
(38,12)-(38,21)
(38,12)-(38,21)
(38,17)-(38,21)
(40,4)-(40,23)
(40,12)-(40,21)
(40,12)-(40,21)
(40,17)-(40,21)
(42,16)-(67,22)
(43,3)-(67,22)
(43,3)-(67,22)
(43,6)-(43,11)
(43,6)-(43,15)
(43,6)-(43,15)
(43,6)-(43,15)
(43,14)-(43,15)
(45,5)-(62,21)
(45,5)-(62,21)
(45,5)-(62,21)
(45,5)-(62,21)
(45,5)-(62,21)
(45,5)-(62,21)
(45,5)-(62,21)
(45,5)-(62,21)
(45,5)-(62,21)
(45,5)-(62,21)
(45,5)-(62,21)
(45,5)-(62,21)
(45,5)-(62,21)
(45,5)-(62,21)
(45,5)-(62,21)
(45,5)-(62,21)
(45,5)-(62,21)
(45,11)-(45,15)
(45,11)-(45,21)
(45,11)-(45,21)
(45,17)-(45,18)
(45,17)-(45,21)
(45,20)-(45,21)
(47,9)-(47,22)
(47,9)-(49,37)
(47,9)-(49,37)
(48,13)-(48,18)
(48,13)-(48,36)
(48,13)-(48,36)
(48,13)-(49,37)
(48,20)-(48,24)
(48,20)-(48,36)
(48,27)-(48,32)
(48,27)-(48,36)
(48,35)-(48,36)
(48,42)-(48,47)
(48,42)-(48,65)
(48,42)-(48,65)
(48,49)-(48,53)
(48,49)-(48,65)
(48,56)-(48,61)
(48,56)-(48,65)
(48,64)-(48,65)
(49,14)-(49,19)
(49,14)-(49,37)
(49,14)-(49,37)
(49,21)-(49,25)
(49,21)-(49,37)
(49,28)-(49,33)
(49,28)-(49,37)
(49,36)-(49,37)
(50,12)-(50,23)
(50,12)-(50,48)
(50,25)-(50,30)
(50,25)-(50,48)
(50,25)-(50,48)
(50,32)-(50,36)
(50,32)-(50,48)
(50,39)-(50,44)
(50,39)-(50,48)
(50,47)-(50,48)
(51,12)-(51,21)
(51,12)-(51,46)
(51,23)-(51,28)
(51,23)-(51,46)
(51,23)-(51,46)
(51,30)-(51,34)
(51,30)-(51,46)
(51,37)-(51,42)
(51,37)-(51,46)
(51,45)-(51,46)
(52,12)-(52,23)
(52,12)-(52,48)
(52,25)-(52,30)
(52,25)-(52,48)
(52,25)-(52,48)
(52,32)-(52,36)
(52,32)-(52,48)
(52,39)-(52,44)
(52,39)-(52,48)
(52,47)-(52,48)
(54,9)-(54,21)
(54,9)-(55,65)
(55,13)-(55,18)
(55,13)-(55,36)
(55,13)-(55,36)
(55,13)-(55,65)
(55,20)-(55,24)
(55,20)-(55,36)
(55,27)-(55,32)
(55,27)-(55,36)
(55,35)-(55,36)
(55,42)-(55,47)
(55,42)-(55,65)
(55,42)-(55,65)
(55,49)-(55,53)
(55,49)-(55,65)
(55,56)-(55,61)
(55,56)-(55,65)
(55,64)-(55,65)
(57,9)-(57,19)
(57,9)-(57,74)
(57,22)-(57,27)
(57,22)-(57,45)
(57,22)-(57,45)
(57,22)-(57,74)
(57,29)-(57,33)
(57,29)-(57,45)
(57,36)-(57,41)
(57,36)-(57,45)
(57,44)-(57,45)
(57,51)-(57,56)
(57,51)-(57,74)
(57,51)-(57,74)
(57,58)-(57,62)
(57,58)-(57,74)
(57,65)-(57,70)
(57,65)-(57,74)
(57,73)-(57,74)
(59,9)-(59,20)
(59,9)-(61,66)
(60,13)-(60,18)
(60,13)-(60,36)
(60,13)-(60,36)
(60,13)-(61,66)
(60,20)-(60,24)
(60,20)-(60,36)
(60,27)-(60,32)
(60,27)-(60,36)
(60,35)-(60,36)
(60,42)-(60,47)
(60,42)-(60,65)
(60,42)-(60,65)
(60,49)-(60,53)
(60,49)-(60,65)
(60,56)-(60,61)
(60,56)-(60,65)
(60,64)-(60,65)
(61,14)-(61,19)
(61,14)-(61,37)
(61,14)-(61,37)
(61,21)-(61,25)
(61,21)-(61,37)
(61,28)-(61,33)
(61,28)-(61,37)
(61,36)-(61,37)
(61,43)-(61,48)
(61,43)-(61,66)
(61,43)-(61,66)
(61,50)-(61,54)
(61,50)-(61,66)
(61,57)-(61,62)
(61,57)-(61,66)
(61,65)-(61,66)
(62,12)-(62,18)
(62,12)-(62,21)
(62,19)-(62,21)
(64,6)-(67,22)
(64,6)-(67,22)
(64,6)-(67,22)
(64,6)-(67,22)
(64,6)-(67,22)
(64,6)-(67,22)
(64,12)-(64,16)
(64,12)-(64,22)
(64,18)-(64,19)
(64,18)-(64,22)
(64,21)-(64,22)
(65,13)-(65,19)
(65,13)-(65,22)
(65,20)-(65,22)
(66,13)-(66,19)
(66,13)-(66,22)
(66,20)-(66,22)
(67,13)-(67,19)
(67,13)-(67,22)
(67,20)-(67,22)
*)

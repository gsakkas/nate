
let rec clone x n = if n <= 0 then [] else [x] @ (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then
    let l1G = (List.length l1) - (List.length l2) in
    (l1, (List.append (clone 0 l1G) l2))
  else
    if (List.length l1) < (List.length l2)
    then
      (let l2G = (List.length l2) - (List.length l1) in
       ((List.append (clone 0 l2G) l1), l2))
    else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (n1,n2) = x in
      let (carry,rest) = a in
      let total = (n1 + n2) + carry in
      ((total / 10), ((total mod 10) :: rest)) in
    let base = (0, []) in
    let args = List.rev (List.combine ((0 :: l1), (0 :: l2))) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n <= 0 then [] else [x] @ (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then
    let l1G = (List.length l1) - (List.length l2) in
    (l1, (List.append (clone 0 l1G) l2))
  else
    if (List.length l1) < (List.length l2)
    then
      (let l2G = (List.length l2) - (List.length l1) in
       ((List.append (clone 0 l2G) l1), l2))
    else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (n1,n2) = x in
      let (carry,rest) = a in
      let total = (n1 + n2) + carry in
      ((total / 10), ((total mod 10) :: rest)) in
    let base = (0, []) in
    let args = List.rev (List.combine (0 :: l1) (0 :: l2)) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(27,26)-(27,59)
(27,41)-(27,59)
*)

(* type error slice
(2,4)-(2,69)
(2,15)-(2,65)
(2,17)-(2,65)
(2,21)-(2,65)
(2,21)-(2,65)
(2,24)-(2,25)
(2,24)-(2,30)
(2,24)-(2,30)
(2,24)-(2,30)
(2,29)-(2,30)
(2,36)-(2,38)
(2,44)-(2,47)
(2,44)-(2,47)
(2,44)-(2,65)
(2,44)-(2,65)
(2,44)-(2,65)
(2,45)-(2,46)
(2,48)-(2,49)
(2,51)-(2,56)
(2,51)-(2,65)
(2,51)-(2,65)
(2,51)-(2,65)
(2,57)-(2,58)
(2,60)-(2,61)
(2,60)-(2,65)
(2,64)-(2,65)
(4,4)-(14,20)
(4,13)-(14,17)
(4,16)-(14,17)
(5,7)-(5,18)
(5,7)-(5,21)
(5,7)-(5,21)
(5,19)-(5,21)
(5,26)-(5,37)
(5,26)-(5,40)
(5,26)-(5,40)
(5,38)-(5,40)
(7,5)-(8,39)
(7,16)-(7,27)
(7,16)-(7,30)
(7,16)-(7,30)
(7,28)-(7,30)
(7,35)-(7,46)
(7,35)-(7,49)
(7,35)-(7,49)
(7,47)-(7,49)
(8,6)-(8,8)
(8,6)-(8,39)
(8,11)-(8,22)
(8,11)-(8,39)
(8,24)-(8,29)
(8,24)-(8,35)
(8,37)-(8,39)
(10,9)-(10,20)
(10,9)-(10,23)
(10,9)-(10,23)
(10,21)-(10,23)
(10,28)-(10,39)
(10,28)-(10,42)
(12,19)-(12,30)
(12,19)-(12,33)
(12,38)-(12,49)
(12,38)-(12,52)
(12,38)-(12,52)
(12,50)-(12,52)
(13,10)-(13,21)
(13,10)-(13,38)
(13,36)-(13,38)
(16,20)-(17,70)
(17,3)-(17,70)
(17,3)-(17,70)
(17,3)-(17,70)
(17,3)-(17,70)
(17,3)-(17,70)
(17,9)-(17,10)
(17,24)-(17,26)
(17,37)-(17,70)
(17,37)-(17,70)
(17,40)-(17,41)
(17,40)-(17,45)
(17,51)-(17,61)
(17,51)-(17,63)
(17,69)-(17,70)
(19,4)-(29,37)
(19,12)-(29,33)
(19,15)-(29,33)
(20,3)-(29,33)
(20,12)-(28,52)
(21,5)-(28,52)
(21,11)-(25,45)
(21,13)-(25,45)
(22,7)-(25,45)
(22,21)-(22,22)
(23,7)-(25,45)
(23,26)-(23,27)
(24,20)-(24,22)
(24,25)-(24,27)
(24,31)-(24,36)
(25,41)-(25,45)
(26,5)-(28,52)
(26,17)-(26,22)
(26,20)-(26,22)
(27,5)-(28,52)
(27,16)-(27,24)
(27,16)-(27,59)
(27,16)-(27,59)
(27,26)-(27,38)
(27,26)-(27,59)
(27,26)-(27,59)
(27,41)-(27,42)
(27,41)-(27,48)
(27,41)-(27,59)
(27,46)-(27,48)
(27,52)-(27,53)
(27,52)-(27,59)
(27,57)-(27,59)
(28,19)-(28,33)
(28,19)-(28,45)
(28,19)-(28,45)
(28,19)-(28,45)
(28,34)-(28,35)
(28,36)-(28,40)
(28,41)-(28,45)
(29,15)-(29,18)
(29,15)-(29,33)
(29,20)-(29,27)
(29,20)-(29,33)
(29,20)-(29,33)
(29,28)-(29,30)
(29,31)-(29,33)
*)

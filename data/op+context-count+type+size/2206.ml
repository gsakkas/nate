
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let rec mulByDigit i l =
  let mul (i1,l1) =
    let f a x =
      let (i,j) = x in
      let (s,t) = a in ((((i * j) + s) / 10), ((((i * j) + s) mod 10) :: t)) in
    let base = (0, []) in
    let args =
      List.combine (List.rev (0 :: l1)) (List.rev (clone (List.length l) i)) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (mul l);;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let l1 = [9; 9; 9];;

let rec mulByDigit i l =
  let f a x =
    let (i,j) = x in
    let (s,t) = a in ((((i * j) + s) / 10), ((((i * j) + s) mod 10) :: t)) in
  let base = (0, []) in
  let args =
    List.combine (List.rev (0 :: l1)) (List.rev (clone (List.length l) i)) in
  let (_,res) = List.fold_left f base args in res;;

*)

(* changed spans
(4,20)-(5,70)
(5,3)-(5,70)
(5,9)-(5,10)
(5,24)-(5,26)
(5,37)-(5,70)
(5,40)-(5,41)
(5,40)-(5,45)
(5,44)-(5,45)
(5,51)-(5,61)
(5,51)-(5,63)
(5,62)-(5,63)
(5,69)-(5,70)
(7,20)-(16,20)
(8,12)-(15,52)
(9,5)-(15,52)
(16,3)-(16,20)
*)

(* type error slice
(2,4)-(2,68)
(2,15)-(2,64)
(2,17)-(2,64)
(2,21)-(2,64)
(2,21)-(2,64)
(2,24)-(2,25)
(2,24)-(2,30)
(2,24)-(2,30)
(2,24)-(2,30)
(2,29)-(2,30)
(2,36)-(2,38)
(2,44)-(2,45)
(2,44)-(2,64)
(2,50)-(2,55)
(2,50)-(2,64)
(2,50)-(2,64)
(2,50)-(2,64)
(2,56)-(2,57)
(2,59)-(2,60)
(2,59)-(2,64)
(2,63)-(2,64)
(4,4)-(5,72)
(4,20)-(5,70)
(5,3)-(5,70)
(5,3)-(5,70)
(5,3)-(5,70)
(5,3)-(5,70)
(5,3)-(5,70)
(5,3)-(5,70)
(5,3)-(5,70)
(5,9)-(5,10)
(5,24)-(5,26)
(5,37)-(5,70)
(5,37)-(5,70)
(5,40)-(5,41)
(5,40)-(5,45)
(5,40)-(5,45)
(5,40)-(5,45)
(5,44)-(5,45)
(5,51)-(5,61)
(5,51)-(5,63)
(5,51)-(5,63)
(5,62)-(5,63)
(5,69)-(5,70)
(7,4)-(16,23)
(7,20)-(16,20)
(7,22)-(16,20)
(8,3)-(16,20)
(8,12)-(15,52)
(9,5)-(15,52)
(9,5)-(15,52)
(9,11)-(11,75)
(9,13)-(11,75)
(10,7)-(11,75)
(10,7)-(11,75)
(10,19)-(10,20)
(11,7)-(11,75)
(11,7)-(11,75)
(11,19)-(11,20)
(11,28)-(11,29)
(11,28)-(11,33)
(11,28)-(11,33)
(11,28)-(11,33)
(11,28)-(11,38)
(11,28)-(11,38)
(11,28)-(11,44)
(11,28)-(11,75)
(11,32)-(11,33)
(11,37)-(11,38)
(11,42)-(11,44)
(11,51)-(11,52)
(11,51)-(11,56)
(11,51)-(11,61)
(11,51)-(11,69)
(11,51)-(11,75)
(11,55)-(11,56)
(11,60)-(11,61)
(11,67)-(11,69)
(11,74)-(11,75)
(12,5)-(15,52)
(12,5)-(15,52)
(12,17)-(12,18)
(12,17)-(12,22)
(12,20)-(12,22)
(13,5)-(15,52)
(13,5)-(15,52)
(14,7)-(14,19)
(14,7)-(14,75)
(14,7)-(14,75)
(14,7)-(14,75)
(14,21)-(14,29)
(14,21)-(14,38)
(14,21)-(14,38)
(14,31)-(14,32)
(14,31)-(14,38)
(14,36)-(14,38)
(14,42)-(14,50)
(14,42)-(14,75)
(14,42)-(14,75)
(14,52)-(14,57)
(14,52)-(14,75)
(14,52)-(14,75)
(14,52)-(14,75)
(14,59)-(14,70)
(14,59)-(14,72)
(14,59)-(14,72)
(14,71)-(14,72)
(14,74)-(14,75)
(15,5)-(15,52)
(15,5)-(15,52)
(15,19)-(15,33)
(15,19)-(15,45)
(15,19)-(15,45)
(15,19)-(15,45)
(15,19)-(15,45)
(15,34)-(15,35)
(15,36)-(15,40)
(15,41)-(15,45)
(15,49)-(15,52)
(16,3)-(16,13)
(16,15)-(16,18)
(16,15)-(16,20)
(16,15)-(16,20)
(16,19)-(16,20)
*)

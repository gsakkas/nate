
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let l = (List.length l1) - (List.length l2) in
  if l < 0
  then (((clone 0 ((-1) * l)) @ l1), l2)
  else (l1, ((clone 0 l) @ l2));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | (carry,rest) ->
          (match x with
           | (_,_) -> carry :: rest
           | (add1,add2) ->
               ((((add1 + add2) + carry) / 10),
                 ((((add1 + add2) + carry) mod 10) :: rest))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let l = (List.length l1) - (List.length l2) in
  if l < 0
  then (((clone 0 ((-1) * l)) @ l1), l2)
  else (l1, ((clone 0 l) @ l2));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | (carry,rest) ->
          (match x with
           | (add1,add2) ->
               ((((add1 + add2) + carry) / 10),
                 ((((add1 + add2) + carry) mod 10) :: rest))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(18,12)-(22,59)
(19,23)-(19,28)
(19,23)-(19,36)
(19,32)-(19,36)
*)

(* type error slice
(2,4)-(2,68)
(2,15)-(2,64)
(2,17)-(2,64)
(2,21)-(2,64)
(2,21)-(2,64)
(2,24)-(2,25)
(2,24)-(2,30)
(2,24)-(2,30)
(2,24)-(2,30)
(2,29)-(2,30)
(2,36)-(2,38)
(2,44)-(2,45)
(2,44)-(2,64)
(2,50)-(2,55)
(2,50)-(2,64)
(2,50)-(2,64)
(2,50)-(2,64)
(2,56)-(2,57)
(2,59)-(2,60)
(2,59)-(2,64)
(2,63)-(2,64)
(4,4)-(8,34)
(4,13)-(8,30)
(4,16)-(8,30)
(5,12)-(5,23)
(5,12)-(5,26)
(5,12)-(5,26)
(5,24)-(5,26)
(5,31)-(5,42)
(5,31)-(5,45)
(5,31)-(5,45)
(5,43)-(5,45)
(7,11)-(7,16)
(7,11)-(7,28)
(7,11)-(7,35)
(7,11)-(7,40)
(7,31)-(7,32)
(7,33)-(7,35)
(7,38)-(7,40)
(8,15)-(8,30)
(8,26)-(8,27)
(8,28)-(8,30)
(10,20)-(11,75)
(11,3)-(11,75)
(11,3)-(11,75)
(11,3)-(11,75)
(11,3)-(11,75)
(11,3)-(11,75)
(11,9)-(11,10)
(11,24)-(11,26)
(11,37)-(11,75)
(11,40)-(11,41)
(11,40)-(11,45)
(11,51)-(11,61)
(11,51)-(11,63)
(13,4)-(26,37)
(13,12)-(26,33)
(13,15)-(26,33)
(14,3)-(26,33)
(14,12)-(25,52)
(15,5)-(25,52)
(15,11)-(22,59)
(15,13)-(22,59)
(16,13)-(16,14)
(18,12)-(22,59)
(18,12)-(22,59)
(18,12)-(22,59)
(18,12)-(22,59)
(18,18)-(18,19)
(19,23)-(19,28)
(19,23)-(19,36)
(19,32)-(19,36)
(21,20)-(21,24)
(21,20)-(21,31)
(21,20)-(21,31)
(21,20)-(21,31)
(21,20)-(21,40)
(21,20)-(21,40)
(21,20)-(21,46)
(21,20)-(22,59)
(21,27)-(21,31)
(21,35)-(21,40)
(21,44)-(21,46)
(22,22)-(22,26)
(22,22)-(22,33)
(22,22)-(22,42)
(22,22)-(22,50)
(22,22)-(22,59)
(22,29)-(22,33)
(22,37)-(22,42)
(22,48)-(22,50)
(22,55)-(22,59)
(23,5)-(25,52)
(23,17)-(23,22)
(23,20)-(23,22)
(24,5)-(25,52)
(24,16)-(24,24)
(24,16)-(24,44)
(24,16)-(24,44)
(24,26)-(24,38)
(24,26)-(24,44)
(24,26)-(24,44)
(24,26)-(24,44)
(24,39)-(24,41)
(24,42)-(24,44)
(25,19)-(25,33)
(25,19)-(25,45)
(25,19)-(25,45)
(25,19)-(25,45)
(25,34)-(25,35)
(25,36)-(25,40)
(25,41)-(25,45)
(26,15)-(26,18)
(26,15)-(26,33)
(26,15)-(26,33)
(26,20)-(26,27)
(26,20)-(26,33)
(26,20)-(26,33)
(26,28)-(26,30)
(26,31)-(26,33)
*)

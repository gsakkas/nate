
let rec mulByDigit i l =
  let comb a b = match b with | [] -> [a] | hd::tl -> [a + hd] @ [tl] in
  let rec mBDhelper i x =
    match x with
    | [] -> []
    | hd::tl ->
        if (hd * i) > 9
        then ((hd * i) / 10) :: (comb ((hd * i) mod 10) (mBDhelper i tl))
        else (hd * i) :: (mBDhelper i tl) in
  mBDhelper i l;;


(* fix

let rec mulByDigit i l =
  let comb a b = match b with | [] -> [a] | hd::tl -> [a + hd] @ tl in
  let rec mBDhelper i x =
    match x with
    | [] -> []
    | hd::tl ->
        if (hd * i) > 9
        then ((hd * i) / 10) :: (comb ((hd * i) mod 10) (mBDhelper i tl))
        else (hd * i) :: (mBDhelper i tl) in
  mBDhelper i l;;

*)

(* changed spans
(3,66)-(3,70)
*)

(* type error slice
(2,4)-(11,18)
(2,20)-(11,16)
(2,22)-(11,16)
(3,3)-(11,16)
(3,12)-(3,70)
(3,14)-(3,70)
(3,18)-(3,70)
(3,18)-(3,70)
(3,18)-(3,70)
(3,18)-(3,70)
(3,24)-(3,25)
(3,39)-(3,42)
(3,39)-(3,42)
(3,40)-(3,41)
(3,55)-(3,63)
(3,55)-(3,63)
(3,55)-(3,70)
(3,55)-(3,70)
(3,55)-(3,70)
(3,56)-(3,57)
(3,56)-(3,62)
(3,56)-(3,62)
(3,56)-(3,62)
(3,60)-(3,62)
(3,64)-(3,65)
(3,66)-(3,70)
(3,66)-(3,70)
(3,67)-(3,69)
(4,21)-(10,41)
(4,23)-(10,41)
(5,5)-(10,41)
(5,5)-(10,41)
(5,5)-(10,41)
(5,5)-(10,41)
(5,5)-(10,41)
(5,11)-(5,12)
(6,13)-(6,15)
(8,13)-(8,15)
(8,18)-(8,19)
(9,34)-(9,38)
(9,34)-(9,72)
(9,34)-(9,72)
(9,58)-(9,67)
(9,58)-(9,72)
(10,27)-(10,36)
(10,27)-(10,41)
(11,13)-(11,14)
(11,15)-(11,16)
*)


type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth > 0
  then
    let rnd = rand 0 100 in
    (if (rnd mod 5) = 0
     then buildSine (build (rand, (depth - 1)))
     else
       if (rnd mod 5) = 1
       then buildCosine (build (rand, (depth - 1)))
       else
         if (rnd mod 5) = 2
         then buildAverage ((buildX ()), (buildY ()))
         else
           if (rnd mod 5) = 3
           then buildTimes ((buildX ()), (buildY ()))
           else
             buildThresh
               ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
                 (build (rand, (depth - 1))), (build (rand, (depth - 1)))))
  else
    (let rnd = rand 0 100 in
     if (rand mod 2) = 0
     then buildAverage ((buildX ()), (buildY ()))
     else buildTimes ((buildX ()), (buildY ())));;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth > 0
  then
    let rnd = rand (0, 100) in
    (if (rnd mod 5) = 0
     then buildSine (build (rand, (depth - 1)))
     else
       if (rnd mod 5) = 1
       then buildCosine (build (rand, (depth - 1)))
       else
         if (rnd mod 5) = 2
         then buildAverage ((buildX ()), (buildY ()))
         else
           if (rnd mod 5) = 3
           then buildTimes ((buildX ()), (buildY ()))
           else
             buildThresh
               ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
                 (build (rand, (depth - 1))), (build (rand, (depth - 1)))))
  else
    (let rnd = rand (0, 100) in
     if (rnd mod 2) = 0
     then buildAverage ((buildX ()), (buildY ()))
     else buildTimes ((buildX ()), (buildY ())));;

*)

(* changed spans
(28,15)-(28,25)
(28,20)-(28,21)
(45,16)-(45,26)
(45,21)-(45,22)
(46,10)-(46,14)
*)

(* type error slice
(11,4)-(11,46)
(11,19)-(11,43)
(11,28)-(11,43)
(11,37)-(11,39)
(11,41)-(11,43)
(13,4)-(13,31)
(13,17)-(13,29)
(13,21)-(13,29)
(13,28)-(13,29)
(15,4)-(15,27)
(15,15)-(15,25)
(15,19)-(15,25)
(15,24)-(15,25)
(17,4)-(17,70)
(17,18)-(17,67)
(17,39)-(17,67)
(17,47)-(17,48)
(17,50)-(17,51)
(17,53)-(17,59)
(17,61)-(17,67)
(19,4)-(19,42)
(19,17)-(19,39)
(19,26)-(19,39)
(19,33)-(19,35)
(19,37)-(19,39)
(21,4)-(21,23)
(21,12)-(21,21)
(21,12)-(21,21)
(21,17)-(21,21)
(23,4)-(23,23)
(23,12)-(23,21)
(23,12)-(23,21)
(23,17)-(23,21)
(25,16)-(48,46)
(26,3)-(48,46)
(26,3)-(48,46)
(26,6)-(26,11)
(26,6)-(26,15)
(26,6)-(26,15)
(26,6)-(26,15)
(26,14)-(26,15)
(28,5)-(43,71)
(28,5)-(43,71)
(28,15)-(28,19)
(28,15)-(28,25)
(28,15)-(28,25)
(28,15)-(28,25)
(28,20)-(28,21)
(28,22)-(28,25)
(29,6)-(43,71)
(29,6)-(43,71)
(29,10)-(29,13)
(29,10)-(29,19)
(29,10)-(29,19)
(29,10)-(29,24)
(29,10)-(29,24)
(29,18)-(29,19)
(29,23)-(29,24)
(30,11)-(30,20)
(30,11)-(30,45)
(30,11)-(30,45)
(30,22)-(30,27)
(30,22)-(30,45)
(30,22)-(30,45)
(30,29)-(30,33)
(30,29)-(30,45)
(30,36)-(30,41)
(30,36)-(30,45)
(30,44)-(30,45)
(32,8)-(43,71)
(32,8)-(43,71)
(32,12)-(32,15)
(32,12)-(32,21)
(32,12)-(32,26)
(32,12)-(32,26)
(32,20)-(32,21)
(32,25)-(32,26)
(33,13)-(33,24)
(33,13)-(33,49)
(33,26)-(33,31)
(33,26)-(33,49)
(33,33)-(33,37)
(33,33)-(33,49)
(33,40)-(33,45)
(33,40)-(33,49)
(33,48)-(33,49)
(35,10)-(43,71)
(35,10)-(43,71)
(35,14)-(35,17)
(35,14)-(35,23)
(35,14)-(35,28)
(35,14)-(35,28)
(35,22)-(35,23)
(35,27)-(35,28)
(36,15)-(36,27)
(36,15)-(36,52)
(36,15)-(36,52)
(36,30)-(36,36)
(36,30)-(36,39)
(36,30)-(36,52)
(36,37)-(36,39)
(36,43)-(36,49)
(36,43)-(36,52)
(36,50)-(36,52)
(38,12)-(43,71)
(38,12)-(43,71)
(38,16)-(38,19)
(38,16)-(38,25)
(38,16)-(38,30)
(38,16)-(38,30)
(38,24)-(38,25)
(38,29)-(38,30)
(39,17)-(39,27)
(39,17)-(39,52)
(39,30)-(39,36)
(39,30)-(39,39)
(39,30)-(39,52)
(39,37)-(39,39)
(39,43)-(39,49)
(39,43)-(39,52)
(39,50)-(39,52)
(41,14)-(41,25)
(41,14)-(43,71)
(42,18)-(42,23)
(42,18)-(42,41)
(42,18)-(43,71)
(42,25)-(42,29)
(42,25)-(42,41)
(42,32)-(42,37)
(42,32)-(42,41)
(42,40)-(42,41)
(42,47)-(42,52)
(42,47)-(42,70)
(42,54)-(42,58)
(42,54)-(42,70)
(42,61)-(42,66)
(42,61)-(42,70)
(42,69)-(42,70)
(43,19)-(43,24)
(43,19)-(43,42)
(43,26)-(43,30)
(43,26)-(43,42)
(43,33)-(43,38)
(43,33)-(43,42)
(43,41)-(43,42)
(43,48)-(43,53)
(43,48)-(43,71)
(43,55)-(43,59)
(43,55)-(43,71)
(43,62)-(43,67)
(43,62)-(43,71)
(43,70)-(43,71)
(45,6)-(48,46)
(45,6)-(48,46)
(45,16)-(45,20)
(45,16)-(45,26)
(45,21)-(45,22)
(45,23)-(45,26)
(46,6)-(48,46)
(46,6)-(48,46)
(46,10)-(46,14)
(46,10)-(46,20)
(46,10)-(46,20)
(46,10)-(46,25)
(46,10)-(46,25)
(46,19)-(46,20)
(46,24)-(46,25)
(47,11)-(47,23)
(47,11)-(47,48)
(47,26)-(47,32)
(47,26)-(47,35)
(47,26)-(47,48)
(47,33)-(47,35)
(47,39)-(47,45)
(47,39)-(47,48)
(47,46)-(47,48)
(48,11)-(48,21)
(48,11)-(48,46)
(48,24)-(48,30)
(48,24)-(48,33)
(48,24)-(48,46)
(48,31)-(48,33)
(48,37)-(48,43)
(48,37)-(48,46)
(48,44)-(48,46)
*)

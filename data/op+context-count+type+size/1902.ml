
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let x1 = List.length l1 in
  let x2 = List.length l2 in
  if x1 < x2
  then (((clone 0 (x2 - x1)) @ l1), l2)
  else (l1, ((clone 0 (x1 - x2)) @ l2));;

let rec removeZero l =
  match l with
  | [] -> []
  | h::[] -> if h <> 0 then l else []
  | h::t -> if h <> 0 then l else removeZero t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (x1,x2) = x in
      let (carry,res) = a in
      let tens = (x1 + x2) + (carry / 10) in
      let ones = (x1 + x2) + (carry mod 10) in
      ([tens], (tens :: ones :: res)) in
    let base = ([0], [0]) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let x1 = List.length l1 in
  let x2 = List.length l2 in
  if x1 < x2
  then (((clone 0 (x2 - x1)) @ l1), l2)
  else (l1, ((clone 0 (x1 - x2)) @ l2));;

let rec removeZero l =
  match l with
  | [] -> []
  | h::[] -> if h <> 0 then l else []
  | h::t -> if h <> 0 then l else removeZero t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (x1,x2) = x in
      let (carry,res) = a in
      if carry <> []
      then
        let ch::_ = carry in
        let tens = ((x1 + x2) + ch) / 10 in
        let ones = ((x1 + x2) + ch) mod 10 in ([tens], (tens :: ones :: res))
      else
        (let tens = (x1 + x2) / 10 in
         let ones = (x1 + x2) mod 10 in ([tens], (tens :: ones :: res))) in
    let base = ([], []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(22,7)-(24,36)
(22,19)-(22,41)
(22,31)-(22,36)
(22,31)-(22,41)
(23,19)-(23,43)
(23,31)-(23,36)
(23,31)-(23,43)
(25,17)-(25,25)
(25,18)-(25,19)
(25,22)-(25,25)
(25,23)-(25,24)
(26,5)-(27,52)
(26,16)-(26,24)
(26,16)-(26,44)
(26,26)-(26,38)
(26,26)-(26,44)
(26,39)-(26,41)
(26,42)-(26,44)
(27,5)-(27,52)
(27,19)-(27,33)
(27,19)-(27,45)
(27,34)-(27,35)
(27,36)-(27,40)
(27,41)-(27,45)
(27,49)-(27,52)
(28,3)-(28,13)
(28,15)-(28,18)
(28,15)-(28,33)
(28,20)-(28,27)
(28,20)-(28,33)
(28,28)-(28,30)
(28,31)-(28,33)
*)

(* type error slice
(2,4)-(2,68)
(2,15)-(2,64)
(2,17)-(2,64)
(2,21)-(2,64)
(2,21)-(2,64)
(2,24)-(2,25)
(2,24)-(2,30)
(2,24)-(2,30)
(2,24)-(2,30)
(2,29)-(2,30)
(2,36)-(2,38)
(2,44)-(2,45)
(2,44)-(2,64)
(2,50)-(2,55)
(2,50)-(2,64)
(2,50)-(2,64)
(2,50)-(2,64)
(2,56)-(2,57)
(2,59)-(2,60)
(2,59)-(2,64)
(2,63)-(2,64)
(4,4)-(9,42)
(4,13)-(9,38)
(4,16)-(9,38)
(5,12)-(5,23)
(5,12)-(5,26)
(5,12)-(5,26)
(5,24)-(5,26)
(6,12)-(6,23)
(6,12)-(6,26)
(6,12)-(6,26)
(6,24)-(6,26)
(8,11)-(8,16)
(8,11)-(8,27)
(8,11)-(8,34)
(8,11)-(8,39)
(8,30)-(8,31)
(8,32)-(8,34)
(8,37)-(8,39)
(9,15)-(9,38)
(9,34)-(9,35)
(9,36)-(9,38)
(11,20)-(15,47)
(12,3)-(15,47)
(12,3)-(15,47)
(12,3)-(15,47)
(12,3)-(15,47)
(12,3)-(15,47)
(12,3)-(15,47)
(12,3)-(15,47)
(12,3)-(15,47)
(12,9)-(12,10)
(13,11)-(13,13)
(14,14)-(14,38)
(14,14)-(14,38)
(14,17)-(14,18)
(14,17)-(14,23)
(14,29)-(14,30)
(14,36)-(14,38)
(15,13)-(15,47)
(15,13)-(15,47)
(15,16)-(15,17)
(15,16)-(15,22)
(15,28)-(15,29)
(15,35)-(15,45)
(15,35)-(15,47)
(17,4)-(28,37)
(17,12)-(28,33)
(17,15)-(28,33)
(18,3)-(28,33)
(18,12)-(27,52)
(19,5)-(27,52)
(19,11)-(24,36)
(19,13)-(24,36)
(20,7)-(24,36)
(20,7)-(24,36)
(20,21)-(20,22)
(21,7)-(24,36)
(21,7)-(24,36)
(21,25)-(21,26)
(22,7)-(24,36)
(22,7)-(24,36)
(22,19)-(22,21)
(22,19)-(22,26)
(22,19)-(22,26)
(22,19)-(22,26)
(22,19)-(22,41)
(22,24)-(22,26)
(22,31)-(22,36)
(22,31)-(22,41)
(22,31)-(22,41)
(22,39)-(22,41)
(23,7)-(24,36)
(23,7)-(24,36)
(23,19)-(23,21)
(23,19)-(23,26)
(23,19)-(23,43)
(23,24)-(23,26)
(23,31)-(23,36)
(23,31)-(23,43)
(23,41)-(23,43)
(24,8)-(24,14)
(24,8)-(24,14)
(24,8)-(24,36)
(24,9)-(24,13)
(24,17)-(24,21)
(24,17)-(24,36)
(24,25)-(24,29)
(24,25)-(24,36)
(24,33)-(24,36)
(25,5)-(27,52)
(25,17)-(25,20)
(25,17)-(25,20)
(25,17)-(25,25)
(25,18)-(25,19)
(25,22)-(25,25)
(25,22)-(25,25)
(25,23)-(25,24)
(26,5)-(27,52)
(26,16)-(26,24)
(26,16)-(26,44)
(26,16)-(26,44)
(26,26)-(26,38)
(26,26)-(26,44)
(26,26)-(26,44)
(26,26)-(26,44)
(26,39)-(26,41)
(26,42)-(26,44)
(27,19)-(27,33)
(27,19)-(27,45)
(27,19)-(27,45)
(27,19)-(27,45)
(27,19)-(27,45)
(27,34)-(27,35)
(27,36)-(27,40)
(27,41)-(27,45)
(28,15)-(28,18)
(28,15)-(28,33)
(28,15)-(28,33)
(28,20)-(28,27)
(28,20)-(28,33)
(28,20)-(28,33)
(28,28)-(28,30)
(28,31)-(28,33)
*)

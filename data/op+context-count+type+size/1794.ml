
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let carry = match a with | (x,y) -> x in
      match x with
      | (d1,d2) ->
          let new_carry = ((a + d1) + d2) / 10 in
          let digit = ((a + d1) + d2) mod 10 in
          (match a with | (x,y) -> (new_carry, (digit :: y))) in
    let base = (0, []) in
    let args = List.combine (List.rev (0 :: l1)) (List.rev (0 :: l2)) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let carry = match a with | (x,y) -> x in
      match x with
      | (d1,d2) ->
          let new_carry = ((carry + d1) + d2) / 10 in
          let digit = ((carry + d1) + d2) mod 10 in
          (match a with | (x,y) -> (new_carry, (digit :: y))) in
    let base = (0, []) in
    let args = List.combine (List.rev (0 :: l1)) (List.rev (0 :: l2)) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(18,29)-(18,30)
(19,25)-(19,26)
*)

(* type error slice
(2,4)-(2,68)
(2,15)-(2,64)
(2,17)-(2,64)
(2,21)-(2,64)
(2,21)-(2,64)
(2,24)-(2,25)
(2,24)-(2,30)
(2,24)-(2,30)
(2,24)-(2,30)
(2,29)-(2,30)
(2,36)-(2,38)
(2,44)-(2,45)
(2,44)-(2,64)
(2,50)-(2,55)
(2,50)-(2,64)
(2,50)-(2,64)
(2,50)-(2,64)
(2,56)-(2,57)
(2,59)-(2,60)
(2,59)-(2,64)
(2,63)-(2,64)
(4,4)-(7,70)
(4,13)-(7,67)
(4,16)-(7,67)
(5,7)-(5,18)
(5,7)-(5,21)
(5,7)-(5,21)
(5,19)-(5,21)
(5,26)-(5,37)
(5,26)-(5,40)
(5,26)-(5,40)
(5,38)-(5,40)
(6,9)-(6,11)
(6,9)-(6,66)
(6,15)-(6,20)
(6,15)-(6,58)
(6,15)-(6,66)
(6,25)-(6,36)
(6,25)-(6,39)
(6,25)-(6,39)
(6,37)-(6,39)
(6,44)-(6,55)
(6,44)-(6,58)
(6,44)-(6,58)
(6,56)-(6,58)
(6,62)-(6,63)
(6,64)-(6,66)
(7,11)-(7,62)
(7,21)-(7,32)
(7,21)-(7,35)
(7,40)-(7,51)
(7,40)-(7,54)
(7,40)-(7,54)
(7,52)-(7,54)
(7,58)-(7,59)
(7,60)-(7,62)
(9,20)-(10,75)
(10,3)-(10,75)
(10,3)-(10,75)
(10,3)-(10,75)
(10,3)-(10,75)
(10,3)-(10,75)
(10,9)-(10,10)
(10,24)-(10,26)
(10,37)-(10,75)
(10,40)-(10,41)
(10,40)-(10,45)
(10,51)-(10,61)
(10,51)-(10,63)
(12,4)-(24,37)
(12,12)-(24,33)
(12,15)-(24,33)
(13,3)-(24,33)
(13,12)-(23,52)
(14,5)-(23,52)
(14,11)-(20,59)
(14,13)-(20,59)
(15,7)-(20,59)
(15,19)-(15,44)
(15,19)-(15,44)
(15,25)-(15,26)
(15,43)-(15,44)
(16,13)-(16,14)
(18,11)-(20,59)
(18,29)-(18,30)
(18,29)-(18,35)
(18,29)-(18,35)
(18,29)-(18,35)
(18,29)-(18,41)
(18,29)-(18,41)
(18,29)-(18,47)
(18,33)-(18,35)
(18,39)-(18,41)
(18,45)-(18,47)
(19,25)-(19,26)
(19,25)-(19,31)
(19,29)-(19,31)
(20,12)-(20,59)
(20,18)-(20,19)
(20,58)-(20,59)
(21,5)-(23,52)
(21,17)-(21,22)
(21,20)-(21,22)
(22,16)-(22,28)
(22,16)-(22,68)
(22,30)-(22,38)
(22,30)-(22,47)
(22,45)-(22,47)
(22,51)-(22,59)
(22,51)-(22,68)
(22,66)-(22,68)
(23,19)-(23,33)
(23,19)-(23,45)
(23,19)-(23,45)
(23,34)-(23,35)
(23,36)-(23,40)
(24,15)-(24,18)
(24,15)-(24,33)
(24,20)-(24,27)
(24,20)-(24,33)
(24,20)-(24,33)
(24,28)-(24,30)
(24,31)-(24,33)
*)


let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2))
  else ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h != 0 then l else removeZero t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | (list2,res) ->
          (match list2 with
           | [] -> ([], res)
           | h::t ->
               (match res with
                | [] -> (t, ((h + x) :: res))
                | h2::t2 ->
                    if h2 >= 10
                    then
                      (t,
                        ((if t != []
                          then ((h + x) + 1) :: (h2 mod 10) :: t2
                          else
                            if ((h + x) + 1) >= 10
                            then 1 :: (((h + x) + 1) mod 10) :: (h2 mod 10)
                              :: t2
                            else ((h + x) + 1) :: (h2 mod 10) :: t2)))
                    else
                      (t,
                        (if t != []
                         then (h + x) :: res
                         else
                           if (h + x) >= 10
                           then 1 :: ((h + x) mod 10) :: res
                           else (h + x) :: res)))) in
    let base = ((List.rev l2), []) in
    let args = List.rev l1 in let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l =
  if i = 0
  then []
  else
    if i = 1
    then l
    else bigAdd (mulByDigit (i - 2) l) ((mulByDigit i) - (2 l));;


(* fix

let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2))
  else ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h != 0 then l else removeZero t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | (list2,res) ->
          (match list2 with
           | [] -> ([], res)
           | h::t ->
               (match res with
                | [] -> (t, ((h + x) :: res))
                | h2::t2 ->
                    if h2 >= 10
                    then
                      (t,
                        ((if t != []
                          then ((h + x) + 1) :: (h2 mod 10) :: t2
                          else
                            if ((h + x) + 1) >= 10
                            then 1 :: (((h + x) + 1) mod 10) :: (h2 mod 10)
                              :: t2
                            else ((h + x) + 1) :: (h2 mod 10) :: t2)))
                    else
                      (t,
                        (if t != []
                         then (h + x) :: res
                         else
                           if (h + x) >= 10
                           then 1 :: ((h + x) mod 10) :: res
                           else (h + x) :: res)))) in
    let base = ((List.rev l2), []) in
    let args = List.rev l1 in let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l =
  if i = 0
  then []
  else
    if i = 1 then l else bigAdd (mulByDigit (i - 2) l) (mulByDigit (i - 2) l);;

*)

(* changed spans
(51,42)-(51,54)
(51,42)-(51,62)
(51,53)-(51,54)
(51,59)-(51,62)
*)

(* type error slice
(2,4)-(2,67)
(2,15)-(2,65)
(2,17)-(2,65)
(2,21)-(2,65)
(2,21)-(2,65)
(2,24)-(2,25)
(2,24)-(2,29)
(2,24)-(2,29)
(2,24)-(2,29)
(2,28)-(2,29)
(2,35)-(2,36)
(2,35)-(2,55)
(2,41)-(2,46)
(2,41)-(2,55)
(2,41)-(2,55)
(2,41)-(2,55)
(2,47)-(2,48)
(2,50)-(2,51)
(2,50)-(2,55)
(2,54)-(2,55)
(2,63)-(2,65)
(4,4)-(7,80)
(4,13)-(7,77)
(4,16)-(7,77)
(5,3)-(7,77)
(5,7)-(5,18)
(5,7)-(5,21)
(5,7)-(5,21)
(5,7)-(5,40)
(5,7)-(5,40)
(5,19)-(5,21)
(5,26)-(5,37)
(5,26)-(5,40)
(5,26)-(5,40)
(5,38)-(5,40)
(6,9)-(6,11)
(6,9)-(6,76)
(6,14)-(6,25)
(6,14)-(6,76)
(6,14)-(6,76)
(6,14)-(6,76)
(6,27)-(6,32)
(6,27)-(6,70)
(6,27)-(6,70)
(6,33)-(6,34)
(6,37)-(6,48)
(6,37)-(6,51)
(6,37)-(6,51)
(6,37)-(6,70)
(6,49)-(6,51)
(6,56)-(6,67)
(6,56)-(6,70)
(6,56)-(6,70)
(6,68)-(6,70)
(6,74)-(6,76)
(7,10)-(7,21)
(7,10)-(7,72)
(7,10)-(7,72)
(7,10)-(7,72)
(7,10)-(7,77)
(7,23)-(7,28)
(7,23)-(7,66)
(7,29)-(7,30)
(7,33)-(7,44)
(7,33)-(7,47)
(7,33)-(7,47)
(7,33)-(7,66)
(7,45)-(7,47)
(7,52)-(7,63)
(7,52)-(7,66)
(7,52)-(7,66)
(7,64)-(7,66)
(7,70)-(7,72)
(7,75)-(7,77)
(9,4)-(10,73)
(9,20)-(10,71)
(10,3)-(10,71)
(10,3)-(10,71)
(10,3)-(10,71)
(10,3)-(10,71)
(10,3)-(10,71)
(10,3)-(10,71)
(10,3)-(10,71)
(10,9)-(10,10)
(10,24)-(10,26)
(10,37)-(10,71)
(10,37)-(10,71)
(10,40)-(10,41)
(10,40)-(10,46)
(10,40)-(10,46)
(10,40)-(10,46)
(10,45)-(10,46)
(10,52)-(10,53)
(10,59)-(10,69)
(10,59)-(10,71)
(10,59)-(10,71)
(10,70)-(10,71)
(12,4)-(43,37)
(12,12)-(43,33)
(12,15)-(43,33)
(13,3)-(43,33)
(13,3)-(43,33)
(13,12)-(42,78)
(14,5)-(42,78)
(14,5)-(42,78)
(14,11)-(40,47)
(14,13)-(40,47)
(15,7)-(40,47)
(15,7)-(40,47)
(15,13)-(15,14)
(17,12)-(40,47)
(17,12)-(40,47)
(17,12)-(40,47)
(17,12)-(40,47)
(17,12)-(40,47)
(17,12)-(40,47)
(17,12)-(40,47)
(17,18)-(17,23)
(18,21)-(18,23)
(18,21)-(18,28)
(18,25)-(18,28)
(20,17)-(40,47)
(20,17)-(40,47)
(20,17)-(40,47)
(20,17)-(40,47)
(20,17)-(40,47)
(20,23)-(20,26)
(21,26)-(21,27)
(21,26)-(21,44)
(21,31)-(21,32)
(21,31)-(21,36)
(21,31)-(21,36)
(21,31)-(21,36)
(21,31)-(21,44)
(21,35)-(21,36)
(21,41)-(21,44)
(23,21)-(40,47)
(23,24)-(23,26)
(23,24)-(23,32)
(23,24)-(23,32)
(23,24)-(23,32)
(23,30)-(23,32)
(25,24)-(25,25)
(25,24)-(32,68)
(26,27)-(32,68)
(26,30)-(26,31)
(26,30)-(26,37)
(26,30)-(26,37)
(26,30)-(26,37)
(26,35)-(26,37)
(27,34)-(27,35)
(27,34)-(27,39)
(27,34)-(27,44)
(27,34)-(27,66)
(27,38)-(27,39)
(27,43)-(27,44)
(27,50)-(27,52)
(27,50)-(27,59)
(27,50)-(27,66)
(27,57)-(27,59)
(27,64)-(27,66)
(29,29)-(32,68)
(29,34)-(29,35)
(29,34)-(29,39)
(29,34)-(29,44)
(29,34)-(29,51)
(29,34)-(29,51)
(29,38)-(29,39)
(29,43)-(29,44)
(29,49)-(29,51)
(30,34)-(30,35)
(30,34)-(31,36)
(30,42)-(30,43)
(30,42)-(30,47)
(30,42)-(30,52)
(30,42)-(30,60)
(30,42)-(31,36)
(30,46)-(30,47)
(30,51)-(30,52)
(30,58)-(30,60)
(30,66)-(30,68)
(30,66)-(30,75)
(30,66)-(31,36)
(30,73)-(30,75)
(31,34)-(31,36)
(32,36)-(32,37)
(32,36)-(32,41)
(32,36)-(32,46)
(32,36)-(32,68)
(32,40)-(32,41)
(32,45)-(32,46)
(32,52)-(32,54)
(32,52)-(32,61)
(32,52)-(32,68)
(32,59)-(32,61)
(32,66)-(32,68)
(34,24)-(34,25)
(34,24)-(40,47)
(35,26)-(40,47)
(35,29)-(35,30)
(35,29)-(35,36)
(35,29)-(35,36)
(35,29)-(35,36)
(35,34)-(35,36)
(36,32)-(36,33)
(36,32)-(36,37)
(36,32)-(36,45)
(36,36)-(36,37)
(36,42)-(36,45)
(38,28)-(40,47)
(38,32)-(38,33)
(38,32)-(38,37)
(38,32)-(38,44)
(38,32)-(38,44)
(38,36)-(38,37)
(38,42)-(38,44)
(39,33)-(39,34)
(39,33)-(39,61)
(39,40)-(39,41)
(39,40)-(39,45)
(39,40)-(39,53)
(39,40)-(39,61)
(39,44)-(39,45)
(39,51)-(39,53)
(39,58)-(39,61)
(40,34)-(40,35)
(40,34)-(40,39)
(40,34)-(40,47)
(40,38)-(40,39)
(40,44)-(40,47)
(41,5)-(42,78)
(41,5)-(42,78)
(41,18)-(41,26)
(41,18)-(41,29)
(41,18)-(41,29)
(41,18)-(41,34)
(41,27)-(41,29)
(41,32)-(41,34)
(42,5)-(42,78)
(42,5)-(42,78)
(42,16)-(42,24)
(42,16)-(42,27)
(42,16)-(42,27)
(42,25)-(42,27)
(42,31)-(42,78)
(42,31)-(42,78)
(42,45)-(42,59)
(42,45)-(42,71)
(42,45)-(42,71)
(42,45)-(42,71)
(42,45)-(42,71)
(42,60)-(42,61)
(42,62)-(42,66)
(42,67)-(42,71)
(42,75)-(42,78)
(43,3)-(43,13)
(43,3)-(43,33)
(43,3)-(43,33)
(43,15)-(43,18)
(43,15)-(43,33)
(43,15)-(43,33)
(43,20)-(43,27)
(43,20)-(43,33)
(43,20)-(43,33)
(43,20)-(43,33)
(43,28)-(43,30)
(43,31)-(43,33)
(45,4)-(51,66)
(45,20)-(51,62)
(45,22)-(51,62)
(46,3)-(51,62)
(46,3)-(51,62)
(46,6)-(46,7)
(46,6)-(46,11)
(46,6)-(46,11)
(46,6)-(46,11)
(46,10)-(46,11)
(47,8)-(47,10)
(49,5)-(51,62)
(49,5)-(51,62)
(49,8)-(49,9)
(49,8)-(49,13)
(49,8)-(49,13)
(49,12)-(49,13)
(50,10)-(50,11)
(51,10)-(51,16)
(51,10)-(51,62)
(51,18)-(51,28)
(51,18)-(51,38)
(51,18)-(51,38)
(51,18)-(51,38)
(51,30)-(51,31)
(51,30)-(51,35)
(51,34)-(51,35)
(51,37)-(51,38)
(51,42)-(51,52)
(51,42)-(51,54)
(51,42)-(51,62)
(51,53)-(51,54)
(51,59)-(51,60)
(51,59)-(51,62)
(51,59)-(51,62)
(51,61)-(51,62)
*)


let rec clone x n =
  match n > 0 with | true  -> x :: (clone x (n - 1)) | false  -> [];;

let padZero l1 l2 =
  let length1 = List.length l1 in
  let length2 = List.length l2 in
  match length1 >= length2 with
  | true  ->
      let n = length1 - length2 in
      let zeroes = clone 0 n in (l1, (List.append zeroes l2))
  | false  ->
      let n = length2 - length1 in
      let zeroes = clone 0 n in ((List.append zeroes l1), l2);;

let rec removeZero l =
  match l with
  | [] -> []
  | h::t -> (match h with | 0 -> removeZero t | _ -> h :: t);;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | (h1::t1,rh::rt) ->
          (t1, ((((h1 + x) + rh) / 10) :: (((h1 + x) + rh) mod 10) :: rt)) in
    let base = ((List.rev l1), [0]) in
    let args = List.rev l2 in let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l =
  match i mod 2 with
  | 0 ->
      (match i with
       | 0 -> []
       | 2 -> bigAdd l l
       | _ -> bigAdd (mulByDigit (i / 2) l) (mulByDigit (i / 2) l))
  | _ -> if i = 1 then l else bigAdd l (mulByDigit (i - 1) l);;

let bigMul l1 l2 =
  let f a x =
    match a with
    | (h1::t1,rh::rt) -> (t1, (((mulByDigit h1 rh) :: rt) :: rt)) in
  let base = ((List.rev l1), [0]) in
  let args = List.rev l2 in let (_,res) = List.fold_left f base args in res;;


(* fix

let rec clone x n =
  match n > 0 with | true  -> x :: (clone x (n - 1)) | false  -> [];;

let padZero l1 l2 =
  let length1 = List.length l1 in
  let length2 = List.length l2 in
  match length1 >= length2 with
  | true  ->
      let n = length1 - length2 in
      let zeroes = clone 0 n in (l1, (List.append zeroes l2))
  | false  ->
      let n = length2 - length1 in
      let zeroes = clone 0 n in ((List.append zeroes l1), l2);;

let rec removeZero l =
  match l with
  | [] -> []
  | h::t -> (match h with | 0 -> removeZero t | _ -> h :: t);;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | (h1::t1,rh::rt) ->
          (t1, ((((h1 + x) + rh) / 10) :: (((h1 + x) + rh) mod 10) :: rt)) in
    let base = ((List.rev l1), [0]) in
    let args = List.rev l2 in let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l =
  match i mod 2 with
  | 0 ->
      (match i with
       | 0 -> []
       | 2 -> bigAdd l l
       | _ -> bigAdd (mulByDigit (i / 2) l) (mulByDigit (i / 2) l))
  | _ -> if i = 1 then l else bigAdd l (mulByDigit (i - 1) l);;

let bigMul l1 l2 =
  let f a x =
    match a with
    | (h1::t1,rh::rt) -> (t1, (bigAdd (mulByDigit h1 (rh :: rt)) rt)) in
  let base = ((List.rev l1), [0]) in
  let args = List.rev l2 in let (_,res) = List.fold_left f base args in res;;

*)

(* changed spans
(43,34)-(43,44)
(43,34)-(43,57)
(43,34)-(43,64)
(43,48)-(43,50)
*)

(* type error slice
(2,4)-(3,70)
(2,15)-(3,68)
(2,17)-(3,68)
(3,3)-(3,68)
(3,3)-(3,68)
(3,3)-(3,68)
(3,3)-(3,68)
(3,9)-(3,10)
(3,9)-(3,14)
(3,9)-(3,14)
(3,9)-(3,14)
(3,13)-(3,14)
(3,31)-(3,32)
(3,31)-(3,51)
(3,37)-(3,42)
(3,37)-(3,51)
(3,37)-(3,51)
(3,37)-(3,51)
(3,43)-(3,44)
(3,46)-(3,47)
(3,46)-(3,51)
(3,50)-(3,51)
(3,66)-(3,68)
(5,4)-(14,64)
(5,13)-(14,61)
(5,16)-(14,61)
(6,3)-(14,61)
(6,3)-(14,61)
(6,17)-(6,28)
(6,17)-(6,31)
(6,17)-(6,31)
(6,29)-(6,31)
(7,3)-(14,61)
(7,3)-(14,61)
(7,17)-(7,28)
(7,17)-(7,31)
(7,17)-(7,31)
(7,29)-(7,31)
(8,3)-(14,61)
(8,3)-(14,61)
(8,3)-(14,61)
(8,9)-(8,16)
(8,9)-(8,27)
(8,9)-(8,27)
(8,20)-(8,27)
(10,7)-(11,60)
(10,7)-(11,60)
(10,15)-(10,22)
(10,15)-(10,32)
(10,25)-(10,32)
(11,7)-(11,60)
(11,7)-(11,60)
(11,20)-(11,25)
(11,20)-(11,29)
(11,20)-(11,29)
(11,26)-(11,27)
(11,28)-(11,29)
(11,34)-(11,36)
(11,34)-(11,60)
(11,39)-(11,50)
(11,39)-(11,60)
(11,39)-(11,60)
(11,39)-(11,60)
(11,51)-(11,57)
(11,58)-(11,60)
(13,7)-(14,61)
(13,7)-(14,61)
(13,15)-(13,22)
(13,15)-(13,32)
(13,25)-(13,32)
(14,7)-(14,61)
(14,7)-(14,61)
(14,20)-(14,25)
(14,20)-(14,29)
(14,26)-(14,27)
(14,28)-(14,29)
(14,35)-(14,46)
(14,35)-(14,56)
(14,35)-(14,56)
(14,35)-(14,56)
(14,35)-(14,61)
(14,47)-(14,53)
(14,54)-(14,56)
(14,59)-(14,61)
(16,4)-(19,63)
(16,20)-(19,60)
(17,3)-(19,60)
(17,3)-(19,60)
(17,3)-(19,60)
(17,3)-(19,60)
(17,3)-(19,60)
(17,3)-(19,60)
(17,3)-(19,60)
(17,9)-(17,10)
(18,11)-(18,13)
(19,14)-(19,60)
(19,14)-(19,60)
(19,14)-(19,60)
(19,14)-(19,60)
(19,14)-(19,60)
(19,20)-(19,21)
(19,34)-(19,44)
(19,34)-(19,46)
(19,34)-(19,46)
(19,45)-(19,46)
(19,54)-(19,55)
(19,54)-(19,60)
(19,59)-(19,60)
(21,4)-(29,37)
(21,12)-(29,33)
(21,15)-(29,33)
(22,3)-(29,33)
(22,3)-(29,33)
(22,12)-(28,78)
(23,5)-(28,78)
(23,5)-(28,78)
(23,11)-(26,73)
(23,13)-(26,73)
(24,7)-(26,73)
(24,7)-(26,73)
(24,7)-(26,73)
(24,7)-(26,73)
(24,7)-(26,73)
(24,7)-(26,73)
(24,13)-(24,14)
(26,12)-(26,14)
(26,12)-(26,73)
(26,20)-(26,22)
(26,20)-(26,26)
(26,20)-(26,26)
(26,20)-(26,26)
(26,20)-(26,32)
(26,20)-(26,32)
(26,20)-(26,38)
(26,20)-(26,73)
(26,25)-(26,26)
(26,30)-(26,32)
(26,36)-(26,38)
(26,46)-(26,48)
(26,46)-(26,52)
(26,46)-(26,58)
(26,46)-(26,66)
(26,46)-(26,73)
(26,51)-(26,52)
(26,56)-(26,58)
(26,64)-(26,66)
(26,71)-(26,73)
(27,5)-(28,78)
(27,5)-(28,78)
(27,18)-(27,26)
(27,18)-(27,29)
(27,18)-(27,29)
(27,18)-(27,35)
(27,27)-(27,29)
(27,32)-(27,35)
(27,32)-(27,35)
(27,33)-(27,34)
(28,5)-(28,78)
(28,5)-(28,78)
(28,16)-(28,24)
(28,16)-(28,27)
(28,16)-(28,27)
(28,25)-(28,27)
(28,31)-(28,78)
(28,31)-(28,78)
(28,45)-(28,59)
(28,45)-(28,71)
(28,45)-(28,71)
(28,45)-(28,71)
(28,45)-(28,71)
(28,60)-(28,61)
(28,62)-(28,66)
(28,67)-(28,71)
(28,75)-(28,78)
(29,3)-(29,13)
(29,3)-(29,33)
(29,3)-(29,33)
(29,15)-(29,18)
(29,15)-(29,33)
(29,15)-(29,33)
(29,20)-(29,27)
(29,20)-(29,33)
(29,20)-(29,33)
(29,20)-(29,33)
(29,28)-(29,30)
(29,31)-(29,33)
(31,4)-(38,64)
(31,20)-(38,61)
(31,22)-(38,61)
(32,3)-(38,61)
(32,3)-(38,61)
(32,3)-(38,61)
(32,9)-(32,10)
(32,9)-(32,16)
(32,9)-(32,16)
(32,15)-(32,16)
(34,8)-(37,66)
(34,8)-(37,66)
(34,8)-(37,66)
(34,8)-(37,66)
(34,8)-(37,66)
(34,8)-(37,66)
(34,14)-(34,15)
(35,15)-(35,17)
(36,15)-(36,21)
(36,15)-(36,25)
(36,15)-(36,25)
(36,15)-(36,25)
(36,22)-(36,23)
(36,24)-(36,25)
(37,15)-(37,21)
(37,15)-(37,66)
(37,15)-(37,66)
(37,23)-(37,33)
(37,23)-(37,43)
(37,23)-(37,43)
(37,23)-(37,43)
(37,35)-(37,36)
(37,35)-(37,40)
(37,39)-(37,40)
(37,42)-(37,43)
(37,46)-(37,56)
(37,46)-(37,66)
(37,58)-(37,59)
(37,58)-(37,63)
(37,62)-(37,63)
(37,65)-(37,66)
(38,10)-(38,61)
(38,10)-(38,61)
(38,13)-(38,14)
(38,13)-(38,18)
(38,13)-(38,18)
(38,17)-(38,18)
(38,24)-(38,25)
(38,31)-(38,37)
(38,31)-(38,61)
(38,38)-(38,39)
(38,41)-(38,51)
(38,41)-(38,61)
(38,53)-(38,54)
(38,53)-(38,58)
(38,57)-(38,58)
(38,60)-(38,61)
(40,4)-(45,78)
(40,12)-(45,76)
(40,15)-(45,76)
(41,3)-(45,76)
(41,9)-(43,64)
(41,11)-(43,64)
(42,5)-(43,64)
(42,5)-(43,64)
(42,5)-(43,64)
(42,5)-(43,64)
(42,5)-(43,64)
(42,5)-(43,64)
(42,11)-(42,12)
(43,27)-(43,29)
(43,27)-(43,64)
(43,34)-(43,44)
(43,34)-(43,50)
(43,34)-(43,50)
(43,34)-(43,50)
(43,34)-(43,57)
(43,34)-(43,64)
(43,45)-(43,47)
(43,48)-(43,50)
(43,55)-(43,57)
(43,62)-(43,64)
(44,3)-(45,76)
(44,16)-(44,24)
(44,16)-(44,27)
(44,16)-(44,27)
(44,16)-(44,33)
(44,25)-(44,27)
(44,30)-(44,33)
(44,30)-(44,33)
(44,31)-(44,32)
(45,3)-(45,76)
(45,14)-(45,22)
(45,14)-(45,25)
(45,14)-(45,25)
(45,23)-(45,25)
(45,43)-(45,57)
(45,43)-(45,69)
(45,43)-(45,69)
(45,43)-(45,69)
(45,43)-(45,69)
(45,58)-(45,59)
(45,60)-(45,64)
(45,65)-(45,69)
*)

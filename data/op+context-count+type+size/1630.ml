
let rec clone x n =
  match n > 0 with | true  -> x :: (clone x (n - 1)) | false  -> [];;

let padZero l1 l2 =
  let length1 = List.length l1 in
  let length2 = List.length l2 in
  match length1 >= length2 with
  | true  ->
      let n = length1 - length2 in
      let zeroes = clone 0 n in (l1, (List.append zeroes l2))
  | false  ->
      let n = length2 - length1 in
      let zeroes = clone 0 n in ((List.append zeroes l1), l2);;

let rec removeZero l =
  match l with
  | [] -> []
  | h::t -> (match h with | 0 -> removeZero t | _ -> t);;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | (h1::t1,[]) ->
          if (h1 + x) > 9
          then (t1, [(h1 + x) / 10; (h1 + x) mod 10])
          else [(h1 + x) mod 10]
      | (h1::t1,rh::rt) ->
          if ((h1 + x) + rh) > 9
          then
            (t1, ((((h1 + x) + rh) / 10) :: (((h1 + x) + rh) mod 10) :: rt))
          else (((h1 + x) + rh) mod 10) :: rt in
    let base = (l1, []) in
    let args = l2 in let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n =
  match n > 0 with | true  -> x :: (clone x (n - 1)) | false  -> [];;

let padZero l1 l2 =
  let length1 = List.length l1 in
  let length2 = List.length l2 in
  match length1 >= length2 with
  | true  ->
      let n = length1 - length2 in
      let zeroes = clone 0 n in (l1, (List.append zeroes l2))
  | false  ->
      let n = length2 - length1 in
      let zeroes = clone 0 n in ((List.append zeroes l1), l2);;

let rec removeZero l =
  match l with
  | [] -> []
  | h::t -> (match h with | 0 -> removeZero t | _ -> t);;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | (h1::t1,[]) ->
          if (h1 + x) > 9
          then (t1, [(h1 + x) / 10; (h1 + x) mod 10])
          else (t1, [(h1 + x) mod 10])
      | (h1::t1,rh::rt) ->
          if ((h1 + x) + rh) > 9
          then
            (t1, ((((h1 + x) + rh) / 10) :: (((h1 + x) + rh) mod 10) :: rt))
          else (t1, ((((h1 + x) + rh) mod 10) :: rt)) in
    let base = (l1, []) in
    let args = l2 in let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(28,16)-(28,33)
(33,19)-(33,46)
(36,20)-(36,27)
(36,28)-(36,30)
(36,31)-(36,33)
*)

(* type error slice
(2,4)-(3,70)
(2,15)-(3,68)
(2,17)-(3,68)
(3,3)-(3,68)
(3,3)-(3,68)
(3,3)-(3,68)
(3,3)-(3,68)
(3,9)-(3,10)
(3,9)-(3,14)
(3,9)-(3,14)
(3,9)-(3,14)
(3,13)-(3,14)
(3,31)-(3,32)
(3,31)-(3,51)
(3,37)-(3,42)
(3,37)-(3,51)
(3,37)-(3,51)
(3,37)-(3,51)
(3,43)-(3,44)
(3,46)-(3,47)
(3,46)-(3,51)
(3,50)-(3,51)
(3,66)-(3,68)
(5,4)-(14,64)
(5,13)-(14,61)
(5,16)-(14,61)
(6,17)-(6,28)
(6,17)-(6,31)
(6,17)-(6,31)
(6,29)-(6,31)
(7,17)-(7,28)
(7,17)-(7,31)
(7,17)-(7,31)
(7,29)-(7,31)
(10,7)-(11,60)
(11,7)-(11,60)
(11,20)-(11,25)
(11,20)-(11,29)
(11,34)-(11,36)
(11,34)-(11,60)
(11,39)-(11,50)
(11,39)-(11,60)
(11,58)-(11,60)
(14,35)-(14,46)
(14,35)-(14,56)
(14,54)-(14,56)
(16,20)-(19,55)
(17,3)-(19,55)
(17,3)-(19,55)
(17,3)-(19,55)
(17,3)-(19,55)
(17,3)-(19,55)
(17,9)-(17,10)
(18,11)-(18,13)
(19,14)-(19,55)
(19,20)-(19,21)
(19,34)-(19,44)
(19,34)-(19,46)
(19,34)-(19,46)
(19,45)-(19,46)
(19,54)-(19,55)
(21,4)-(36,37)
(21,12)-(36,33)
(21,15)-(36,33)
(22,3)-(36,33)
(22,12)-(35,69)
(23,5)-(35,69)
(23,11)-(33,46)
(23,13)-(33,46)
(24,7)-(33,46)
(24,7)-(33,46)
(24,7)-(33,46)
(24,7)-(33,46)
(24,7)-(33,46)
(24,7)-(33,46)
(24,7)-(33,46)
(24,7)-(33,46)
(24,13)-(24,14)
(26,11)-(28,33)
(26,11)-(28,33)
(26,15)-(26,17)
(26,15)-(26,21)
(26,15)-(26,21)
(26,15)-(26,21)
(26,15)-(26,26)
(26,15)-(26,26)
(26,20)-(26,21)
(26,25)-(26,26)
(27,17)-(27,19)
(27,17)-(27,53)
(27,21)-(27,53)
(27,21)-(27,53)
(27,23)-(27,25)
(27,23)-(27,29)
(27,23)-(27,35)
(27,28)-(27,29)
(27,33)-(27,35)
(27,38)-(27,40)
(27,38)-(27,44)
(27,38)-(27,52)
(27,43)-(27,44)
(27,50)-(27,52)
(28,16)-(28,33)
(28,16)-(28,33)
(28,18)-(28,20)
(28,18)-(28,24)
(28,18)-(28,32)
(28,23)-(28,24)
(28,30)-(28,32)
(30,11)-(33,46)
(30,11)-(33,46)
(30,16)-(30,18)
(30,16)-(30,22)
(30,16)-(30,22)
(30,16)-(30,28)
(30,16)-(30,28)
(30,16)-(30,33)
(30,16)-(30,33)
(30,21)-(30,22)
(30,26)-(30,28)
(30,32)-(30,33)
(32,14)-(32,16)
(32,14)-(32,75)
(32,22)-(32,24)
(32,22)-(32,28)
(32,22)-(32,34)
(32,22)-(32,40)
(32,22)-(32,75)
(32,27)-(32,28)
(32,32)-(32,34)
(32,38)-(32,40)
(32,48)-(32,50)
(32,48)-(32,54)
(32,48)-(32,60)
(32,48)-(32,68)
(32,48)-(32,75)
(32,53)-(32,54)
(32,58)-(32,60)
(32,66)-(32,68)
(32,73)-(32,75)
(33,19)-(33,21)
(33,19)-(33,25)
(33,19)-(33,31)
(33,19)-(33,39)
(33,19)-(33,46)
(33,24)-(33,25)
(33,29)-(33,31)
(33,37)-(33,39)
(33,44)-(33,46)
(34,5)-(35,69)
(34,17)-(34,19)
(34,17)-(34,23)
(34,21)-(34,23)
(35,5)-(35,69)
(35,16)-(35,18)
(35,36)-(35,50)
(35,36)-(35,62)
(35,36)-(35,62)
(35,36)-(35,62)
(35,51)-(35,52)
(35,53)-(35,57)
(35,58)-(35,62)
(36,15)-(36,18)
(36,15)-(36,33)
(36,15)-(36,33)
(36,20)-(36,27)
(36,20)-(36,33)
(36,20)-(36,33)
(36,28)-(36,30)
(36,31)-(36,33)
*)


let rec clone x n =
  let rec helper a b acc = if b > 0 then helper a (b - 1) (a :: acc) else acc in
  helper x n [];;

let padZero l1 l2 =
  let l1_len = List.length l1 in
  let l2_len = List.length l2 in
  let l_diff = l1_len - l2_len in
  if l_diff < 0
  then (((clone 0 (l_diff * (-1))) @ l1), l2)
  else (l1, ((clone 0 l_diff) @ l2));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = (x + x) :: a in
    let base = [] in
    let args = List.combine l1 l2 in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n =
  let rec helper a b acc = if b > 0 then helper a (b - 1) (a :: acc) else acc in
  helper x n [];;

let padZero l1 l2 =
  let l1_len = List.length l1 in
  let l2_len = List.length l2 in
  let l_diff = l1_len - l2_len in
  if l_diff < 0
  then (((clone 0 (l_diff * (-1))) @ l1), l2)
  else (l1, ((clone 0 l_diff) @ l2));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = ([x + 1], [x + 1]) in
    let base = ([], []) in
    let args = l1 in let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(19,18)-(19,23)
(19,18)-(19,29)
(19,22)-(19,23)
(19,28)-(19,29)
(20,16)-(20,18)
(21,5)-(22,52)
(21,16)-(21,28)
(21,16)-(21,34)
(21,32)-(21,34)
*)

(* type error slice
(2,4)-(4,18)
(2,15)-(4,16)
(2,17)-(4,16)
(3,3)-(4,16)
(3,3)-(4,16)
(3,18)-(3,78)
(3,20)-(3,78)
(3,22)-(3,78)
(3,28)-(3,78)
(3,28)-(3,78)
(3,31)-(3,32)
(3,31)-(3,36)
(3,31)-(3,36)
(3,31)-(3,36)
(3,35)-(3,36)
(3,42)-(3,48)
(3,42)-(3,68)
(3,42)-(3,68)
(3,42)-(3,68)
(3,42)-(3,68)
(3,49)-(3,50)
(3,52)-(3,53)
(3,52)-(3,57)
(3,56)-(3,57)
(3,60)-(3,61)
(3,60)-(3,68)
(3,65)-(3,68)
(3,75)-(3,78)
(4,3)-(4,9)
(4,3)-(4,16)
(4,3)-(4,16)
(4,3)-(4,16)
(4,10)-(4,11)
(4,12)-(4,13)
(4,14)-(4,16)
(6,4)-(12,39)
(6,13)-(12,35)
(6,16)-(12,35)
(7,3)-(12,35)
(7,3)-(12,35)
(7,16)-(7,27)
(7,16)-(7,30)
(7,16)-(7,30)
(7,28)-(7,30)
(8,3)-(12,35)
(8,3)-(12,35)
(8,16)-(8,27)
(8,16)-(8,30)
(8,16)-(8,30)
(8,28)-(8,30)
(9,3)-(12,35)
(9,3)-(12,35)
(9,16)-(9,22)
(9,16)-(9,31)
(9,25)-(9,31)
(10,3)-(12,35)
(10,3)-(12,35)
(10,6)-(10,12)
(10,6)-(10,16)
(10,6)-(10,16)
(10,15)-(10,16)
(11,11)-(11,16)
(11,11)-(11,32)
(11,11)-(11,32)
(11,11)-(11,32)
(11,11)-(11,40)
(11,11)-(11,40)
(11,11)-(11,40)
(11,11)-(11,45)
(11,17)-(11,18)
(11,20)-(11,26)
(11,20)-(11,32)
(11,30)-(11,32)
(11,36)-(11,37)
(11,38)-(11,40)
(11,43)-(11,45)
(12,9)-(12,11)
(12,9)-(12,35)
(12,15)-(12,20)
(12,15)-(12,29)
(12,15)-(12,35)
(12,15)-(12,35)
(12,15)-(12,35)
(12,21)-(12,22)
(12,23)-(12,29)
(12,31)-(12,32)
(12,33)-(12,35)
(14,20)-(15,75)
(15,3)-(15,75)
(15,3)-(15,75)
(15,3)-(15,75)
(15,3)-(15,75)
(15,3)-(15,75)
(15,9)-(15,10)
(15,24)-(15,26)
(15,37)-(15,75)
(15,40)-(15,41)
(15,40)-(15,45)
(15,51)-(15,61)
(15,51)-(15,63)
(17,4)-(23,37)
(17,12)-(23,33)
(17,15)-(23,33)
(18,3)-(23,33)
(18,12)-(22,52)
(19,5)-(22,52)
(19,5)-(22,52)
(19,11)-(19,29)
(19,13)-(19,29)
(19,18)-(19,19)
(19,18)-(19,23)
(19,18)-(19,23)
(19,18)-(19,29)
(19,22)-(19,23)
(19,28)-(19,29)
(20,5)-(22,52)
(20,5)-(22,52)
(20,16)-(20,18)
(21,5)-(22,52)
(21,5)-(22,52)
(21,16)-(21,28)
(21,16)-(21,34)
(21,16)-(21,34)
(21,16)-(21,34)
(21,29)-(21,31)
(21,32)-(21,34)
(22,5)-(22,52)
(22,5)-(22,52)
(22,19)-(22,33)
(22,19)-(22,45)
(22,19)-(22,45)
(22,19)-(22,45)
(22,19)-(22,45)
(22,34)-(22,35)
(22,36)-(22,40)
(22,41)-(22,45)
(22,49)-(22,52)
(23,15)-(23,18)
(23,15)-(23,33)
(23,15)-(23,33)
(23,20)-(23,27)
(23,20)-(23,33)
(23,20)-(23,33)
(23,20)-(23,33)
(23,28)-(23,30)
(23,31)-(23,33)
*)

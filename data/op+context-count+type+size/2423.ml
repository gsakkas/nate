
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Squared of expr
  | Flatten of expr* expr* expr;;

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Squared of expr
  | Negative of expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildFlatten (e1,e2,e3) = Flatten (e1, e2, e3);;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth = 0
  then let r = rand (0, 2) in match r with | 0 -> buildX () | 1 -> buildY ()
  else
    (let r = rand (2, 14) in
     match r with
     | 2 -> buildSine (build (rand, (depth - 1)))
     | 3 -> buildCosine (build (rand, (depth - 1)))
     | 4 ->
         buildAverage
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 5 ->
         buildTimes
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 6 ->
         buildThresh
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
             (build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 7 -> buildSine (build (rand, (depth - 1)))
     | 8 -> buildCosine (build (rand, (depth - 1)))
     | 9 -> buildSine (build (rand, (depth - 1)))
     | 10 -> buildCosine (build (rand, (depth - 1)))
     | 11 -> buildSine (build (rand, (depth - 1)))
     | 12 -> buildCosine (build (rand, (depth - 1)))
     | 13 ->
         buildFlatten
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
             (build (rand, (depth - 1)))));;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Squared of expr
  | Negative of expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth = 0
  then let r = rand (0, 2) in match r with | 0 -> buildX () | 1 -> buildY ()
  else
    (let r = rand (2, 13) in
     match r with
     | 2 -> buildSine (build (rand, (depth - 1)))
     | 3 -> buildCosine (build (rand, (depth - 1)))
     | 4 ->
         buildAverage
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 5 ->
         buildTimes
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 6 ->
         buildThresh
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
             (build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 7 -> buildSine (build (rand, (depth - 1)))
     | 8 -> buildCosine (build (rand, (depth - 1)))
     | 9 -> buildSine (build (rand, (depth - 1)))
     | 10 -> buildCosine (build (rand, (depth - 1)))
     | 11 -> buildSine (build (rand, (depth - 1)))
     | 12 -> buildCosine (build (rand, (depth - 1))));;

*)

(* changed spans
(28,19)-(28,50)
(28,31)-(28,50)
(28,40)-(28,42)
(28,44)-(28,46)
(28,48)-(28,50)
(44,23)-(44,25)
(45,6)-(67,38)
(45,12)-(45,13)
(50,14)-(50,37)
(50,43)-(50,66)
(53,14)-(53,37)
(53,43)-(53,66)
(65,10)-(67,38)
*)

(* type error slice
(24,4)-(24,46)
(24,19)-(24,43)
(24,28)-(24,43)
(24,37)-(24,39)
(24,41)-(24,43)
(26,4)-(26,31)
(26,17)-(26,29)
(26,21)-(26,29)
(26,28)-(26,29)
(28,4)-(28,53)
(28,19)-(28,50)
(28,31)-(28,50)
(28,40)-(28,42)
(28,44)-(28,46)
(28,48)-(28,50)
(30,4)-(30,27)
(30,15)-(30,25)
(30,19)-(30,25)
(30,24)-(30,25)
(32,4)-(32,70)
(32,18)-(32,67)
(32,39)-(32,67)
(32,47)-(32,48)
(32,50)-(32,51)
(32,53)-(32,59)
(32,61)-(32,67)
(34,4)-(34,42)
(34,17)-(34,39)
(34,26)-(34,39)
(34,33)-(34,35)
(34,37)-(34,39)
(36,4)-(36,23)
(36,12)-(36,21)
(36,12)-(36,21)
(36,17)-(36,21)
(38,4)-(38,23)
(38,12)-(38,21)
(38,12)-(38,21)
(38,17)-(38,21)
(40,16)-(67,38)
(41,3)-(67,38)
(41,3)-(67,38)
(41,6)-(41,11)
(41,6)-(41,15)
(41,6)-(41,15)
(41,6)-(41,15)
(41,14)-(41,15)
(42,8)-(42,77)
(42,8)-(42,77)
(42,16)-(42,20)
(42,16)-(42,26)
(42,16)-(42,26)
(42,22)-(42,23)
(42,22)-(42,26)
(42,25)-(42,26)
(42,31)-(42,77)
(42,31)-(42,77)
(42,31)-(42,77)
(42,31)-(42,77)
(42,31)-(42,77)
(42,37)-(42,38)
(42,51)-(42,57)
(42,51)-(42,60)
(42,58)-(42,60)
(42,68)-(42,74)
(42,68)-(42,77)
(42,75)-(42,77)
(44,6)-(67,38)
(44,6)-(67,38)
(44,14)-(44,18)
(44,14)-(44,25)
(44,20)-(44,21)
(44,20)-(44,25)
(44,23)-(44,25)
(45,6)-(67,38)
(45,6)-(67,38)
(45,6)-(67,38)
(45,6)-(67,38)
(45,6)-(67,38)
(45,6)-(67,38)
(45,6)-(67,38)
(45,6)-(67,38)
(45,6)-(67,38)
(45,6)-(67,38)
(45,6)-(67,38)
(45,6)-(67,38)
(45,6)-(67,38)
(45,6)-(67,38)
(45,6)-(67,38)
(45,6)-(67,38)
(45,6)-(67,38)
(45,6)-(67,38)
(45,6)-(67,38)
(45,6)-(67,38)
(45,6)-(67,38)
(45,6)-(67,38)
(45,6)-(67,38)
(45,6)-(67,38)
(45,12)-(45,13)
(46,13)-(46,22)
(46,13)-(46,47)
(46,13)-(46,47)
(46,24)-(46,29)
(46,24)-(46,47)
(46,24)-(46,47)
(46,31)-(46,35)
(46,31)-(46,47)
(46,38)-(46,43)
(46,38)-(46,47)
(46,46)-(46,47)
(47,13)-(47,24)
(47,13)-(47,49)
(47,26)-(47,31)
(47,26)-(47,49)
(47,33)-(47,37)
(47,33)-(47,49)
(47,40)-(47,45)
(47,40)-(47,49)
(47,48)-(47,49)
(49,10)-(49,22)
(49,10)-(50,66)
(50,14)-(50,19)
(50,14)-(50,37)
(50,14)-(50,66)
(50,21)-(50,25)
(50,21)-(50,37)
(50,28)-(50,33)
(50,28)-(50,37)
(50,36)-(50,37)
(50,43)-(50,48)
(50,43)-(50,66)
(50,50)-(50,54)
(50,50)-(50,66)
(50,57)-(50,62)
(50,57)-(50,66)
(50,65)-(50,66)
(52,10)-(52,20)
(52,10)-(53,66)
(53,14)-(53,19)
(53,14)-(53,37)
(53,14)-(53,66)
(53,21)-(53,25)
(53,21)-(53,37)
(53,28)-(53,33)
(53,28)-(53,37)
(53,36)-(53,37)
(53,43)-(53,48)
(53,43)-(53,66)
(53,50)-(53,54)
(53,50)-(53,66)
(53,57)-(53,62)
(53,57)-(53,66)
(53,65)-(53,66)
(55,10)-(55,21)
(55,10)-(57,67)
(56,14)-(56,19)
(56,14)-(56,37)
(56,14)-(57,67)
(56,21)-(56,25)
(56,21)-(56,37)
(56,28)-(56,33)
(56,28)-(56,37)
(56,36)-(56,37)
(56,43)-(56,48)
(56,43)-(56,66)
(56,50)-(56,54)
(56,50)-(56,66)
(56,57)-(56,62)
(56,57)-(56,66)
(56,65)-(56,66)
(57,15)-(57,20)
(57,15)-(57,38)
(57,22)-(57,26)
(57,22)-(57,38)
(57,29)-(57,34)
(57,29)-(57,38)
(57,37)-(57,38)
(57,44)-(57,49)
(57,44)-(57,67)
(57,51)-(57,55)
(57,51)-(57,67)
(57,58)-(57,63)
(57,58)-(57,67)
(57,66)-(57,67)
(58,13)-(58,22)
(58,13)-(58,47)
(58,24)-(58,29)
(58,24)-(58,47)
(58,31)-(58,35)
(58,31)-(58,47)
(58,38)-(58,43)
(58,38)-(58,47)
(58,46)-(58,47)
(59,13)-(59,24)
(59,13)-(59,49)
(59,26)-(59,31)
(59,26)-(59,49)
(59,33)-(59,37)
(59,33)-(59,49)
(59,40)-(59,45)
(59,40)-(59,49)
(59,48)-(59,49)
(60,13)-(60,22)
(60,13)-(60,47)
(60,24)-(60,29)
(60,24)-(60,47)
(60,31)-(60,35)
(60,31)-(60,47)
(60,38)-(60,43)
(60,38)-(60,47)
(60,46)-(60,47)
(61,14)-(61,25)
(61,14)-(61,50)
(61,27)-(61,32)
(61,27)-(61,50)
(61,34)-(61,38)
(61,34)-(61,50)
(61,41)-(61,46)
(61,41)-(61,50)
(61,49)-(61,50)
(62,14)-(62,23)
(62,14)-(62,48)
(62,25)-(62,30)
(62,25)-(62,48)
(62,32)-(62,36)
(62,32)-(62,48)
(62,39)-(62,44)
(62,39)-(62,48)
(62,47)-(62,48)
(63,14)-(63,25)
(63,14)-(63,50)
(63,27)-(63,32)
(63,27)-(63,50)
(63,34)-(63,38)
(63,34)-(63,50)
(63,41)-(63,46)
(63,41)-(63,50)
(63,49)-(63,50)
(65,10)-(65,22)
(65,10)-(67,38)
(66,14)-(66,19)
(66,14)-(66,37)
(66,14)-(67,38)
(66,21)-(66,25)
(66,21)-(66,37)
(66,28)-(66,33)
(66,28)-(66,37)
(66,36)-(66,37)
(66,43)-(66,48)
(66,43)-(66,66)
(66,50)-(66,54)
(66,50)-(66,66)
(66,57)-(66,62)
(66,57)-(66,66)
(66,65)-(66,66)
(67,15)-(67,20)
(67,15)-(67,38)
(67,22)-(67,26)
(67,22)-(67,38)
(67,29)-(67,34)
(67,29)-(67,38)
(67,37)-(67,38)
*)

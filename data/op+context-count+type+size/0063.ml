
let rec mulByDigit i l =
  match List.rev l with
  | [] -> []
  | h::t ->
      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @
               [h * i]
       with
       | [] -> []
       | h1::t1 -> let rec helper acc v = v = 0 in helper [] h1);;


(* fix

let rec mulByDigit i l =
  match List.rev l with
  | [] -> []
  | h::t ->
      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @
               [h * i]
       with
       | [] -> []
       | h1::t1 ->
           let rec helper acc v = if v = 0 then [1] else [0] in helper [] h1);;

*)

(* changed spans
(10,43)-(10,48)
(10,52)-(10,58)
(10,52)-(10,64)
(10,59)-(10,61)
(10,62)-(10,64)
*)

(* type error slice
(2,4)-(10,67)
(2,20)-(10,64)
(2,22)-(10,64)
(3,3)-(10,64)
(3,3)-(10,64)
(3,3)-(10,64)
(3,3)-(10,64)
(3,3)-(10,64)
(3,3)-(10,64)
(3,9)-(3,17)
(3,9)-(3,19)
(3,9)-(3,19)
(3,18)-(3,19)
(4,11)-(4,13)
(6,8)-(10,64)
(6,8)-(10,64)
(6,8)-(10,64)
(6,8)-(10,64)
(6,8)-(10,64)
(6,15)-(6,25)
(6,15)-(6,68)
(6,15)-(6,68)
(6,15)-(6,68)
(6,15)-(7,23)
(6,15)-(7,23)
(6,26)-(6,27)
(6,29)-(6,37)
(6,29)-(6,68)
(6,29)-(6,68)
(6,39)-(6,47)
(6,39)-(6,68)
(6,39)-(6,68)
(6,49)-(6,65)
(6,59)-(6,60)
(6,67)-(6,68)
(6,72)-(6,73)
(7,21)-(7,22)
(9,16)-(9,18)
(10,20)-(10,64)
(10,20)-(10,64)
(10,35)-(10,48)
(10,39)-(10,48)
(10,43)-(10,44)
(10,43)-(10,48)
(10,52)-(10,58)
(10,52)-(10,64)
(10,52)-(10,64)
(10,52)-(10,64)
(10,59)-(10,61)
(10,62)-(10,64)
*)


type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  let rec buildhelper num depth expr =
    match num with
    | 0 -> if (rand (0, 1)) = 0 then buildX () else buildY ()
    | 1 ->
        if (rand (0, 1)) = 0
        then buildSine (buildhelper 0 (depth - 1))
        else buildCosine (buildhelper 0 (depth - 1))
    | 2 ->
        if (rand (0, 1)) = 0
        then
          buildAverage
            ((buildhelper (num - 1) (depth - 1) expr),
              (buildhelper (num - 1) (depth - 1) expr))
        else
          buildTimes
            ((buildhelper (num - 1) (depth - 1) expr),
              (buildhelper (num - 1) (depth - 1) expr))
    | 3 -> buildhelper (num - 1) depth expr
    | 4 ->
        buildThresh
          ((buildhelper (num - 2) (depth - 1) expr),
            (buildhelper (num - 2) (depth - 1) expr),
            (buildhelper (num - 2) (depth - 1) expr),
            (buildhelper (num - 2) (depth - 1) expr)) in
  buildhelper rand (1, 4) depth "";;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  let rec buildhelper num depth expr =
    match num with
    | 0 -> if (rand (0, 1)) = 0 then buildX () else buildY ()
    | 1 ->
        if (rand (0, 1)) = 0
        then buildSine (buildhelper 0 0 expr)
        else buildCosine (buildhelper 0 0 expr)
    | 2 ->
        if (rand (0, 1)) = 0
        then
          buildAverage
            ((buildhelper (depth - 1) (depth - 1) expr),
              (buildhelper (depth - 1) (depth - 1) expr))
        else
          buildTimes
            ((buildhelper (depth - 1) (depth - 1) expr),
              (buildhelper (depth - 1) (depth - 1) expr))
    | 3 ->
        if (rand (0, 1)) = 0
        then
          buildAverage
            ((buildhelper (depth - 1) (depth - 1) expr),
              (buildhelper (depth - 1) (depth - 1) expr))
        else
          buildTimes
            ((buildhelper (depth - 1) (depth - 1) expr),
              (buildhelper (depth - 1) (depth - 1) expr))
    | 4 ->
        buildThresh
          ((buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr))
    | _ ->
        buildThresh
          ((buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr)) in
  buildhelper (rand (1, 4)) depth "";;

*)

(* changed spans
(27,5)-(49,52)
(31,25)-(31,49)
(31,40)-(31,45)
(31,40)-(31,49)
(31,48)-(31,49)
(32,14)-(32,51)
(32,27)-(32,51)
(32,42)-(32,47)
(32,42)-(32,51)
(32,50)-(32,51)
(34,9)-(42,54)
(37,28)-(37,31)
(38,29)-(38,32)
(41,28)-(41,31)
(42,29)-(42,32)
(43,12)-(43,44)
(43,25)-(43,28)
(43,34)-(43,39)
(43,40)-(43,44)
(45,9)-(45,20)
(45,9)-(49,52)
(46,13)-(49,52)
(46,26)-(46,29)
(46,32)-(46,33)
(46,36)-(46,45)
(47,14)-(47,52)
(47,27)-(47,30)
(47,33)-(47,34)
(47,37)-(47,46)
(48,27)-(48,30)
(48,33)-(48,34)
(48,37)-(48,46)
(49,14)-(49,52)
(49,27)-(49,30)
(49,33)-(49,34)
(49,37)-(49,46)
(49,48)-(49,52)
(50,3)-(50,14)
(50,3)-(50,35)
(50,15)-(50,19)
(50,21)-(50,22)
(50,21)-(50,25)
(50,24)-(50,25)
(50,27)-(50,32)
(50,33)-(50,35)
*)

(* type error slice
(11,4)-(11,46)
(11,19)-(11,43)
(11,28)-(11,43)
(11,37)-(11,39)
(11,41)-(11,43)
(13,4)-(13,31)
(13,17)-(13,29)
(13,21)-(13,29)
(13,28)-(13,29)
(15,4)-(15,27)
(15,15)-(15,25)
(15,19)-(15,25)
(15,24)-(15,25)
(17,4)-(17,70)
(17,18)-(17,67)
(17,39)-(17,67)
(17,47)-(17,48)
(17,50)-(17,51)
(17,53)-(17,59)
(17,61)-(17,67)
(19,4)-(19,42)
(19,17)-(19,39)
(19,26)-(19,39)
(19,33)-(19,35)
(19,37)-(19,39)
(21,4)-(21,23)
(21,12)-(21,21)
(21,12)-(21,21)
(21,17)-(21,21)
(23,4)-(23,23)
(23,12)-(23,21)
(23,12)-(23,21)
(23,17)-(23,21)
(25,4)-(50,37)
(25,16)-(50,35)
(26,3)-(50,35)
(26,3)-(50,35)
(26,23)-(49,52)
(26,27)-(49,52)
(26,33)-(49,52)
(27,5)-(49,52)
(27,5)-(49,52)
(27,5)-(49,52)
(27,5)-(49,52)
(27,5)-(49,52)
(27,5)-(49,52)
(27,5)-(49,52)
(27,5)-(49,52)
(27,5)-(49,52)
(27,5)-(49,52)
(27,11)-(27,14)
(28,12)-(28,62)
(28,12)-(28,62)
(28,16)-(28,20)
(28,16)-(28,26)
(28,16)-(28,26)
(28,16)-(28,32)
(28,16)-(28,32)
(28,16)-(28,32)
(28,22)-(28,23)
(28,22)-(28,26)
(28,25)-(28,26)
(28,31)-(28,32)
(28,38)-(28,44)
(28,38)-(28,47)
(28,45)-(28,47)
(28,53)-(28,59)
(28,53)-(28,62)
(28,60)-(28,62)
(30,9)-(32,51)
(30,9)-(32,51)
(30,13)-(30,17)
(30,13)-(30,23)
(30,13)-(30,29)
(30,13)-(30,29)
(30,19)-(30,20)
(30,19)-(30,23)
(30,22)-(30,23)
(30,28)-(30,29)
(31,14)-(31,23)
(31,14)-(31,49)
(31,14)-(31,49)
(31,25)-(31,36)
(31,25)-(31,49)
(31,25)-(31,49)
(31,25)-(31,49)
(31,37)-(31,38)
(31,40)-(31,45)
(31,40)-(31,49)
(31,40)-(31,49)
(31,48)-(31,49)
(32,14)-(32,25)
(32,14)-(32,51)
(32,27)-(32,38)
(32,27)-(32,51)
(32,39)-(32,40)
(32,42)-(32,47)
(32,42)-(32,51)
(32,50)-(32,51)
(34,9)-(42,54)
(34,9)-(42,54)
(34,13)-(34,17)
(34,13)-(34,23)
(34,13)-(34,29)
(34,13)-(34,29)
(34,19)-(34,20)
(34,19)-(34,23)
(34,22)-(34,23)
(34,28)-(34,29)
(36,11)-(36,23)
(36,11)-(38,54)
(36,11)-(38,54)
(37,15)-(37,26)
(37,15)-(37,53)
(37,15)-(37,53)
(37,15)-(38,54)
(37,28)-(37,31)
(37,28)-(37,35)
(37,28)-(37,35)
(37,34)-(37,35)
(37,38)-(37,43)
(37,38)-(37,47)
(37,46)-(37,47)
(37,49)-(37,53)
(38,16)-(38,27)
(38,16)-(38,54)
(38,16)-(38,54)
(38,29)-(38,32)
(38,29)-(38,36)
(38,35)-(38,36)
(38,39)-(38,44)
(38,39)-(38,48)
(38,47)-(38,48)
(38,50)-(38,54)
(40,11)-(40,21)
(40,11)-(42,54)
(40,11)-(42,54)
(41,15)-(41,26)
(41,15)-(41,53)
(41,15)-(41,53)
(41,15)-(42,54)
(41,28)-(41,31)
(41,28)-(41,35)
(41,34)-(41,35)
(41,38)-(41,43)
(41,38)-(41,47)
(41,46)-(41,47)
(41,49)-(41,53)
(42,16)-(42,27)
(42,16)-(42,54)
(42,16)-(42,54)
(42,29)-(42,32)
(42,29)-(42,36)
(42,35)-(42,36)
(42,39)-(42,44)
(42,39)-(42,48)
(42,47)-(42,48)
(42,50)-(42,54)
(43,12)-(43,23)
(43,12)-(43,44)
(43,12)-(43,44)
(43,25)-(43,28)
(43,25)-(43,32)
(43,31)-(43,32)
(43,34)-(43,39)
(43,40)-(43,44)
(45,9)-(45,20)
(45,9)-(49,52)
(45,9)-(49,52)
(46,13)-(46,24)
(46,13)-(46,51)
(46,13)-(46,51)
(46,13)-(49,52)
(46,26)-(46,29)
(46,26)-(46,33)
(46,32)-(46,33)
(46,36)-(46,41)
(46,36)-(46,45)
(46,44)-(46,45)
(46,47)-(46,51)
(47,14)-(47,25)
(47,14)-(47,52)
(47,14)-(47,52)
(47,27)-(47,30)
(47,27)-(47,34)
(47,33)-(47,34)
(47,37)-(47,42)
(47,37)-(47,46)
(47,45)-(47,46)
(47,48)-(47,52)
(48,14)-(48,25)
(48,14)-(48,52)
(48,14)-(48,52)
(48,27)-(48,30)
(48,27)-(48,34)
(48,33)-(48,34)
(48,37)-(48,42)
(48,37)-(48,46)
(48,45)-(48,46)
(48,48)-(48,52)
(49,14)-(49,25)
(49,14)-(49,52)
(49,14)-(49,52)
(49,27)-(49,30)
(49,27)-(49,34)
(49,33)-(49,34)
(49,37)-(49,42)
(49,37)-(49,46)
(49,45)-(49,46)
(49,48)-(49,52)
(50,3)-(50,14)
(50,3)-(50,35)
(50,3)-(50,35)
(50,3)-(50,35)
(50,3)-(50,35)
(50,15)-(50,19)
(50,21)-(50,22)
(50,21)-(50,25)
(50,24)-(50,25)
(50,27)-(50,32)
(50,33)-(50,35)
*)

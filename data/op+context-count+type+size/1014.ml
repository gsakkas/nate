
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let lenl1 = List.length l1 in
  let lenl2 = List.length l2 in
  if lenl1 > lenl2
  then (l1, ((clone 0 (lenl1 - lenl2)) @ l2))
  else (((clone 0 (lenl2 - lenl1)) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (rem,acc) = a in
      if
        (List.length acc) =
          ((List.length (List.combine (padZero l1 l2))) - 1)
      then (if rem = 1 then (0, ([1; 0] @ acc)) else (0, acc))
      else
        (let (el1,el2) = x in
         let new_sum = (rem + el1) + el2 in
         let new_rem = if new_sum > 9 then 1 else 0 in
         let norm_sum = if new_sum > 9 then new_sum - 10 else new_sum in
         (new_rem, (norm_sum :: acc))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let lenl1 = List.length l1 in
  let lenl2 = List.length l2 in
  if lenl1 > lenl2
  then (l1, ((clone 0 (lenl1 - lenl2)) @ l2))
  else (((clone 0 (lenl2 - lenl1)) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (rem,acc) = a in
      let larger = if (List.length l1) > (List.length l2) then l1 else l2 in
      if (List.length acc) = (List.length larger)
      then (if rem = 1 then (0, ([1; 0] @ acc)) else (0, acc))
      else
        (let (el1,el2) = x in
         let new_sum = (rem + el1) + el2 in
         let new_rem = if new_sum > 9 then 1 else 0 in
         let norm_sum = if new_sum > 9 then new_sum - 10 else new_sum in
         (new_rem, (norm_sum :: acc))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(18,7)-(27,36)
(19,10)-(20,60)
(19,22)-(19,25)
(20,13)-(20,60)
(20,26)-(20,38)
(20,26)-(20,53)
(20,40)-(20,47)
(20,40)-(20,53)
(20,59)-(20,60)
(21,16)-(21,19)
(31,20)-(31,27)
(31,28)-(31,30)
(31,31)-(31,33)
*)

(* type error slice
(2,4)-(2,68)
(2,15)-(2,64)
(2,17)-(2,64)
(2,21)-(2,64)
(2,21)-(2,64)
(2,24)-(2,25)
(2,24)-(2,30)
(2,24)-(2,30)
(2,24)-(2,30)
(2,29)-(2,30)
(2,36)-(2,38)
(2,44)-(2,45)
(2,44)-(2,64)
(2,50)-(2,55)
(2,50)-(2,64)
(2,50)-(2,64)
(2,50)-(2,64)
(2,56)-(2,57)
(2,59)-(2,60)
(2,59)-(2,64)
(2,63)-(2,64)
(4,4)-(9,48)
(4,13)-(9,45)
(4,16)-(9,45)
(5,3)-(9,45)
(5,3)-(9,45)
(5,15)-(5,26)
(5,15)-(5,29)
(5,15)-(5,29)
(5,27)-(5,29)
(6,3)-(9,45)
(6,3)-(9,45)
(6,15)-(6,26)
(6,15)-(6,29)
(6,15)-(6,29)
(6,27)-(6,29)
(7,3)-(9,45)
(7,6)-(7,11)
(7,6)-(7,19)
(7,6)-(7,19)
(7,14)-(7,19)
(8,9)-(8,11)
(8,9)-(8,44)
(8,15)-(8,20)
(8,15)-(8,37)
(8,15)-(8,37)
(8,15)-(8,44)
(8,15)-(8,44)
(8,15)-(8,44)
(8,21)-(8,22)
(8,24)-(8,29)
(8,24)-(8,37)
(8,32)-(8,37)
(8,40)-(8,41)
(8,42)-(8,44)
(9,11)-(9,16)
(9,11)-(9,33)
(9,11)-(9,40)
(9,11)-(9,40)
(9,11)-(9,40)
(9,11)-(9,45)
(9,17)-(9,18)
(9,20)-(9,25)
(9,20)-(9,33)
(9,28)-(9,33)
(9,36)-(9,37)
(9,38)-(9,40)
(9,43)-(9,45)
(11,4)-(12,77)
(11,20)-(12,75)
(12,3)-(12,75)
(12,3)-(12,75)
(12,3)-(12,75)
(12,3)-(12,75)
(12,3)-(12,75)
(12,3)-(12,75)
(12,3)-(12,75)
(12,9)-(12,10)
(12,24)-(12,26)
(12,37)-(12,75)
(12,37)-(12,75)
(12,40)-(12,41)
(12,40)-(12,45)
(12,40)-(12,45)
(12,40)-(12,45)
(12,44)-(12,45)
(12,51)-(12,61)
(12,51)-(12,63)
(12,51)-(12,63)
(12,62)-(12,63)
(12,69)-(12,70)
(12,69)-(12,75)
(12,74)-(12,75)
(14,4)-(31,37)
(14,12)-(31,33)
(14,15)-(31,33)
(15,3)-(31,33)
(15,12)-(30,52)
(16,5)-(30,52)
(16,5)-(30,52)
(16,11)-(27,36)
(16,13)-(27,36)
(17,7)-(27,36)
(17,7)-(27,36)
(17,23)-(17,24)
(18,7)-(27,36)
(19,10)-(19,21)
(19,10)-(19,25)
(19,10)-(19,25)
(19,10)-(20,60)
(19,10)-(20,60)
(19,22)-(19,25)
(20,13)-(20,24)
(20,13)-(20,53)
(20,13)-(20,53)
(20,13)-(20,60)
(20,26)-(20,38)
(20,26)-(20,53)
(20,26)-(20,53)
(20,40)-(20,47)
(20,40)-(20,53)
(20,40)-(20,53)
(20,40)-(20,53)
(20,48)-(20,50)
(20,51)-(20,53)
(20,59)-(20,60)
(21,13)-(21,61)
(21,16)-(21,19)
(21,16)-(21,23)
(21,16)-(21,23)
(21,16)-(21,23)
(21,22)-(21,23)
(21,30)-(21,31)
(21,30)-(21,46)
(21,34)-(21,40)
(21,34)-(21,40)
(21,34)-(21,46)
(21,34)-(21,46)
(21,34)-(21,46)
(21,35)-(21,36)
(21,38)-(21,39)
(21,41)-(21,42)
(21,43)-(21,46)
(21,55)-(21,56)
(21,55)-(21,61)
(21,58)-(21,61)
(23,10)-(27,36)
(23,10)-(27,36)
(23,26)-(23,27)
(24,10)-(27,36)
(24,10)-(27,36)
(24,25)-(24,28)
(24,25)-(24,34)
(24,25)-(24,34)
(24,25)-(24,41)
(24,25)-(24,41)
(24,31)-(24,34)
(24,38)-(24,41)
(25,10)-(27,36)
(25,10)-(27,36)
(25,24)-(25,52)
(25,27)-(25,34)
(25,27)-(25,38)
(25,27)-(25,38)
(25,37)-(25,38)
(25,44)-(25,45)
(25,51)-(25,52)
(26,10)-(27,36)
(26,10)-(27,36)
(26,25)-(26,70)
(26,28)-(26,35)
(26,28)-(26,39)
(26,28)-(26,39)
(26,38)-(26,39)
(26,45)-(26,52)
(26,45)-(26,57)
(26,55)-(26,57)
(26,63)-(26,70)
(27,11)-(27,18)
(27,11)-(27,36)
(27,21)-(27,29)
(27,21)-(27,36)
(27,33)-(27,36)
(28,5)-(30,52)
(28,5)-(30,52)
(28,17)-(28,18)
(28,17)-(28,22)
(28,20)-(28,22)
(29,5)-(30,52)
(29,5)-(30,52)
(29,16)-(29,24)
(29,16)-(29,44)
(29,16)-(29,44)
(29,26)-(29,38)
(29,26)-(29,44)
(29,26)-(29,44)
(29,26)-(29,44)
(29,39)-(29,41)
(29,42)-(29,44)
(30,5)-(30,52)
(30,5)-(30,52)
(30,19)-(30,33)
(30,19)-(30,45)
(30,19)-(30,45)
(30,19)-(30,45)
(30,19)-(30,45)
(30,34)-(30,35)
(30,36)-(30,40)
(30,41)-(30,45)
(30,49)-(30,52)
(31,3)-(31,13)
(31,15)-(31,18)
(31,15)-(31,33)
(31,15)-(31,33)
(31,20)-(31,27)
(31,20)-(31,33)
(31,20)-(31,33)
(31,20)-(31,33)
(31,28)-(31,30)
(31,31)-(31,33)
*)

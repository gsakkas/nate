
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Timmy1 of expr* expr* expr
  | Timmy2 of expr* expr;;

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Timmy1 of expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildTimmy1 (e1,e2,e3) = Timmy1 (e1, e2);;

let buildTimmy2 (e1,e2) = Timmy2 (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth > 0
  then
    let rnd = rand (0, 6) in
    (if (rnd mod 7) = 0
     then buildSine (build (rand, (depth - 1)))
     else
       if (rnd mod 7) = 1
       then buildCosine (build (rand, (depth - 1)))
       else
         if (rnd mod 7) = 2
         then
           buildAverage
             ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
         else
           if (rnd mod 7) = 3
           then
             buildTimes
               ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
           else
             if (rnd mod 7) = 4
             then
               buildThresh
                 ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
                   (build (rand, (depth - 1))), (build (rand, (depth - 1))))
             else
               if (rnd mod 7) = 5
               then
                 buildTimmy1
                   ((build (rand, (depth - depth))),
                     (build (rand, (depth - depth))))
               else
                 buildTimmy2
                   ((build (rand, (depth - 1))), (build (rand, (depth - 1)))))
  else
    (let rnd = rand (0, 2) in
     if (rnd mod 2) = 0 then buildX () else buildY ());;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Timmy1 of expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildTimmy1 (e1,e2) = Timmy1 (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth > 0
  then
    let rnd = rand (0, 6) in
    (if (rnd mod 7) = 0
     then buildSine (build (rand, (depth - 1)))
     else
       if (rnd mod 7) = 1
       then buildCosine (build (rand, (depth - 1)))
       else
         if (rnd mod 7) = 2
         then
           buildAverage
             ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
         else
           if (rnd mod 7) = 3
           then
             buildTimes
               ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
           else
             if (rnd mod 7) = 4
             then
               buildThresh
                 ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
                   (build (rand, (depth - 1))), (build (rand, (depth - 1))))
             else
               buildTimmy1
                 ((build (rand, (depth - depth))),
                   (build (rand, (depth - depth)))))
  else
    (let rnd = rand (0, 2) in
     if (rnd mod 2) = 0 then buildX () else buildY ());;

*)

(* changed spans
(33,18)-(33,44)
(33,30)-(33,44)
(33,38)-(33,40)
(33,42)-(33,44)
(35,27)-(35,41)
(54,16)-(54,39)
(54,45)-(54,68)
(59,18)-(59,41)
(59,47)-(59,70)
(67,16)-(74,74)
(67,20)-(67,23)
(67,20)-(67,29)
(67,20)-(67,34)
(67,28)-(67,29)
(67,33)-(67,34)
(70,22)-(70,49)
(70,36)-(70,41)
(70,44)-(70,49)
(71,23)-(71,50)
(71,37)-(71,42)
(71,45)-(71,50)
(73,18)-(73,29)
(73,18)-(74,74)
(74,22)-(74,27)
(74,22)-(74,45)
(74,29)-(74,33)
(74,29)-(74,45)
(74,36)-(74,41)
(74,36)-(74,45)
(74,44)-(74,45)
(74,51)-(74,74)
(76,6)-(77,54)
*)

(* type error slice
(23,4)-(23,46)
(23,19)-(23,43)
(23,28)-(23,43)
(23,37)-(23,39)
(23,41)-(23,43)
(25,4)-(25,31)
(25,17)-(25,29)
(25,21)-(25,29)
(25,28)-(25,29)
(27,4)-(27,27)
(27,15)-(27,25)
(27,19)-(27,25)
(27,24)-(27,25)
(29,4)-(29,70)
(29,18)-(29,67)
(29,39)-(29,67)
(29,47)-(29,48)
(29,50)-(29,51)
(29,53)-(29,59)
(29,61)-(29,67)
(31,4)-(31,42)
(31,17)-(31,39)
(31,26)-(31,39)
(31,33)-(31,35)
(31,37)-(31,39)
(33,4)-(33,47)
(33,18)-(33,44)
(33,30)-(33,44)
(33,38)-(33,40)
(33,42)-(33,44)
(35,4)-(35,44)
(35,18)-(35,41)
(35,27)-(35,41)
(35,35)-(35,37)
(35,39)-(35,41)
(37,4)-(37,23)
(37,12)-(37,21)
(37,12)-(37,21)
(37,17)-(37,21)
(39,4)-(39,23)
(39,12)-(39,21)
(39,12)-(39,21)
(39,17)-(39,21)
(41,16)-(77,54)
(42,3)-(77,54)
(42,3)-(77,54)
(42,6)-(42,11)
(42,6)-(42,15)
(42,6)-(42,15)
(42,6)-(42,15)
(42,14)-(42,15)
(44,5)-(74,74)
(44,5)-(74,74)
(44,15)-(44,19)
(44,15)-(44,25)
(44,15)-(44,25)
(44,21)-(44,22)
(44,21)-(44,25)
(44,24)-(44,25)
(45,6)-(74,74)
(45,6)-(74,74)
(45,10)-(45,13)
(45,10)-(45,19)
(45,10)-(45,19)
(45,10)-(45,24)
(45,10)-(45,24)
(45,18)-(45,19)
(45,23)-(45,24)
(46,11)-(46,20)
(46,11)-(46,45)
(46,11)-(46,45)
(46,22)-(46,27)
(46,22)-(46,45)
(46,22)-(46,45)
(46,29)-(46,33)
(46,29)-(46,45)
(46,36)-(46,41)
(46,36)-(46,45)
(46,44)-(46,45)
(48,8)-(74,74)
(48,8)-(74,74)
(48,12)-(48,15)
(48,12)-(48,21)
(48,12)-(48,26)
(48,12)-(48,26)
(48,20)-(48,21)
(48,25)-(48,26)
(49,13)-(49,24)
(49,13)-(49,49)
(49,26)-(49,31)
(49,26)-(49,49)
(49,33)-(49,37)
(49,33)-(49,49)
(49,40)-(49,45)
(49,40)-(49,49)
(49,48)-(49,49)
(51,10)-(74,74)
(51,10)-(74,74)
(51,14)-(51,17)
(51,14)-(51,23)
(51,14)-(51,28)
(51,14)-(51,28)
(51,22)-(51,23)
(51,27)-(51,28)
(53,12)-(53,24)
(53,12)-(54,68)
(54,16)-(54,21)
(54,16)-(54,39)
(54,16)-(54,68)
(54,23)-(54,27)
(54,23)-(54,39)
(54,30)-(54,35)
(54,30)-(54,39)
(54,38)-(54,39)
(54,45)-(54,50)
(54,45)-(54,68)
(54,52)-(54,56)
(54,52)-(54,68)
(54,59)-(54,64)
(54,59)-(54,68)
(54,67)-(54,68)
(56,12)-(74,74)
(56,12)-(74,74)
(56,16)-(56,19)
(56,16)-(56,25)
(56,16)-(56,30)
(56,16)-(56,30)
(56,24)-(56,25)
(56,29)-(56,30)
(58,14)-(58,24)
(58,14)-(59,70)
(59,18)-(59,23)
(59,18)-(59,41)
(59,18)-(59,70)
(59,25)-(59,29)
(59,25)-(59,41)
(59,32)-(59,37)
(59,32)-(59,41)
(59,40)-(59,41)
(59,47)-(59,52)
(59,47)-(59,70)
(59,54)-(59,58)
(59,54)-(59,70)
(59,61)-(59,66)
(59,61)-(59,70)
(59,69)-(59,70)
(61,14)-(74,74)
(61,14)-(74,74)
(61,18)-(61,21)
(61,18)-(61,27)
(61,18)-(61,32)
(61,18)-(61,32)
(61,26)-(61,27)
(61,31)-(61,32)
(63,16)-(63,27)
(63,16)-(65,73)
(64,20)-(64,25)
(64,20)-(64,43)
(64,20)-(65,73)
(64,27)-(64,31)
(64,27)-(64,43)
(64,34)-(64,39)
(64,34)-(64,43)
(64,42)-(64,43)
(64,49)-(64,54)
(64,49)-(64,72)
(64,56)-(64,60)
(64,56)-(64,72)
(64,63)-(64,68)
(64,63)-(64,72)
(64,71)-(64,72)
(65,21)-(65,26)
(65,21)-(65,44)
(65,28)-(65,32)
(65,28)-(65,44)
(65,35)-(65,40)
(65,35)-(65,44)
(65,43)-(65,44)
(65,50)-(65,55)
(65,50)-(65,73)
(65,57)-(65,61)
(65,57)-(65,73)
(65,64)-(65,69)
(65,64)-(65,73)
(65,72)-(65,73)
(67,16)-(74,74)
(67,16)-(74,74)
(67,20)-(67,23)
(67,20)-(67,29)
(67,20)-(67,34)
(67,20)-(67,34)
(67,28)-(67,29)
(67,33)-(67,34)
(69,18)-(69,29)
(69,18)-(71,50)
(69,18)-(71,50)
(70,22)-(70,27)
(70,22)-(70,49)
(70,22)-(71,50)
(70,29)-(70,33)
(70,29)-(70,49)
(70,36)-(70,41)
(70,36)-(70,49)
(70,44)-(70,49)
(71,23)-(71,28)
(71,23)-(71,50)
(71,30)-(71,34)
(71,30)-(71,50)
(71,37)-(71,42)
(71,37)-(71,50)
(71,45)-(71,50)
(73,18)-(73,29)
(73,18)-(74,74)
(76,6)-(77,54)
(77,6)-(77,54)
(77,6)-(77,54)
(77,30)-(77,36)
(77,30)-(77,39)
(77,45)-(77,51)
(77,45)-(77,54)
*)


let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) < (List.length l2)
  then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
  else (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match x with
      | (y,z) ->
          let sum = y + z in
          (match a with
           | h::t -> ((sum + h) / 10) :: ((sum + h) mod 10) :: t
           | [] -> (sum / 10) :: (sum mod 10)) in
    let base = [] in
    let args = failwith List.combine (l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) < (List.length l2)
  then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
  else (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match x with
      | (y,z) ->
          let sum = y + z in
          (match a with
           | h::t -> ((sum + h) / 10) :: ((sum + h) mod 10) :: t
           | _ -> [sum / 10; sum mod 10]) in
    let base = [] in
    let args = List.rev (List.combine l1 l2) in List.fold_left f base args in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(18,12)-(20,45)
(20,21)-(20,45)
(22,16)-(22,24)
(22,16)-(22,44)
(22,39)-(22,44)
(23,5)-(23,52)
(23,49)-(23,52)
*)

(* type error slice
(2,4)-(2,68)
(2,15)-(2,64)
(2,17)-(2,64)
(2,21)-(2,64)
(2,21)-(2,64)
(2,24)-(2,25)
(2,24)-(2,30)
(2,24)-(2,30)
(2,24)-(2,30)
(2,29)-(2,30)
(2,36)-(2,38)
(2,44)-(2,45)
(2,44)-(2,64)
(2,50)-(2,55)
(2,50)-(2,64)
(2,50)-(2,64)
(2,50)-(2,64)
(2,56)-(2,57)
(2,59)-(2,60)
(2,59)-(2,64)
(2,63)-(2,64)
(4,4)-(7,70)
(4,13)-(7,66)
(4,16)-(7,66)
(5,7)-(5,18)
(5,7)-(5,21)
(5,7)-(5,21)
(5,19)-(5,21)
(5,26)-(5,37)
(5,26)-(5,40)
(5,26)-(5,40)
(5,38)-(5,40)
(6,11)-(6,16)
(6,11)-(6,54)
(6,11)-(6,62)
(6,11)-(6,67)
(6,21)-(6,32)
(6,21)-(6,35)
(6,21)-(6,35)
(6,33)-(6,35)
(6,40)-(6,51)
(6,40)-(6,54)
(6,40)-(6,54)
(6,52)-(6,54)
(6,58)-(6,59)
(6,60)-(6,62)
(6,65)-(6,67)
(7,15)-(7,66)
(7,25)-(7,36)
(7,25)-(7,39)
(7,44)-(7,55)
(7,44)-(7,58)
(7,44)-(7,58)
(7,56)-(7,58)
(7,62)-(7,63)
(7,64)-(7,66)
(9,20)-(10,70)
(10,3)-(10,70)
(10,3)-(10,70)
(10,3)-(10,70)
(10,3)-(10,70)
(10,3)-(10,70)
(10,9)-(10,10)
(10,24)-(10,26)
(10,37)-(10,70)
(10,37)-(10,70)
(10,40)-(10,41)
(10,40)-(10,45)
(10,51)-(10,61)
(10,51)-(10,63)
(10,69)-(10,70)
(12,4)-(24,37)
(12,12)-(24,33)
(12,15)-(24,33)
(13,3)-(24,33)
(13,12)-(23,52)
(14,5)-(23,52)
(14,5)-(23,52)
(14,11)-(20,45)
(14,13)-(20,45)
(15,7)-(20,45)
(15,7)-(20,45)
(15,13)-(15,14)
(17,11)-(20,45)
(17,11)-(20,45)
(17,21)-(17,22)
(17,21)-(17,26)
(17,21)-(17,26)
(17,21)-(17,26)
(17,25)-(17,26)
(18,12)-(20,45)
(18,12)-(20,45)
(18,12)-(20,45)
(18,12)-(20,45)
(18,12)-(20,45)
(18,12)-(20,45)
(18,12)-(20,45)
(18,18)-(18,19)
(19,24)-(19,27)
(19,24)-(19,31)
(19,24)-(19,31)
(19,24)-(19,37)
(19,24)-(19,65)
(19,30)-(19,31)
(19,35)-(19,37)
(19,44)-(19,47)
(19,44)-(19,51)
(19,44)-(19,59)
(19,44)-(19,65)
(19,50)-(19,51)
(19,57)-(19,59)
(19,64)-(19,65)
(20,21)-(20,24)
(20,21)-(20,29)
(20,21)-(20,45)
(20,27)-(20,29)
(20,35)-(20,38)
(20,35)-(20,45)
(20,43)-(20,45)
(21,5)-(23,52)
(21,5)-(23,52)
(21,16)-(21,18)
(22,5)-(23,52)
(22,5)-(23,52)
(22,16)-(22,24)
(22,16)-(22,44)
(22,16)-(22,44)
(22,16)-(22,44)
(22,25)-(22,37)
(22,39)-(22,41)
(22,39)-(22,44)
(22,39)-(22,44)
(22,42)-(22,44)
(23,5)-(23,52)
(23,5)-(23,52)
(23,19)-(23,33)
(23,19)-(23,45)
(23,19)-(23,45)
(23,19)-(23,45)
(23,19)-(23,45)
(23,34)-(23,35)
(23,36)-(23,40)
(23,41)-(23,45)
(23,49)-(23,52)
(24,15)-(24,18)
(24,15)-(24,33)
(24,15)-(24,33)
(24,20)-(24,27)
(24,20)-(24,33)
(24,20)-(24,33)
(24,28)-(24,30)
(24,31)-(24,33)
*)


let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let first = List.length l1 in
  let sec = List.length l2 in
  if first < sec
  then ((List.append (clone 0 (sec - first)) l1), l2)
  else
    if first > sec
    then (l1, (List.append (clone 0 (first - sec)) l2))
    else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (i,j) = x in
      let (s,t) = a in
      (((((i + j) + s) + t) / 10), ((((i + j) + s) + t) mod 10)) in
    let base = (0, []) in
    let args = List.combine (List.rev l1) (List.rev l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let first = List.length l1 in
  let sec = List.length l2 in
  if first < sec
  then ((List.append (clone 0 (sec - first)) l1), l2)
  else
    if first > sec
    then (l1, (List.append (clone 0 (first - sec)) l2))
    else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (i,j) = x in
      let (s,t) = a in ((((i + j) + s) / 10), ((((i + j) + s) mod 10) :: t)) in
    let base = (0, []) in
    let args = List.combine (List.rev l1) (List.rev l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(22,12)-(22,17)
(22,26)-(22,27)
(22,40)-(22,45)
(22,40)-(22,63)
(22,54)-(22,55)
(23,5)-(25,52)
*)

(* type error slice
(2,4)-(2,68)
(2,15)-(2,64)
(2,17)-(2,64)
(2,21)-(2,64)
(2,21)-(2,64)
(2,24)-(2,25)
(2,24)-(2,30)
(2,24)-(2,30)
(2,24)-(2,30)
(2,29)-(2,30)
(2,36)-(2,38)
(2,44)-(2,45)
(2,44)-(2,64)
(2,50)-(2,55)
(2,50)-(2,64)
(2,50)-(2,64)
(2,50)-(2,64)
(2,56)-(2,57)
(2,59)-(2,60)
(2,59)-(2,64)
(2,63)-(2,64)
(4,4)-(12,20)
(4,13)-(12,17)
(4,16)-(12,17)
(5,15)-(5,26)
(5,15)-(5,29)
(5,15)-(5,29)
(5,27)-(5,29)
(6,13)-(6,24)
(6,13)-(6,27)
(6,13)-(6,27)
(6,25)-(6,27)
(8,10)-(8,21)
(8,10)-(8,48)
(8,10)-(8,53)
(8,23)-(8,28)
(8,23)-(8,43)
(8,46)-(8,48)
(8,51)-(8,53)
(11,16)-(11,27)
(11,16)-(11,54)
(11,52)-(11,54)
(14,20)-(15,70)
(15,3)-(15,70)
(15,3)-(15,70)
(15,3)-(15,70)
(15,3)-(15,70)
(15,3)-(15,70)
(15,9)-(15,10)
(15,24)-(15,26)
(15,37)-(15,70)
(15,37)-(15,70)
(15,40)-(15,41)
(15,40)-(15,45)
(15,51)-(15,61)
(15,51)-(15,63)
(15,69)-(15,70)
(17,4)-(26,37)
(17,12)-(26,33)
(17,15)-(26,33)
(18,3)-(26,33)
(18,12)-(25,52)
(19,5)-(25,52)
(19,11)-(22,63)
(19,13)-(22,63)
(20,7)-(22,63)
(20,7)-(22,63)
(20,19)-(20,20)
(21,7)-(22,63)
(21,7)-(22,63)
(21,19)-(21,20)
(22,12)-(22,13)
(22,12)-(22,17)
(22,12)-(22,17)
(22,12)-(22,17)
(22,12)-(22,22)
(22,12)-(22,22)
(22,12)-(22,27)
(22,12)-(22,27)
(22,12)-(22,33)
(22,12)-(22,63)
(22,16)-(22,17)
(22,21)-(22,22)
(22,26)-(22,27)
(22,31)-(22,33)
(22,40)-(22,41)
(22,40)-(22,45)
(22,40)-(22,50)
(22,40)-(22,55)
(22,40)-(22,63)
(22,44)-(22,45)
(22,49)-(22,50)
(22,54)-(22,55)
(22,61)-(22,63)
(23,5)-(25,52)
(23,17)-(23,18)
(23,17)-(23,22)
(23,20)-(23,22)
(24,5)-(25,52)
(24,16)-(24,28)
(24,16)-(24,55)
(24,16)-(24,55)
(24,16)-(24,55)
(24,30)-(24,38)
(24,30)-(24,41)
(24,30)-(24,41)
(24,39)-(24,41)
(24,44)-(24,52)
(24,44)-(24,55)
(24,44)-(24,55)
(24,53)-(24,55)
(25,19)-(25,33)
(25,19)-(25,45)
(25,19)-(25,45)
(25,19)-(25,45)
(25,19)-(25,45)
(25,34)-(25,35)
(25,36)-(25,40)
(25,41)-(25,45)
(26,15)-(26,18)
(26,15)-(26,33)
(26,15)-(26,33)
(26,20)-(26,27)
(26,20)-(26,33)
(26,20)-(26,33)
(26,28)-(26,30)
(26,31)-(26,33)
*)

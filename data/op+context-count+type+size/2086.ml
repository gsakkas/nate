
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Timmy1 of expr* expr* expr
  | Timmy2 of expr* expr;;

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Timmy1 of expr* expr
  | Timmy2 of expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildTimmy1 (e1,e2) = Timmy1 (e1, e2);;

let buildTimmy2 (e1,e2) = Timmy2 (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth > 0
  then
    let rnd = rand (0, 6) in
    (if (rnd mod 7) = 0
     then buildSine (build (rand, (depth - 1)))
     else
       if (rnd mod 7) = 1
       then buildCosine (build (rand, (depth - 1)))
       else
         if (rnd mod 7) = 2
         then
           buildAverage
             ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
         else
           if (rnd mod 7) = 3
           then
             buildTimes
               ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
           else
             if (rnd mod 7) = 4
             then
               buildThresh
                 ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
                   (build (rand, (depth - 1))), (build (rand, (depth - 1))))
             else
               if (rnd mod 7) = 5
               then
                 buildTimmy1
                   ((build (rand, (depth - depth))),
                     (build (rand, (depth - depth))))
               else
                 buildTimmy2
                   ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
                     (build (rand, (depth - 1)))))
  else
    (let rnd = rand (0, 2) in
     if (rnd mod 2) = 0 then buildX () else buildY ());;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Timmy1 of expr* expr
  | Timmy2 of expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildTimmy1 (e1,e2) = Timmy1 (e1, e2);;

let buildTimmy2 (e1,e2,e3) = Timmy2 (e1, e2, e3);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth > 0
  then
    let rnd = rand (0, 6) in
    (if (rnd mod 7) = 0
     then buildSine (build (rand, (depth - 1)))
     else
       if (rnd mod 7) = 1
       then buildCosine (build (rand, (depth - 1)))
       else
         if (rnd mod 7) = 2
         then
           buildAverage
             ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
         else
           if (rnd mod 7) = 3
           then
             buildTimes
               ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
           else
             if (rnd mod 7) = 4
             then
               buildThresh
                 ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
                   (build (rand, (depth - 1))), (build (rand, (depth - 1))))
             else
               if (rnd mod 7) = 5
               then
                 buildTimmy1
                   ((build (rand, (depth - depth))),
                     (build (rand, (depth - depth))))
               else
                 buildTimmy2
                   ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
                     (build (rand, (depth - 1)))))
  else
    (let rnd = rand (0, 2) in
     if (rnd mod 2) = 0 then buildX () else buildY ());;

*)

(* changed spans
(36,18)-(36,41)
(36,27)-(36,41)
(36,35)-(36,37)
(38,12)-(38,21)
(55,16)-(55,39)
(55,45)-(55,68)
(60,18)-(60,41)
(60,47)-(60,70)
(71,22)-(71,49)
(71,36)-(71,41)
(71,44)-(71,49)
(72,23)-(72,50)
(72,37)-(72,42)
(72,45)-(72,50)
*)

(* type error slice
(24,4)-(24,46)
(24,19)-(24,43)
(24,28)-(24,43)
(24,37)-(24,39)
(24,41)-(24,43)
(26,4)-(26,31)
(26,17)-(26,29)
(26,21)-(26,29)
(26,28)-(26,29)
(28,4)-(28,27)
(28,15)-(28,25)
(28,19)-(28,25)
(28,24)-(28,25)
(30,4)-(30,70)
(30,18)-(30,67)
(30,39)-(30,67)
(30,47)-(30,48)
(30,50)-(30,51)
(30,53)-(30,59)
(30,61)-(30,67)
(32,4)-(32,42)
(32,17)-(32,39)
(32,26)-(32,39)
(32,33)-(32,35)
(32,37)-(32,39)
(34,4)-(34,44)
(34,18)-(34,41)
(34,27)-(34,41)
(34,35)-(34,37)
(34,39)-(34,41)
(36,4)-(36,44)
(36,18)-(36,41)
(36,27)-(36,41)
(36,35)-(36,37)
(36,39)-(36,41)
(38,4)-(38,23)
(38,12)-(38,21)
(38,12)-(38,21)
(38,17)-(38,21)
(40,4)-(40,23)
(40,12)-(40,21)
(40,12)-(40,21)
(40,17)-(40,21)
(42,16)-(79,54)
(43,3)-(79,54)
(43,3)-(79,54)
(43,6)-(43,11)
(43,6)-(43,15)
(43,6)-(43,15)
(43,6)-(43,15)
(43,14)-(43,15)
(45,5)-(76,46)
(45,5)-(76,46)
(45,15)-(45,19)
(45,15)-(45,25)
(45,15)-(45,25)
(45,21)-(45,22)
(45,21)-(45,25)
(45,24)-(45,25)
(46,6)-(76,46)
(46,6)-(76,46)
(46,10)-(46,13)
(46,10)-(46,19)
(46,10)-(46,19)
(46,10)-(46,24)
(46,10)-(46,24)
(46,18)-(46,19)
(46,23)-(46,24)
(47,11)-(47,20)
(47,11)-(47,45)
(47,11)-(47,45)
(47,22)-(47,27)
(47,22)-(47,45)
(47,22)-(47,45)
(47,29)-(47,33)
(47,29)-(47,45)
(47,36)-(47,41)
(47,36)-(47,45)
(47,44)-(47,45)
(49,8)-(76,46)
(49,8)-(76,46)
(49,12)-(49,15)
(49,12)-(49,21)
(49,12)-(49,26)
(49,12)-(49,26)
(49,20)-(49,21)
(49,25)-(49,26)
(50,13)-(50,24)
(50,13)-(50,49)
(50,26)-(50,31)
(50,26)-(50,49)
(50,33)-(50,37)
(50,33)-(50,49)
(50,40)-(50,45)
(50,40)-(50,49)
(50,48)-(50,49)
(52,10)-(76,46)
(52,10)-(76,46)
(52,14)-(52,17)
(52,14)-(52,23)
(52,14)-(52,28)
(52,14)-(52,28)
(52,22)-(52,23)
(52,27)-(52,28)
(54,12)-(54,24)
(54,12)-(55,68)
(55,16)-(55,21)
(55,16)-(55,39)
(55,16)-(55,68)
(55,23)-(55,27)
(55,23)-(55,39)
(55,30)-(55,35)
(55,30)-(55,39)
(55,38)-(55,39)
(55,45)-(55,50)
(55,45)-(55,68)
(55,52)-(55,56)
(55,52)-(55,68)
(55,59)-(55,64)
(55,59)-(55,68)
(55,67)-(55,68)
(57,12)-(76,46)
(57,12)-(76,46)
(57,16)-(57,19)
(57,16)-(57,25)
(57,16)-(57,30)
(57,16)-(57,30)
(57,24)-(57,25)
(57,29)-(57,30)
(59,14)-(59,24)
(59,14)-(60,70)
(60,18)-(60,23)
(60,18)-(60,41)
(60,18)-(60,70)
(60,25)-(60,29)
(60,25)-(60,41)
(60,32)-(60,37)
(60,32)-(60,41)
(60,40)-(60,41)
(60,47)-(60,52)
(60,47)-(60,70)
(60,54)-(60,58)
(60,54)-(60,70)
(60,61)-(60,66)
(60,61)-(60,70)
(60,69)-(60,70)
(62,14)-(76,46)
(62,14)-(76,46)
(62,18)-(62,21)
(62,18)-(62,27)
(62,18)-(62,32)
(62,18)-(62,32)
(62,26)-(62,27)
(62,31)-(62,32)
(64,16)-(64,27)
(64,16)-(66,73)
(65,20)-(65,25)
(65,20)-(65,43)
(65,20)-(66,73)
(65,27)-(65,31)
(65,27)-(65,43)
(65,34)-(65,39)
(65,34)-(65,43)
(65,42)-(65,43)
(65,49)-(65,54)
(65,49)-(65,72)
(65,56)-(65,60)
(65,56)-(65,72)
(65,63)-(65,68)
(65,63)-(65,72)
(65,71)-(65,72)
(66,21)-(66,26)
(66,21)-(66,44)
(66,28)-(66,32)
(66,28)-(66,44)
(66,35)-(66,40)
(66,35)-(66,44)
(66,43)-(66,44)
(66,50)-(66,55)
(66,50)-(66,73)
(66,57)-(66,61)
(66,57)-(66,73)
(66,64)-(66,69)
(66,64)-(66,73)
(66,72)-(66,73)
(68,16)-(76,46)
(68,16)-(76,46)
(68,20)-(68,23)
(68,20)-(68,29)
(68,20)-(68,34)
(68,20)-(68,34)
(68,28)-(68,29)
(68,33)-(68,34)
(70,18)-(70,29)
(70,18)-(72,50)
(71,22)-(71,27)
(71,22)-(71,49)
(71,22)-(72,50)
(71,29)-(71,33)
(71,29)-(71,49)
(71,36)-(71,41)
(71,36)-(71,49)
(71,44)-(71,49)
(72,23)-(72,28)
(72,23)-(72,50)
(72,30)-(72,34)
(72,30)-(72,50)
(72,37)-(72,42)
(72,37)-(72,50)
(72,45)-(72,50)
(74,18)-(74,29)
(74,18)-(76,46)
(74,18)-(76,46)
(75,22)-(75,27)
(75,22)-(75,45)
(75,22)-(76,46)
(75,29)-(75,33)
(75,29)-(75,45)
(75,36)-(75,41)
(75,36)-(75,45)
(75,44)-(75,45)
(75,51)-(75,56)
(75,51)-(75,74)
(75,58)-(75,62)
(75,58)-(75,74)
(75,65)-(75,70)
(75,65)-(75,74)
(75,73)-(75,74)
(76,23)-(76,28)
(76,23)-(76,46)
(76,30)-(76,34)
(76,30)-(76,46)
(76,37)-(76,42)
(76,37)-(76,46)
(76,45)-(76,46)
(78,6)-(79,54)
(79,6)-(79,54)
(79,6)-(79,54)
(79,30)-(79,36)
(79,30)-(79,39)
(79,45)-(79,51)
(79,45)-(79,54)
*)

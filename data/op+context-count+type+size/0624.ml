
let rec digitsOfInt n =
  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;

let rec additivePersistence n =
  match n with | [] -> [] | h::t -> t + (digitsOfInt (additivePersistence h));;


(* fix

let rec digitsOfInt n =
  if n > 0 then (digitsOfInt (n / 10)) @ [n mod 10] else [];;

let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;

let rec additivePersistence n =
  if n < 10 then 1 else 1 + (additivePersistence (sumList (digitsOfInt n)));;

*)

(* changed spans
(5,29)-(6,76)
(6,9)-(6,10)
(6,24)-(6,26)
(6,37)-(6,38)
(6,37)-(6,76)
(6,42)-(6,53)
(6,42)-(6,76)
(6,55)-(6,74)
(6,55)-(6,76)
*)

(* type error slice
(2,4)-(3,62)
(2,21)-(3,60)
(3,3)-(3,60)
(3,3)-(3,60)
(3,6)-(3,7)
(3,6)-(3,11)
(3,6)-(3,11)
(3,6)-(3,11)
(3,10)-(3,11)
(3,18)-(3,29)
(3,18)-(3,37)
(3,18)-(3,37)
(3,18)-(3,52)
(3,18)-(3,52)
(3,18)-(3,52)
(3,31)-(3,32)
(3,31)-(3,37)
(3,35)-(3,37)
(3,40)-(3,41)
(3,42)-(3,52)
(3,42)-(3,52)
(3,43)-(3,44)
(3,43)-(3,51)
(3,49)-(3,51)
(3,58)-(3,60)
(5,4)-(6,80)
(5,29)-(6,76)
(6,3)-(6,76)
(6,3)-(6,76)
(6,3)-(6,76)
(6,3)-(6,76)
(6,3)-(6,76)
(6,3)-(6,76)
(6,3)-(6,76)
(6,9)-(6,10)
(6,24)-(6,26)
(6,37)-(6,38)
(6,37)-(6,76)
(6,37)-(6,76)
(6,37)-(6,76)
(6,42)-(6,53)
(6,42)-(6,76)
(6,42)-(6,76)
(6,55)-(6,74)
(6,55)-(6,76)
(6,55)-(6,76)
(6,75)-(6,76)
*)
